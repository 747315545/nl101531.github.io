{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/image/wechatpay.png","path":"image/wechatpay.png","modified":1,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7cb865d7b34a0d7e54a2b688b8c36a8fe92f779b","modified":1489113813000},{"_id":"source/.DS_Store","hash":"95f402ee31de17cb9515c322582cffe7d5d20c1e","modified":1489198066000},{"_id":"source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"source/robots.txt","hash":"360b347ba7653fb0936cba10e718a38792c64ae0","modified":1492214329000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488216496000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488216496000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488216496000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1489200774000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488216496000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488216496000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488216496000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488216496000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488216496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488216496000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488216496000},{"_id":"themes/next/_config.yml","hash":"356dcb868e8efe806cbdf66fc085ecbe7de8e9f7","modified":1490930863000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488216496000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488216496000},{"_id":"source/_posts/hello-world.md","hash":"21e778d613f6df7967ebcf532c1c790ac871e845","modified":1489196984000},{"_id":"source/_posts/.DS_Store","hash":"c2a9a8b791457bfa5b597b792d05eaa098126638","modified":1489198548000},{"_id":"source/about/index.md","hash":"b78add3ca593f79e94064fc424833a497440d643","modified":1489807290000},{"_id":"source/categories/index.md","hash":"836c83255631a36c6063d6a215f2bc98341567de","modified":1489160265000},{"_id":"source/image/wechatpay.png","hash":"d5d073f06bc48b43cbf6ad875ef7ff251c2e8592","modified":1489194851000},{"_id":"source/tags/index.md","hash":"da7ffd2d17b90889d6a18973ce298bd67e043e80","modified":1489158988000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488216496000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488216496000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488216496000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488216496000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488216496000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488216496000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488216496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488216496000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488216496000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488216496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488216496000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488216496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1489115588000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488216496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488216496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488216496000},{"_id":"themes/next/layout/index.swig","hash":"e7347407abe2345a09c756f9845b58198a31762b","modified":1490105813000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488216496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488216496000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488216496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488216496000},{"_id":"themes/next/source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488216496000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488216496000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488216496000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488216496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488216496000},{"_id":"source/image/alipay.png","hash":"2b28021d05768718851abffd9c1e250c570015e6","modified":1489194836000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"source/_posts/docker/Docker学习记录(一)-基本概念.md","hash":"8e537aa5bc91330fb2f8dad2441a5f758bf5442f","modified":1491099164000},{"_id":"source/_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","hash":"250a7e1a655c006e26421f7e5c687173c792274f","modified":1491099245000},{"_id":"source/_posts/web/angular2学习记录-给后端程序员的经验分享.md","hash":"3b317dd5f190beb26a68e261899385e90883e949","modified":1491876528000},{"_id":"source/_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","hash":"cef7f59eac42ddfd86f81565e90a9ae45e157358","modified":1491099009000},{"_id":"source/_posts/linux/redis学习记录(四)-SpringDataRedis分析.md","hash":"b1fc7d76139a9863089c16b7c245e5ba2ceeddd8","modified":1490838072000},{"_id":"source/_posts/linux/redis学习记录(三)-redis中的数据结构.md","hash":"12cb54cb949d2061bf73b3d050a4bba710fd0aaa","modified":1490625270000},{"_id":"source/_posts/动漫/动漫推荐.md","hash":"7761ecaa820de803c79e5000ebb081ce16c829e7","modified":1491102661000},{"_id":"source/_posts/毕业设计/毕业设计周记(一).md","hash":"2599feed06d7bb6e3ab829ad1508f06a36f8a43a","modified":1489198162000},{"_id":"source/_posts/毕业设计/毕业设计周记(三).md","hash":"356e1b385c220a35665ea7db19b2466de7c452de","modified":1490535717000},{"_id":"source/_posts/毕业设计/毕业设计周记(二).md","hash":"d7c1c233e3f9a7606c840474ccde98f1343044b0","modified":1489848763000},{"_id":"source/_posts/毕业设计/毕业设计周记(五).md","hash":"dbb9ca9217a74fb1628898a77885c6fcc90b2322","modified":1491662888000},{"_id":"source/_posts/毕业设计/毕业设计周记(四).md","hash":"0de7c382df02c8730517a536b6e018b71252ab48","modified":1491262653000},{"_id":"source/_posts/毕业设计/.DS_Store","hash":"d3b9eb58d606841e774b9f5d4929616d90848633","modified":1490535768000},{"_id":"source/_posts/随谈/如何学习一门新技术.md","hash":"03a6fca956c2f3480381aa0a0161fe868ca2f86d","modified":1489198443000},{"_id":"source/_posts/随谈/ERP叛逃者.md","hash":"e21f17e84bbdbebe7ad41bab2ffbf971ec11bd11","modified":1489918829000},{"_id":"source/_posts/随谈/工作经验(持续更新).md","hash":"897123d3a89d2283b9fb3557ba40e05b5176c489","modified":1489198159000},{"_id":"source/_posts/随谈/面经.md","hash":"528f9e3713a6e484d40afc43dc89104b9fe5f8e5","modified":1489198109000},{"_id":"source/_posts/随谈/.DS_Store","hash":"9879e136178815653fa4842a380ff464f1374530","modified":1489198403000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488216496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488216496000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488216496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488216496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488216496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488216496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490926851000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488216496000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489850203000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488216496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488216496000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488216496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488216496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489851422000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488216496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488216496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488216496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488216496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488216496000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488216496000},{"_id":"themes/next/source/images/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488216496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488216496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488216496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488216496000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488216496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488216496000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488216496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488216496000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488216496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488216496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488216496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490451190000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488216496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488216496000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488216496000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488216496000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488216496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488216496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488216496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488216496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488216496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488216496000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488216496000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488216496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488216496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488216496000},{"_id":"public/baidusitemap.xml","hash":"3062313290192d153199349bb6fdfae4fe9abceb","modified":1492214341763},{"_id":"public/atom.xml","hash":"508d96dd30c07496068130a4cdf8bd1d6a1db412","modified":1492214341780},{"_id":"public/sitemap.xml","hash":"c019bd0f1052c0336afe4336a8b938357d6ef428","modified":1492214341781},{"_id":"public/search.xml","hash":"372970a249078d72c167224fe4f486b76fc3f62c","modified":1492214341781},{"_id":"public/about/index.html","hash":"f52330df21ee30d79ecefabedd0525f0a6ab4209","modified":1492214341807},{"_id":"public/categories/index.html","hash":"b0b5835f5b40fc6bcdb08cb1ed6f35c9fd1dd421","modified":1492214341807},{"_id":"public/tags/index.html","hash":"51b1761e7c1d808fa165081e28017d061b6c4089","modified":1492214341807},{"_id":"public/2017/04/08/web/angular2学习记录-给后端程序员的经验分享/index.html","hash":"f811b63633c4eca6cd6e63e3f37192334ea73178","modified":1492214341807},{"_id":"public/2017/04/08/毕业设计/毕业设计周记(五)/index.html","hash":"8c35141708ee7d8d4711d21629ad52c87ef093d3","modified":1492214341807},{"_id":"public/2017/04/03/毕业设计/毕业设计周记(四)/index.html","hash":"dc54c5a8ca0e75fda406eebee42a3d93e87a65eb","modified":1492214341807},{"_id":"public/2017/03/29/linux/redis学习记录(四)-SpringDataRedis分析/index.html","hash":"4805a359e613004aec26c6a17314e3644003829f","modified":1492214341807},{"_id":"public/2017/03/26/linux/redis学习记录(三)-redis中的数据结构/index.html","hash":"7c594b2695e2f4667b9cdf99b8574b9f98da5f76","modified":1492214341807},{"_id":"public/2017/03/25/毕业设计/毕业设计周记(三)/index.html","hash":"5a12a905b297041f5448850dd3c937a0efd14ae7","modified":1492214341808},{"_id":"public/2017/03/19/随谈/ERP叛逃者/index.html","hash":"e4a311439df26dd716d9c636a02466ebc7f44114","modified":1492214341808},{"_id":"public/2017/03/18/毕业设计/毕业设计周记(二)/index.html","hash":"d046172074c229ea3ee1ea61ee8f2ead1155d346","modified":1492214341808},{"_id":"public/2017/03/18/动漫/动漫推荐/index.html","hash":"fc867cfce037774176ed9fa150b947c4f947aba1","modified":1492214341808},{"_id":"public/2017/03/12/docker/Docker学习记录(三)-构建非跨平台项目编译环境/index.html","hash":"abcbe50bf9c0597c1d3eeca2e6b9cb6baa411db1","modified":1492214341808},{"_id":"public/2017/03/10/docker/Docker学习记录(二)-Dockerfile创建镜像/index.html","hash":"1d8c14823e869ae07e7ba8923df46b6c7518ed5c","modified":1492214341808},{"_id":"public/2017/03/10/毕业设计/毕业设计周记(一)/index.html","hash":"3448ac02f10799766bdefee28bc75a647e67a5aa","modified":1492214341808},{"_id":"public/2017/03/10/docker/Docker学习记录(一)-基本概念/index.html","hash":"e3511c81ff9502e811989adb3af40d535770ba0e","modified":1492214341808},{"_id":"public/2017/03/09/hello-world/index.html","hash":"7e690c8f429918bee807eab7c0222142e2b2d253","modified":1492214341808},{"_id":"public/2017/02/28/随谈/工作经验(持续更新)/index.html","hash":"c432217016930f1e56672e94e035c08f3693f4cd","modified":1492214341808},{"_id":"public/2017/02/01/随谈/如何学习一门新技术/index.html","hash":"7328a05570cd4121a240c21438fd4813b89cff99","modified":1492214341808},{"_id":"public/2017/01/10/随谈/面经/index.html","hash":"a96e99b26eaa8dd0517713c3f9f814539ced41f2","modified":1492214341808},{"_id":"public/archives/index.html","hash":"34c81d5038f9a40cf5f088d8c5b7691efc2335aa","modified":1492214341808},{"_id":"public/archives/page/2/index.html","hash":"d7011b2154d0fcb5924efb849a03b7ce48f9597f","modified":1492214341808},{"_id":"public/archives/2017/index.html","hash":"fd64a4a2e70781a9fc7224ee45587e70e1c2dcee","modified":1492214341808},{"_id":"public/archives/2017/page/2/index.html","hash":"da156112c2dcc1534a0a473a55844a7b5f68cb8f","modified":1492214341808},{"_id":"public/archives/2017/01/index.html","hash":"042eda78a31b77ca71def53c199161afc07511e0","modified":1492214341808},{"_id":"public/archives/2017/02/index.html","hash":"ef2b9b8b5e02a8a09cfaa1e7e352fee7b0f3dffa","modified":1492214341808},{"_id":"public/archives/2017/03/index.html","hash":"6a480026e7abb4174fd64bb3a710d6e50e597cb7","modified":1492214341808},{"_id":"public/archives/2017/03/page/2/index.html","hash":"02f9e35526101c144bbe9edc9e7c8a6fd3a239a5","modified":1492214341809},{"_id":"public/archives/2017/04/index.html","hash":"d07e3199cb3cb00023d2f0bcc81cce11c8372fed","modified":1492214341809},{"_id":"public/categories/随谈/index.html","hash":"26bf3aed9681fb587a7ae14283443e9167958b4a","modified":1492214341809},{"_id":"public/categories/docker/index.html","hash":"b07fe332f36707a2807995651efa8a5d68831bfa","modified":1492214341809},{"_id":"public/categories/web/index.html","hash":"e6cb116eb500590a448081a0183257572257e985","modified":1492214341809},{"_id":"public/categories/redis/index.html","hash":"2f4da077210eec44925b39fbfab1dd267f65ed47","modified":1492214341809},{"_id":"public/categories/动漫/index.html","hash":"451248eff39a88270d9ff59fa11387ab50782580","modified":1492214341809},{"_id":"public/index.html","hash":"b83bafc25e7ea7c0c0f2d7ede399d79f80a90e75","modified":1492214341809},{"_id":"public/page/2/index.html","hash":"57631facab9d5f4f16267f74e559a12cfdab294e","modified":1492214341809},{"_id":"public/tags/随谈/index.html","hash":"b6051a2df9dda353c5c8f189058f7935b721c9db","modified":1492214341809},{"_id":"public/tags/docker/index.html","hash":"eb3755e071eba69eef61256f5e5cf8583e457ef2","modified":1492214341809},{"_id":"public/tags/angular/index.html","hash":"d680a27f1f8d3b8e9b299d48bf4e56d10bb40d47","modified":1492214341809},{"_id":"public/tags/redis/index.html","hash":"536ddd20ec8d50a4aa52fc7702b5aeee4de26ead","modified":1492214341809},{"_id":"public/tags/动漫/index.html","hash":"8064db9ad7e4510da17cda45fd14c0af18c2f28a","modified":1492214341809},{"_id":"public/tags/毕业设计/index.html","hash":"3d323ad403b8925ef747d2ab296c61b02a336093","modified":1492214341809},{"_id":"public/tags/学习方法/index.html","hash":"e5600b1ef2b44e214231683ff2ebce281a19fdda","modified":1492214341809},{"_id":"public/tags/选择/index.html","hash":"dfb10b7b5220aa3da0f31498ef7b593b96607924","modified":1492214341809},{"_id":"public/tags/工作/index.html","hash":"986261e0a6ae9d1415accc33ef0615175bc071c3","modified":1492214341809},{"_id":"public/tags/面试/index.html","hash":"6656c06b532f261b7d28e1237220a273da49d109","modified":1492214341809},{"_id":"public/CNAME","hash":"7cb865d7b34a0d7e54a2b688b8c36a8fe92f779b","modified":1492214341819},{"_id":"public/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1492214341819},{"_id":"public/robots.txt","hash":"360b347ba7653fb0936cba10e718a38792c64ae0","modified":1492214341819},{"_id":"public/image/wechatpay.png","hash":"d5d073f06bc48b43cbf6ad875ef7ff251c2e8592","modified":1492214341819},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492214341819},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1492214341819},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1492214341819},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1492214341819},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1492214341820},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1492214341820},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1492214341820},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1492214341820},{"_id":"public/images/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1492214341820},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1492214341820},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492214341820},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492214341820},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1492214341820},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1492214341820},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492214341820},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1492214341820},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1492214341820},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492214341820},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492214341820},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492214341820},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492214341820},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492214341820},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492214341821},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1492214341821},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492214341821},{"_id":"public/image/alipay.png","hash":"2b28021d05768718851abffd9c1e250c570015e6","modified":1492214342511},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1492214342513},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1492214342520},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1492214342520},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1492214342520},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492214342525},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1492214342525},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1492214342525},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492214342525},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1492214342525},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492214342525},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492214342525},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492214342525},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492214342525},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1492214342525},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492214342525},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492214342525},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492214342525},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492214342525},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492214342525},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492214342525},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492214342526},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492214342526},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492214342526},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492214342526},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492214342526},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492214342526},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492214342526},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492214342526},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492214342526},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492214342526},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492214342526},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492214342526},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492214342526},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492214342526},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492214342526},{"_id":"public/css/main.css","hash":"bf642fb33cc2d6eabc63cd789080ab0a0622ea1f","modified":1492214342526},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492214342526},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492214342526},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492214342526},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492214342526},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492214342526},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492214342526},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1492214342526},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1492214342526},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492214342526},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492214342527},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1492214342527},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1492214342535}],"Category":[{"name":"随谈","_id":"cj1ihw1160003pruh08bys5n3"},{"name":"docker","_id":"cj1ihw16b000apruhmvgk79dv"},{"name":"web","_id":"cj1ihw16m000mpruhwzq393su"},{"name":"redis","_id":"cj1ihw16p000tpruh9rdp88zj"},{"name":"动漫","_id":"cj1ihw16t000zpruhf4b7nmgu"}],"Data":[],"Page":[{"title":"about","date":"2017-03-10T15:39:09.000Z","type":"about","_content":"\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n下一步要做的事情就是把之前的博客慢慢迁移过来.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-10 23:39:09\ntype: \"about\"\n---\n\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n下一步要做的事情就是把之前的博客慢慢迁移过来.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","updated":"2017-03-18T03:21:30.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1ihw1130001pruhq18gk7gf","content":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>下一步要做的事情就是把之前的博客慢慢迁移过来.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>下一步要做的事情就是把之前的博客慢慢迁移过来.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n"},{"title":"categorys","date":"2017-03-10T15:35:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categorys\ndate: 2017-03-10 23:35:22\ntype: \"categories\"\n---\n","updated":"2017-03-10T15:37:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1ihw1150002pruhwvvy8v1e","content":"","excerpt":"","more":""},{"title":"tagcloud","date":"2017-03-10T15:14:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tagcloud\ndate: 2017-03-10 23:14:57\ntype: \"tags\"\n---\n","updated":"2017-03-10T15:16:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1ihw15i0007pruh7zh5jlbo","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-03-08T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - 随谈\ncategories: 随谈\n\ndate: 2017-03-09 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-11T01:49:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw10y0000pruhyteybqw0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Docker学习记录(一)-基本概念","date":"2017-03-10T09:21:00.000Z","_content":"\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","source":"_posts/docker/Docker学习记录(一)-基本概念.md","raw":"---\ntitle: Docker学习记录(一)-基本概念\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 17:21:00\n\n---\n\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","slug":"docker/Docker学习记录(一)-基本概念","published":1,"updated":"2017-04-02T02:12:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw1680008pruhm7veshrm","content":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\" target=\"_blank\" rel=\"external\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n"},{"title":"Docker学习记录(三)-构建非跨平台项目编译环境","date":"2017-03-12T07:21:00.000Z","_content":"\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n>个人独立博客: http://mrdear.cn\n\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","source":"_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","raw":"---\ntitle: Docker学习记录(三)-构建非跨平台项目编译环境\ncategories: docker\ntags:\n - docker\ndate: 2017-03-12 15:21:00\n\n---\n\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n>个人独立博客: http://mrdear.cn\n\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","slug":"docker/Docker学习记录(三)-构建非跨平台项目编译环境","published":1,"updated":"2017-04-02T02:14:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16a0009pruhivjvbxf7","content":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<blockquote>\n<p>个人独立博客: <a href=\"http://mrdear.cn\">http://mrdear.cn</a></p>\n</blockquote>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<blockquote>\n<p>个人独立博客: <a href=\"http://mrdear.cn\">http://mrdear.cn</a></p>\n</blockquote>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n"},{"title":"angular2学习记录-给后端程序员的经验分享","date":"2017-04-08T15:00:00.000Z","_content":"\n\n# angular2学习记录-给后端程序员的经验分享\n\n标签（空格分隔）： web\n\n---\n\n### 1.前言\n\n前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.\n\n**这里就要说下个人观点了,安利一波**:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.\n\n### 2.angular2简介\n1. angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.\n2. 使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.\n3. google和Microsoft支持\n4. WebStorm对angular2的强大支持.\n5. 一篇安利文章http://www.infoq.com/cn/articles/why-choose-angular2/\n\n>一些学习资料\nECMAScript 6入门  http://es6.ruanyifeng.com/\nTypeScript入门   http://www.imooc.com/learn/763\nTypeScript中文网  https://www.tslang.cn/docs/tutorial.html\n慕课网1小时快速上手视频  http://www.imooc.com/learn/789\n官方文档  https://www.angular.cn/docs/ts/latest/cli-quickstart.html\n\n\n### 3.遇到的问题\n\n#### 3.1滚动监听\n要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)\n![图来自我的csdn博客](http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前使用Jq是\n``` javaScript\n$(window).scroll(function () {\n    indexApp.scrollBar = parseInt(document.body.scrollTop||document.documentElement.scrollTop);\n});\n```\n不打算依赖Jq,搜了点资料发现了下面两种写法.\n``` javaScript\n//下面这种写法在TS下不会有效果.\n  isAddBackColor(){\n    if (this.getIsIndex()){\n       var self = this;\n       //该处使用匿名函数,而不是箭头函数.\n      window.addEventListener('scroll',function () {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        self.isBackColor = marginTop > 20 && self.getIsIndex();\n      });\n    }\n  }\n```\n\n\n``` javaScript\n/**\n   * 判断是否需要加背景色(有效果的)\n   * 使用isBackColor控制结果\n   */\n  isAddBackColor(){\n    if (this.getIsIndex()){\n      //监听事件使用箭头函数,这样ng2才会管理该变量\n      window.addEventListener('scroll',() => {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        this.isBackColor = marginTop > 20 && this.getIsIndex();\n      });\n    }\n  }\n  \n```\n原因不明,猜想是`var self = this;`赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.\n\n#### 3.2http参数传递\n按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入`1111@qq.com`会被转换为`1111%40qq.com`,导致服务端解析失败,找了很多原因才发现是`URLSearchParams`这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,`import {URLSearchParams} from \"@angular/http\";\n`\n``` javaScript\n    let urlParams = new URLSearchParams();\n    urlParams.set('search',search);\n    urlParams.set('order',order);\n    urlParams.set('pageNum',pageNum.toString());\n    urlParams.set('pageSize',pageSize.toString());\n    return this.http.get(Config.url_problem_stage + stage,{params:urlParams}).toPromise()\n              .then(response => response.json())\n              .catch(LogService.handleError)\n```\n\n\n#### 3.3跨域问题\n浏览器要求同源下才可请求,否则就产生跨域问题.\n\n|URL|说明|是否允许通信|\n|-----|-----|-----|\n|http://www.a.com/a.js<br>http://www.a.com/b.js | 同一域名下 | 允许 |\n|http://www.a.com/lab/a.js <br>http://www.a.com/script/b.js\t|同一域名下不同文件夹\t|允许|\n|http://www.a.com:8000/a.js <br>http://www.a.com/b.js | 同一域名，不同端口 |不允许|\n|http://www.a.com/a.js <br>https://www.a.com/b.js | 同一域名，不同协议 | 不允许|\n|http://www.a.com/a.js <br>http://70.32.92.74/b.js |域名和域名对应ip |不允许|\n|http://www.a.com/a.js <br>http://script.a.com/b.js |主域相同，子域不同|不允许|\n|http://www.a.com/a.js <br>http://a.com/b.js |同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js <br>http://www.a.com/b.js |不同域名 |不允许 |\n\n\n解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.\n``` conf\n    server {\n        listen       8888;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /api {\n            proxy_pass   http://127.0.0.1:8080;\n        }\n        location / {\n            proxy_pass   http://127.0.0.1:4200;\n        }\n    }\n```\n\n#### 3.4路由问题\nangular2的路由匹配规则是从根路由也就是`forRoot()`的这个开始.在该处匹配寻找规则.\n\n**根路由:**\n``` javaScript\nexport const appRoutes: Routes = [\n  {\n    path:'',\n    component: IndexComponent,\n    pathMatch:'full'\n  },\n  {\n    path:'aust',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n  {\n    path:'index',\n    component: IndexComponent,\n  },\n  {\n    path:'**',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n];\n\n```\n**子路由:**\n``` javaScript\nexport const childRouter : Routes = [\n  {\n    path: '',\n    component:ContentAndAsideComponent,\n    children:[\n      {path:'',redirectTo:'/index',pathMatch:'full'},\n      {path:'start',component:StartComponent},\n    ]\n  }\n  ];\n```\n**举例:**\n访问`/`,则先在根路由寻找,找到其跳转到IndexComponent,完成任务\n访问`/aust`.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到`/index`,那么回到根路由,找到IndexComponent完成任务.\n访问`/aust/start`,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.\n\n#### 3.5组件通信\n父->子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.\n子->父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.\n任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.\n\n#### 3.6单例?\nagular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.\n\n#### 3.7组件生命周期\n组件生命周期看下面这张图.图中没有`onChanges(changes: SimpleChanges)`方法的调用,该方法检测到组件的**输入属性**发生变化时调用,也就是存在**@inpu**t装饰的属性,该属性每次变化时会调该方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg)\n\n----------\n\nangular2项目:\nhttps://github.com/nl101531/AUSTOJ-WEB","source":"_posts/web/angular2学习记录-给后端程序员的经验分享.md","raw":"---\ntitle: angular2学习记录-给后端程序员的经验分享\ntags:\n  - angular\ncategories: web\ndate: 2017-04-08 23:00:00\n\n---\n\n\n# angular2学习记录-给后端程序员的经验分享\n\n标签（空格分隔）： web\n\n---\n\n### 1.前言\n\n前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.\n\n**这里就要说下个人观点了,安利一波**:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.\n\n### 2.angular2简介\n1. angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.\n2. 使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.\n3. google和Microsoft支持\n4. WebStorm对angular2的强大支持.\n5. 一篇安利文章http://www.infoq.com/cn/articles/why-choose-angular2/\n\n>一些学习资料\nECMAScript 6入门  http://es6.ruanyifeng.com/\nTypeScript入门   http://www.imooc.com/learn/763\nTypeScript中文网  https://www.tslang.cn/docs/tutorial.html\n慕课网1小时快速上手视频  http://www.imooc.com/learn/789\n官方文档  https://www.angular.cn/docs/ts/latest/cli-quickstart.html\n\n\n### 3.遇到的问题\n\n#### 3.1滚动监听\n要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)\n![图来自我的csdn博客](http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前使用Jq是\n``` javaScript\n$(window).scroll(function () {\n    indexApp.scrollBar = parseInt(document.body.scrollTop||document.documentElement.scrollTop);\n});\n```\n不打算依赖Jq,搜了点资料发现了下面两种写法.\n``` javaScript\n//下面这种写法在TS下不会有效果.\n  isAddBackColor(){\n    if (this.getIsIndex()){\n       var self = this;\n       //该处使用匿名函数,而不是箭头函数.\n      window.addEventListener('scroll',function () {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        self.isBackColor = marginTop > 20 && self.getIsIndex();\n      });\n    }\n  }\n```\n\n\n``` javaScript\n/**\n   * 判断是否需要加背景色(有效果的)\n   * 使用isBackColor控制结果\n   */\n  isAddBackColor(){\n    if (this.getIsIndex()){\n      //监听事件使用箭头函数,这样ng2才会管理该变量\n      window.addEventListener('scroll',() => {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        this.isBackColor = marginTop > 20 && this.getIsIndex();\n      });\n    }\n  }\n  \n```\n原因不明,猜想是`var self = this;`赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.\n\n#### 3.2http参数传递\n按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入`1111@qq.com`会被转换为`1111%40qq.com`,导致服务端解析失败,找了很多原因才发现是`URLSearchParams`这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,`import {URLSearchParams} from \"@angular/http\";\n`\n``` javaScript\n    let urlParams = new URLSearchParams();\n    urlParams.set('search',search);\n    urlParams.set('order',order);\n    urlParams.set('pageNum',pageNum.toString());\n    urlParams.set('pageSize',pageSize.toString());\n    return this.http.get(Config.url_problem_stage + stage,{params:urlParams}).toPromise()\n              .then(response => response.json())\n              .catch(LogService.handleError)\n```\n\n\n#### 3.3跨域问题\n浏览器要求同源下才可请求,否则就产生跨域问题.\n\n|URL|说明|是否允许通信|\n|-----|-----|-----|\n|http://www.a.com/a.js<br>http://www.a.com/b.js | 同一域名下 | 允许 |\n|http://www.a.com/lab/a.js <br>http://www.a.com/script/b.js\t|同一域名下不同文件夹\t|允许|\n|http://www.a.com:8000/a.js <br>http://www.a.com/b.js | 同一域名，不同端口 |不允许|\n|http://www.a.com/a.js <br>https://www.a.com/b.js | 同一域名，不同协议 | 不允许|\n|http://www.a.com/a.js <br>http://70.32.92.74/b.js |域名和域名对应ip |不允许|\n|http://www.a.com/a.js <br>http://script.a.com/b.js |主域相同，子域不同|不允许|\n|http://www.a.com/a.js <br>http://a.com/b.js |同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js <br>http://www.a.com/b.js |不同域名 |不允许 |\n\n\n解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.\n``` conf\n    server {\n        listen       8888;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /api {\n            proxy_pass   http://127.0.0.1:8080;\n        }\n        location / {\n            proxy_pass   http://127.0.0.1:4200;\n        }\n    }\n```\n\n#### 3.4路由问题\nangular2的路由匹配规则是从根路由也就是`forRoot()`的这个开始.在该处匹配寻找规则.\n\n**根路由:**\n``` javaScript\nexport const appRoutes: Routes = [\n  {\n    path:'',\n    component: IndexComponent,\n    pathMatch:'full'\n  },\n  {\n    path:'aust',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n  {\n    path:'index',\n    component: IndexComponent,\n  },\n  {\n    path:'**',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n];\n\n```\n**子路由:**\n``` javaScript\nexport const childRouter : Routes = [\n  {\n    path: '',\n    component:ContentAndAsideComponent,\n    children:[\n      {path:'',redirectTo:'/index',pathMatch:'full'},\n      {path:'start',component:StartComponent},\n    ]\n  }\n  ];\n```\n**举例:**\n访问`/`,则先在根路由寻找,找到其跳转到IndexComponent,完成任务\n访问`/aust`.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到`/index`,那么回到根路由,找到IndexComponent完成任务.\n访问`/aust/start`,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.\n\n#### 3.5组件通信\n父->子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.\n子->父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.\n任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.\n\n#### 3.6单例?\nagular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.\n\n#### 3.7组件生命周期\n组件生命周期看下面这张图.图中没有`onChanges(changes: SimpleChanges)`方法的调用,该方法检测到组件的**输入属性**发生变化时调用,也就是存在**@inpu**t装饰的属性,该属性每次变化时会调该方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg)\n\n----------\n\nangular2项目:\nhttps://github.com/nl101531/AUSTOJ-WEB","slug":"web/angular2学习记录-给后端程序员的经验分享","published":1,"updated":"2017-04-11T02:08:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16b000cpruhljjodcjs","content":"<h1 id=\"angular2学习记录-给后端程序员的经验分享\"><a href=\"#angular2学习记录-给后端程序员的经验分享\" class=\"headerlink\" title=\"angular2学习记录-给后端程序员的经验分享\"></a>angular2学习记录-给后端程序员的经验分享</h1><p>标签（空格分隔）： web</p>\n<hr>\n<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.</p>\n<p><strong>这里就要说下个人观点了,安利一波</strong>:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.</p>\n<h3 id=\"2-angular2简介\"><a href=\"#2-angular2简介\" class=\"headerlink\" title=\"2.angular2简介\"></a>2.angular2简介</h3><ol>\n<li>angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.</li>\n<li>使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.</li>\n<li>google和Microsoft支持</li>\n<li>WebStorm对angular2的强大支持.</li>\n<li>一篇安利文章<a href=\"http://www.infoq.com/cn/articles/why-choose-angular2/\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/why-choose-angular2/</a></li>\n</ol>\n<blockquote>\n<p>一些学习资料<br>ECMAScript 6入门  <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/</a><br>TypeScript入门   <a href=\"http://www.imooc.com/learn/763\" target=\"_blank\" rel=\"external\">http://www.imooc.com/learn/763</a><br>TypeScript中文网  <a href=\"https://www.tslang.cn/docs/tutorial.html\" target=\"_blank\" rel=\"external\">https://www.tslang.cn/docs/tutorial.html</a><br>慕课网1小时快速上手视频  <a href=\"http://www.imooc.com/learn/789\" target=\"_blank\" rel=\"external\">http://www.imooc.com/learn/789</a><br>官方文档  <a href=\"https://www.angular.cn/docs/ts/latest/cli-quickstart.html\" target=\"_blank\" rel=\"external\">https://www.angular.cn/docs/ts/latest/cli-quickstart.html</a></p>\n</blockquote>\n<h3 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3.遇到的问题\"></a>3.遇到的问题</h3><h4 id=\"3-1滚动监听\"><a href=\"#3-1滚动监听\" class=\"headerlink\" title=\"3.1滚动监听\"></a>3.1滚动监听</h4><p>要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)<br><img src=\"http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图来自我的csdn博客\"></p>\n<p>之前使用Jq是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    indexApp.scrollBar = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.body.scrollTop||<span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>不打算依赖Jq,搜了点资料发现了下面两种写法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面这种写法在TS下不会有效果.</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"comment\">//该处使用匿名函数,而不是箭头函数.</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        self.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; self.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 判断是否需要加背景色(有效果的)</div><div class=\"line\">   * 使用isBackColor控制结果</div><div class=\"line\">   */</div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">      <span class=\"comment\">//监听事件使用箭头函数,这样ng2才会管理该变量</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,() =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; <span class=\"keyword\">this</span>.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>原因不明,猜想是<code>var self = this;</code>赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.</p>\n<h4 id=\"3-2http参数传递\"><a href=\"#3-2http参数传递\" class=\"headerlink\" title=\"3.2http参数传递\"></a>3.2http参数传递</h4><p>按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入<code>1111@qq.com</code>会被转换为<code>1111%40qq.com</code>,导致服务端解析失败,找了很多原因才发现是<code>URLSearchParams</code>这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,<code>import {URLSearchParams} from &quot;@angular/http&quot;;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlParams = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">urlParams.set(<span class=\"string\">'search'</span>,search);</div><div class=\"line\">urlParams.set(<span class=\"string\">'order'</span>,order);</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageNum'</span>,pageNum.toString());</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageSize'</span>,pageSize.toString());</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(Config.url_problem_stage + stage,&#123;<span class=\"attr\">params</span>:urlParams&#125;).toPromise()</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">          .catch(LogService.handleError)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3跨域问题\"><a href=\"#3-3跨域问题\" class=\"headerlink\" title=\"3.3跨域问题\"></a>3.3跨域问题</h4><p>浏览器要求同源下才可请求,否则就产生跨域问题.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/lab/a.js</a> <br><a href=\"http://www.a.com/script/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com:8000/a.js</a> <br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"https://www.a.com/b.js\" target=\"_blank\" rel=\"external\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://70.32.92.74/b.js\" target=\"_blank\" rel=\"external\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://script.a.com/b.js\" target=\"_blank\" rel=\"external\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://a.com/b.js\" target=\"_blank\" rel=\"external\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/a.js</a> <br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       8888;</div><div class=\"line\">    server_name  localhost;</div><div class=\"line\"></div><div class=\"line\">    #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    location /api &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:8080;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:4200;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-4路由问题\"><a href=\"#3-4路由问题\" class=\"headerlink\" title=\"3.4路由问题\"></a>3.4路由问题</h4><p>angular2的路由匹配规则是从根路由也就是<code>forRoot()</code>的这个开始.在该处匹配寻找规则.</p>\n<p><strong>根路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appRoutes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'aust'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'**'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p><strong>子路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> childRouter : Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>:ContentAndAsideComponent,</div><div class=\"line\">    <span class=\"attr\">children</span>:[</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">''</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">'/index'</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">'start'</span>,<span class=\"attr\">component</span>:StartComponent&#125;,</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  ];</div></pre></td></tr></table></figure></p>\n<p><strong>举例:</strong><br>访问<code>/</code>,则先在根路由寻找,找到其跳转到IndexComponent,完成任务<br>访问<code>/aust</code>.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到<code>/index</code>,那么回到根路由,找到IndexComponent完成任务.<br>访问<code>/aust/start</code>,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.</p>\n<h4 id=\"3-5组件通信\"><a href=\"#3-5组件通信\" class=\"headerlink\" title=\"3.5组件通信\"></a>3.5组件通信</h4><p>父-&gt;子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.<br>子-&gt;父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.<br>任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.</p>\n<h4 id=\"3-6单例\"><a href=\"#3-6单例\" class=\"headerlink\" title=\"3.6单例?\"></a>3.6单例?</h4><p>agular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.</p>\n<h4 id=\"3-7组件生命周期\"><a href=\"#3-7组件生命周期\" class=\"headerlink\" title=\"3.7组件生命周期\"></a>3.7组件生命周期</h4><p>组件生命周期看下面这张图.图中没有<code>onChanges(changes: SimpleChanges)</code>方法的调用,该方法检测到组件的<strong>输入属性</strong>发生变化时调用,也就是存在<strong>@inpu</strong>t装饰的属性,该属性每次变化时会调该方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg\" alt=\"\"></p>\n<hr>\n<p>angular2项目:<br><a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n","excerpt":"","more":"<h1 id=\"angular2学习记录-给后端程序员的经验分享\"><a href=\"#angular2学习记录-给后端程序员的经验分享\" class=\"headerlink\" title=\"angular2学习记录-给后端程序员的经验分享\"></a>angular2学习记录-给后端程序员的经验分享</h1><p>标签（空格分隔）： web</p>\n<hr>\n<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.</p>\n<p><strong>这里就要说下个人观点了,安利一波</strong>:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.</p>\n<h3 id=\"2-angular2简介\"><a href=\"#2-angular2简介\" class=\"headerlink\" title=\"2.angular2简介\"></a>2.angular2简介</h3><ol>\n<li>angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.</li>\n<li>使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.</li>\n<li>google和Microsoft支持</li>\n<li>WebStorm对angular2的强大支持.</li>\n<li>一篇安利文章<a href=\"http://www.infoq.com/cn/articles/why-choose-angular2/\">http://www.infoq.com/cn/articles/why-choose-angular2/</a></li>\n</ol>\n<blockquote>\n<p>一些学习资料<br>ECMAScript 6入门  <a href=\"http://es6.ruanyifeng.com/\">http://es6.ruanyifeng.com/</a><br>TypeScript入门   <a href=\"http://www.imooc.com/learn/763\">http://www.imooc.com/learn/763</a><br>TypeScript中文网  <a href=\"https://www.tslang.cn/docs/tutorial.html\">https://www.tslang.cn/docs/tutorial.html</a><br>慕课网1小时快速上手视频  <a href=\"http://www.imooc.com/learn/789\">http://www.imooc.com/learn/789</a><br>官方文档  <a href=\"https://www.angular.cn/docs/ts/latest/cli-quickstart.html\">https://www.angular.cn/docs/ts/latest/cli-quickstart.html</a></p>\n</blockquote>\n<h3 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3.遇到的问题\"></a>3.遇到的问题</h3><h4 id=\"3-1滚动监听\"><a href=\"#3-1滚动监听\" class=\"headerlink\" title=\"3.1滚动监听\"></a>3.1滚动监听</h4><p>要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)<br><img src=\"http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图来自我的csdn博客\"></p>\n<p>之前使用Jq是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    indexApp.scrollBar = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.body.scrollTop||<span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>不打算依赖Jq,搜了点资料发现了下面两种写法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面这种写法在TS下不会有效果.</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"comment\">//该处使用匿名函数,而不是箭头函数.</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        self.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; self.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * 判断是否需要加背景色(有效果的)</div><div class=\"line\">   * 使用isBackColor控制结果</div><div class=\"line\">   */</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">      <span class=\"comment\">//监听事件使用箭头函数,这样ng2才会管理该变量</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,() =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; <span class=\"keyword\">this</span>.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>原因不明,猜想是<code>var self = this;</code>赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.</p>\n<h4 id=\"3-2http参数传递\"><a href=\"#3-2http参数传递\" class=\"headerlink\" title=\"3.2http参数传递\"></a>3.2http参数传递</h4><p>按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入<code>1111@qq.com</code>会被转换为<code>1111%40qq.com</code>,导致服务端解析失败,找了很多原因才发现是<code>URLSearchParams</code>这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,<code>import {URLSearchParams} from &quot;@angular/http&quot;;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlParams = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">urlParams.set(<span class=\"string\">'search'</span>,search);</div><div class=\"line\">urlParams.set(<span class=\"string\">'order'</span>,order);</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageNum'</span>,pageNum.toString());</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageSize'</span>,pageSize.toString());</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(Config.url_problem_stage + stage,&#123;<span class=\"attr\">params</span>:urlParams&#125;).toPromise()</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">          .catch(LogService.handleError)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3跨域问题\"><a href=\"#3-3跨域问题\" class=\"headerlink\" title=\"3.3跨域问题\"></a>3.3跨域问题</h4><p>浏览器要求同源下才可请求,否则就产生跨域问题.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\">http://www.a.com/lab/a.js</a> <br><a href=\"http://www.a.com/script/b.js\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\">http://www.a.com:8000/a.js</a> <br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"https://www.a.com/b.js\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://70.32.92.74/b.js\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://script.a.com/b.js\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://a.com/b.js\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\">http://www.cnblogs.com/a.js</a> <br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       8888;</div><div class=\"line\">    server_name  localhost;</div><div class=\"line\"></div><div class=\"line\">    #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    location /api &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:8080;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:4200;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-4路由问题\"><a href=\"#3-4路由问题\" class=\"headerlink\" title=\"3.4路由问题\"></a>3.4路由问题</h4><p>angular2的路由匹配规则是从根路由也就是<code>forRoot()</code>的这个开始.在该处匹配寻找规则.</p>\n<p><strong>根路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appRoutes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'aust'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'**'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p><strong>子路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> childRouter : Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>:ContentAndAsideComponent,</div><div class=\"line\">    <span class=\"attr\">children</span>:[</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">''</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">'/index'</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">'start'</span>,<span class=\"attr\">component</span>:StartComponent&#125;,</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  ];</div></pre></td></tr></table></figure></p>\n<p><strong>举例:</strong><br>访问<code>/</code>,则先在根路由寻找,找到其跳转到IndexComponent,完成任务<br>访问<code>/aust</code>.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到<code>/index</code>,那么回到根路由,找到IndexComponent完成任务.<br>访问<code>/aust/start</code>,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.</p>\n<h4 id=\"3-5组件通信\"><a href=\"#3-5组件通信\" class=\"headerlink\" title=\"3.5组件通信\"></a>3.5组件通信</h4><p>父-&gt;子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.<br>子-&gt;父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.<br>任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.</p>\n<h4 id=\"3-6单例\"><a href=\"#3-6单例\" class=\"headerlink\" title=\"3.6单例?\"></a>3.6单例?</h4><p>agular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.</p>\n<h4 id=\"3-7组件生命周期\"><a href=\"#3-7组件生命周期\" class=\"headerlink\" title=\"3.7组件生命周期\"></a>3.7组件生命周期</h4><p>组件生命周期看下面这张图.图中没有<code>onChanges(changes: SimpleChanges)</code>方法的调用,该方法检测到组件的<strong>输入属性</strong>发生变化时调用,也就是存在<strong>@inpu</strong>t装饰的属性,该属性每次变化时会调该方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg\" alt=\"\"></p>\n<hr>\n<p>angular2项目:<br><a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n"},{"title":"Docker学习记录(二)-Dockerfile创建镜像","date":"2017-03-10T13:21:00.000Z","_content":"\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n**1.FROM**：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n**2.MAINTAINER**：格式为MAINTAIER<name>，指定维护者信息。\n\n**3.RUN**：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n**4.CMD**：指定容器启动后执行的命令\n命令格式为: \nsh格式: CMD <命令> \nexec格式:CMD [\"可执行文件\",\"参数1\",\"参数2\"]\n一般都是早就写好的脚本或者启动一个服务，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.\n比如执行`CMD serice mysql start`,那么翻译过来的话是`CMD [\"sh\",\"-c\",\"serice mysql start\"]`,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式`CMD [\"nginx\",\"-g\",\"\"daemon off;]`,指定前台运行.\n\n**5.EXPOSE**：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n**6.ENV**：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n**7.COPY**：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n**8.ENTRYPOINT**：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n**9.VOLUME**：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n**10.USER**：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n**11.WORKDIR**：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","source":"_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","raw":"---\ntitle: Docker学习记录(二)-Dockerfile创建镜像\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 21:21:00\n\n---\n\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n**1.FROM**：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n**2.MAINTAINER**：格式为MAINTAIER<name>，指定维护者信息。\n\n**3.RUN**：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n**4.CMD**：指定容器启动后执行的命令\n命令格式为: \nsh格式: CMD <命令> \nexec格式:CMD [\"可执行文件\",\"参数1\",\"参数2\"]\n一般都是早就写好的脚本或者启动一个服务，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.\n比如执行`CMD serice mysql start`,那么翻译过来的话是`CMD [\"sh\",\"-c\",\"serice mysql start\"]`,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式`CMD [\"nginx\",\"-g\",\"\"daemon off;]`,指定前台运行.\n\n**5.EXPOSE**：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n**6.ENV**：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n**7.COPY**：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n**8.ENTRYPOINT**：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n**9.VOLUME**：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n**10.USER**：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n**11.WORKDIR**：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","slug":"docker/Docker学习记录(二)-Dockerfile创建镜像","published":1,"updated":"2017-04-02T02:10:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16d000dpruhi8a1ckf5","content":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p><strong>1.FROM</strong>：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p><strong>2.MAINTAINER</strong>：格式为MAINTAIER<name>，指定维护者信息。</name></p>\n<p><strong>3.RUN</strong>：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p><strong>4.CMD</strong>：指定容器启动后执行的命令<br>命令格式为:<br>sh格式: CMD &lt;命令&gt;<br>exec格式:CMD [“可执行文件”,”参数1”,”参数2”]<br>一般都是早就写好的脚本或者启动一个服务，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.<br>比如执行<code>CMD serice mysql start</code>,那么翻译过来的话是<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;serice mysql start&quot;]</code>,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式<code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;&quot;daemon off;]</code>,指定前台运行.</p>\n<p><strong>5.EXPOSE</strong>：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p><strong>6.ENV</strong>：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p><strong>7.COPY</strong>：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p><strong>8.ENTRYPOINT</strong>：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p><strong>9.VOLUME</strong>：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p><strong>10.USER</strong>：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p><strong>11.WORKDIR</strong>：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p><strong>1.FROM</strong>：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p><strong>2.MAINTAINER</strong>：格式为MAINTAIER<name>，指定维护者信息。</p>\n<p><strong>3.RUN</strong>：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p><strong>4.CMD</strong>：指定容器启动后执行的命令<br>命令格式为:<br>sh格式: CMD &lt;命令&gt;<br>exec格式:CMD [“可执行文件”,”参数1”,”参数2”]<br>一般都是早就写好的脚本或者启动一个服务，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.<br>比如执行<code>CMD serice mysql start</code>,那么翻译过来的话是<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;serice mysql start&quot;]</code>,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式<code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;&quot;daemon off;]</code>,指定前台运行.</p>\n<p><strong>5.EXPOSE</strong>：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p><strong>6.ENV</strong>：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p><strong>7.COPY</strong>：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p><strong>8.ENTRYPOINT</strong>：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p><strong>9.VOLUME</strong>：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p><strong>10.USER</strong>：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p><strong>11.WORKDIR</strong>：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n"},{"title":"redis学习记录(四)-SpringDataRedis分析","date":"2017-03-29T10:50:00.000Z","_content":"\n\n# redis学习记录(四)-SpringDataRedis分析\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]\n[Redis学习记录(二)--使用Jedis连接][2]\n[redis学习记录(三)-redis中的数据结构][3]\n\n### 1.简介\nSpring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.\n\n本文是在Spring boot 1.5.2版本下测试.\n\n需要引入架包\n```xml\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--spring boot start-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n### 2.配置\n在Spring Boot下默认使用jedis作为客户端,并在包`org.springframework.boot.autoconfigure.data.redis`下,提供自动配置类`RedisProperties`,`RedisAutoConfiguration`等.\n\n根据`RedisProperties`可以定位到可配置的属性,如:\n``` properties\n# Redis数据库索引（默认为0）\nspring.redis.database=0\n# Redis服务器地址\nspring.redis.host=115.159.185.14\n# Redis服务器连接端口\nspring.redis.port=6379\n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n# 连接超时时间（毫秒）\nspring.redis.timeout=2000\n```\n在application.properties中配置即可,另外还有`Sentinel`和`Cluster`说明支持分布式和集群,博主研究不多就不瞎说这个了.\n\n自动配置主要在`RedisAutoConfiguration`中,该类会提供三个bean:\n1. JedisConnectionFactory : jedis连接控制工厂\n2. RedisTemplate<Object, Object> : redis操作入口\n3. StringRedisTemplate : redis操作入口\n\n那么就开始入口学习.\n\n----------\n### 3.RedisTemplate<K, V>\n\nRedisTemplate是操作的入口.该类继承了`RedisAccessor`,可以通过其拿到redis连接,实现了`RedisOperations`接口,获得了操作redis的能力,如下图所示:\n![](http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg)\n\n#### 3.1 Test case\n那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Application.class)\npublic class RedisConnectTest {\n  @Resource\n  private RedisTemplate<String,String> redisTemplate;\n\n  @Test\n  public void testSetAndGet() {\n    redisTemplate.opsForValue().set(\"ping\",\"pong\");\n    System.out.println(redisTemplate.opsForValue().get(\"ping\"));\n  }\n}\n```\n运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.\n![](http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg)\n\n#### 3.2 XXXOperations<K, V>\n上述代码的第一步先获取到了`ValueOperations`,在`RedisTemplate`中同样还有其他`XXXOperations`,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:\n\n | 接口 | 操作 | \n|:-----|:-----|\n| ValueOperations | Redis string (or value) operations  |\n| ListOperations | Redis list operations  |\n| SetOperations | Redis set operations  |\n| ZSetOperations | Redis zset (or sorted set) operations  |\n| HashOperations | Redis hash operations  |\n| HyperLogLogOperations | Redis HyperLogLog operations like (pfadd, pfcount,…​) |\n| GeoOperations | Redis geospatial operations like GEOADD, GEORADIUS,…​) |\n| BoundValueOperations | Redis string (or value) key bound operations |\n| BoundListOperations | Redis list key bound operations |\n| BoundSetOperations | Redis set key bound operations |\n| BoundZSetOperations | Redis zset (or sorted set) key bound operations |\n| BoundHashOperations | Redis hash key bound operations |\n| BoundGeoOperations | Redis key bound geospatial operations. |\n\n其中`BoundXXXOperations`是在key已知的情况下使用,其所有操作都是建立在有一个`certain key`的前提.可以看下源码就能明白了.\n\n#### 3.3 XXXSerializer\n那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.\n\n```java\n\tpublic void set(K key, V value) {\n\t\tfinal byte[] rawValue = rawValue(value);\n\t\texecute(new ValueDeserializingRedisCallback(key) {\n\n\t\t\tprotected byte[] inRedis(byte[] rawKey, RedisConnection connection) {\n\t\t\t\tconnection.set(rawKey, rawValue);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}, true);\n\t}\n```\n可以发现`rawKey()`方法和`rawValue()`方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的`XXXSerializer`,那么回到RedisTemplate,在`afterPropertiesSet()`方法中有以下初始化方法,默认使用的序列化方式为`JdkSerializationRedisSerializer`,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过\"ping\"访问不到的原因.\n```java\nif (defaultSerializer == null) {\n\n\t\t\tdefaultSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\t\tclassLoader != null ? classLoader : this.getClass().getClassLoader());\n\t\t}\n\t\tif (enableDefaultSerializer) {\n\t\t\tif (keySerializer == null) {\n\t\t\t\tkeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (valueSerializer == null) {\n\t\t\t\tvalueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashKeySerializer == null) {\n\t\t\t\thashKeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashValueSerializer == null) {\n\t\t\t\thashValueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t}\n\n```\n那么SpringDataRedis支持哪些序列化呢?从官网可以看到:\nStringRedisSerializer: string类型序列化,也是最常用的类型\nJdkSerializationRedisSerializer: jdk默认序列化\nOxmSerializer : xml格式\nJacksonJsonRedisSerializer : json格式\n\n通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的`StringRedisTemplate`,实现了`StringRedisSerializer`序列化方式.\n```java\n\tpublic StringRedisTemplate() {\n\t\tRedisSerializer<String> stringSerializer = new StringRedisSerializer();\n\t\tsetKeySerializer(stringSerializer);\n\t\tsetValueSerializer(stringSerializer);\n\t\tsetHashKeySerializer(stringSerializer);\n\t\tsetHashValueSerializer(stringSerializer);\n\t}\n```\n\n更改成`StringRedisTemplate`,再次执行,正常了.\n![](http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg)\n\n#### 3.4 总结过程\n1. 获取RedisTemplate\n2. 获取操作入口XXXOperations\n3. 使用RedisSerializer序列化key和value\n4. 获取conn连接\n4. 执行命令\n\n### 4.发布与订阅\n发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?\n订阅者:里面有一个处理方法即可.\n```java\n@Component\npublic class Listen {\n\n  private static Logger logger = LoggerFactory.getLogger(Listen.class);\n\n  private CountDownLatch latch = new CountDownLatch(1);\n\n  public void handleMsg(String message) {\n    logger.info(\"reciver msg :\" + message);\n    latch.countDown();\n  }\n  \n  public CountDownLatch getLatch() {\n    return latch;\n  }\n}\n```\n发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.\n\n连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为\n\n```java\n@Configuration\npublic class PublishConfig {\n  /**\n   * 注入消息容器\n   * @param jedisConnectionFactory jedis连接池\n   * @param listenerAdapter 监听适配器\n   * @return bean\n   */\n  @Bean\n  public RedisMessageListenerContainer container(RedisConnectionFactory jedisConnectionFactory,\n      MessageListenerAdapter listenerAdapter){\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    container.setConnectionFactory(jedisConnectionFactory);\n    //绑定监听者与信道的管理\n    container.addMessageListener(listenerAdapter,new PatternTopic(\"java\"));\n    return container;\n  }\n\n  @Bean\n  public MessageListenerAdapter adapter(Listen listen){\n    //指定监听者和监听方法\n    return new MessageListenerAdapter(listen,\"handleMsg\");\n  }\n}\n```\n\n测试:\n```java\n  @Test\n  public void testPublish() throws InterruptedException {\n    stringRedisTemplate.convertAndSend(\"java\",\"hello world\");\n    listen.getLatch().await();\n  }\n```\n![](http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg)\n\n### 5.事务\n对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下\n```java\n    RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);\n    execute(this)\n```\n```java\n @Test\n  public void testMulti() {\n    boolean isThrow = false;\n    List<Object> result = null;\n    try {\n      result = stringRedisTemplate.execute(new SessionCallback<List<Object>>() {\n        @Override\n        public List<Object> execute(RedisOperations operations) throws\n            DataAccessException {\n          operations.multi();\n          ValueOperations<String,String> ops = operations.opsForValue();\n          ops.set(\"ping1\",\"pong1\");\n          ops.set(\"ping2\",\"pong2\");\n          if (isThrow){\n            throw new IllegalArgumentException(\"测试异常\");\n          }\n          return operations.exec();\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(result);\n  }\n```\n\n### 6.管道\n直接引用官方案例\n```java\n//pop a specified number of items from a queue\nList<Object> results = stringRedisTemplate.executePipelined(\n  new RedisCallback<Object>() {\n    public Object doInRedis(RedisConnection connection) throws DataAccessException {\n      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;\n      for(int i=0; i< batchSize; i++) {\n        stringRedisConn.rPop(\"myqueue\");\n      }\n    return null;\n  }\n});\n```\n\n还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.\n\n\n参考文档:\n\nhttp://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\n\ngithub:\n\nhttps://github.com/nl101531/JavaWEB\n\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\n  [3]: http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","source":"_posts/linux/redis学习记录(四)-SpringDataRedis分析.md","raw":"---\ntitle: redis学习记录(四)-SpringDataRedis分析\ntags:\n  - redis\ncategories: redis\ndate: 2017-03-29 18:50:00\n\n---\n\n\n# redis学习记录(四)-SpringDataRedis分析\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]\n[Redis学习记录(二)--使用Jedis连接][2]\n[redis学习记录(三)-redis中的数据结构][3]\n\n### 1.简介\nSpring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.\n\n本文是在Spring boot 1.5.2版本下测试.\n\n需要引入架包\n```xml\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--spring boot start-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n### 2.配置\n在Spring Boot下默认使用jedis作为客户端,并在包`org.springframework.boot.autoconfigure.data.redis`下,提供自动配置类`RedisProperties`,`RedisAutoConfiguration`等.\n\n根据`RedisProperties`可以定位到可配置的属性,如:\n``` properties\n# Redis数据库索引（默认为0）\nspring.redis.database=0\n# Redis服务器地址\nspring.redis.host=115.159.185.14\n# Redis服务器连接端口\nspring.redis.port=6379\n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n# 连接超时时间（毫秒）\nspring.redis.timeout=2000\n```\n在application.properties中配置即可,另外还有`Sentinel`和`Cluster`说明支持分布式和集群,博主研究不多就不瞎说这个了.\n\n自动配置主要在`RedisAutoConfiguration`中,该类会提供三个bean:\n1. JedisConnectionFactory : jedis连接控制工厂\n2. RedisTemplate<Object, Object> : redis操作入口\n3. StringRedisTemplate : redis操作入口\n\n那么就开始入口学习.\n\n----------\n### 3.RedisTemplate<K, V>\n\nRedisTemplate是操作的入口.该类继承了`RedisAccessor`,可以通过其拿到redis连接,实现了`RedisOperations`接口,获得了操作redis的能力,如下图所示:\n![](http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg)\n\n#### 3.1 Test case\n那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Application.class)\npublic class RedisConnectTest {\n  @Resource\n  private RedisTemplate<String,String> redisTemplate;\n\n  @Test\n  public void testSetAndGet() {\n    redisTemplate.opsForValue().set(\"ping\",\"pong\");\n    System.out.println(redisTemplate.opsForValue().get(\"ping\"));\n  }\n}\n```\n运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.\n![](http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg)\n\n#### 3.2 XXXOperations<K, V>\n上述代码的第一步先获取到了`ValueOperations`,在`RedisTemplate`中同样还有其他`XXXOperations`,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:\n\n | 接口 | 操作 | \n|:-----|:-----|\n| ValueOperations | Redis string (or value) operations  |\n| ListOperations | Redis list operations  |\n| SetOperations | Redis set operations  |\n| ZSetOperations | Redis zset (or sorted set) operations  |\n| HashOperations | Redis hash operations  |\n| HyperLogLogOperations | Redis HyperLogLog operations like (pfadd, pfcount,…​) |\n| GeoOperations | Redis geospatial operations like GEOADD, GEORADIUS,…​) |\n| BoundValueOperations | Redis string (or value) key bound operations |\n| BoundListOperations | Redis list key bound operations |\n| BoundSetOperations | Redis set key bound operations |\n| BoundZSetOperations | Redis zset (or sorted set) key bound operations |\n| BoundHashOperations | Redis hash key bound operations |\n| BoundGeoOperations | Redis key bound geospatial operations. |\n\n其中`BoundXXXOperations`是在key已知的情况下使用,其所有操作都是建立在有一个`certain key`的前提.可以看下源码就能明白了.\n\n#### 3.3 XXXSerializer\n那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.\n\n```java\n\tpublic void set(K key, V value) {\n\t\tfinal byte[] rawValue = rawValue(value);\n\t\texecute(new ValueDeserializingRedisCallback(key) {\n\n\t\t\tprotected byte[] inRedis(byte[] rawKey, RedisConnection connection) {\n\t\t\t\tconnection.set(rawKey, rawValue);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}, true);\n\t}\n```\n可以发现`rawKey()`方法和`rawValue()`方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的`XXXSerializer`,那么回到RedisTemplate,在`afterPropertiesSet()`方法中有以下初始化方法,默认使用的序列化方式为`JdkSerializationRedisSerializer`,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过\"ping\"访问不到的原因.\n```java\nif (defaultSerializer == null) {\n\n\t\t\tdefaultSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\t\tclassLoader != null ? classLoader : this.getClass().getClassLoader());\n\t\t}\n\t\tif (enableDefaultSerializer) {\n\t\t\tif (keySerializer == null) {\n\t\t\t\tkeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (valueSerializer == null) {\n\t\t\t\tvalueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashKeySerializer == null) {\n\t\t\t\thashKeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashValueSerializer == null) {\n\t\t\t\thashValueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t}\n\n```\n那么SpringDataRedis支持哪些序列化呢?从官网可以看到:\nStringRedisSerializer: string类型序列化,也是最常用的类型\nJdkSerializationRedisSerializer: jdk默认序列化\nOxmSerializer : xml格式\nJacksonJsonRedisSerializer : json格式\n\n通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的`StringRedisTemplate`,实现了`StringRedisSerializer`序列化方式.\n```java\n\tpublic StringRedisTemplate() {\n\t\tRedisSerializer<String> stringSerializer = new StringRedisSerializer();\n\t\tsetKeySerializer(stringSerializer);\n\t\tsetValueSerializer(stringSerializer);\n\t\tsetHashKeySerializer(stringSerializer);\n\t\tsetHashValueSerializer(stringSerializer);\n\t}\n```\n\n更改成`StringRedisTemplate`,再次执行,正常了.\n![](http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg)\n\n#### 3.4 总结过程\n1. 获取RedisTemplate\n2. 获取操作入口XXXOperations\n3. 使用RedisSerializer序列化key和value\n4. 获取conn连接\n4. 执行命令\n\n### 4.发布与订阅\n发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?\n订阅者:里面有一个处理方法即可.\n```java\n@Component\npublic class Listen {\n\n  private static Logger logger = LoggerFactory.getLogger(Listen.class);\n\n  private CountDownLatch latch = new CountDownLatch(1);\n\n  public void handleMsg(String message) {\n    logger.info(\"reciver msg :\" + message);\n    latch.countDown();\n  }\n  \n  public CountDownLatch getLatch() {\n    return latch;\n  }\n}\n```\n发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.\n\n连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为\n\n```java\n@Configuration\npublic class PublishConfig {\n  /**\n   * 注入消息容器\n   * @param jedisConnectionFactory jedis连接池\n   * @param listenerAdapter 监听适配器\n   * @return bean\n   */\n  @Bean\n  public RedisMessageListenerContainer container(RedisConnectionFactory jedisConnectionFactory,\n      MessageListenerAdapter listenerAdapter){\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    container.setConnectionFactory(jedisConnectionFactory);\n    //绑定监听者与信道的管理\n    container.addMessageListener(listenerAdapter,new PatternTopic(\"java\"));\n    return container;\n  }\n\n  @Bean\n  public MessageListenerAdapter adapter(Listen listen){\n    //指定监听者和监听方法\n    return new MessageListenerAdapter(listen,\"handleMsg\");\n  }\n}\n```\n\n测试:\n```java\n  @Test\n  public void testPublish() throws InterruptedException {\n    stringRedisTemplate.convertAndSend(\"java\",\"hello world\");\n    listen.getLatch().await();\n  }\n```\n![](http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg)\n\n### 5.事务\n对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下\n```java\n    RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);\n    execute(this)\n```\n```java\n @Test\n  public void testMulti() {\n    boolean isThrow = false;\n    List<Object> result = null;\n    try {\n      result = stringRedisTemplate.execute(new SessionCallback<List<Object>>() {\n        @Override\n        public List<Object> execute(RedisOperations operations) throws\n            DataAccessException {\n          operations.multi();\n          ValueOperations<String,String> ops = operations.opsForValue();\n          ops.set(\"ping1\",\"pong1\");\n          ops.set(\"ping2\",\"pong2\");\n          if (isThrow){\n            throw new IllegalArgumentException(\"测试异常\");\n          }\n          return operations.exec();\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(result);\n  }\n```\n\n### 6.管道\n直接引用官方案例\n```java\n//pop a specified number of items from a queue\nList<Object> results = stringRedisTemplate.executePipelined(\n  new RedisCallback<Object>() {\n    public Object doInRedis(RedisConnection connection) throws DataAccessException {\n      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;\n      for(int i=0; i< batchSize; i++) {\n        stringRedisConn.rPop(\"myqueue\");\n      }\n    return null;\n  }\n});\n```\n\n还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.\n\n\n参考文档:\n\nhttp://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\n\ngithub:\n\nhttps://github.com/nl101531/JavaWEB\n\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\n  [3]: http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","slug":"linux/redis学习记录(四)-SpringDataRedis分析","published":1,"updated":"2017-03-30T01:41:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16g000epruh3ic8ou10","content":"<h1 id=\"redis学习记录-四-SpringDataRedis分析\"><a href=\"#redis学习记录-四-SpringDataRedis分析\" class=\"headerlink\" title=\"redis学习记录(四)-SpringDataRedis分析\"></a>redis学习记录(四)-SpringDataRedis分析</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(一)–入门知识</a><br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(二)–使用Jedis连接</a><br><a href=\"http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/\">redis学习记录(三)-redis中的数据结构</a></p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>Spring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.</p>\n<p>本文是在Spring boot 1.5.2版本下测试.</p>\n<p>需要引入架包<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring boot start--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>在Spring Boot下默认使用jedis作为客户端,并在包<code>org.springframework.boot.autoconfigure.data.redis</code>下,提供自动配置类<code>RedisProperties</code>,<code>RedisAutoConfiguration</code>等.</p>\n<p>根据<code>RedisProperties</code>可以定位到可配置的属性,如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Redis数据库索引（默认为0）</div><div class=\"line\">spring.redis.database=0</div><div class=\"line\"># Redis服务器地址</div><div class=\"line\">spring.redis.host=115.159.185.14</div><div class=\"line\"># Redis服务器连接端口</div><div class=\"line\">spring.redis.port=6379</div><div class=\"line\"># Redis服务器连接密码（默认为空）</div><div class=\"line\">spring.redis.password=</div><div class=\"line\"># 连接池最大连接数（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-active=8</div><div class=\"line\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-wait=-1</div><div class=\"line\"># 连接池中的最大空闲连接</div><div class=\"line\">spring.redis.pool.max-idle=8</div><div class=\"line\"># 连接池中的最小空闲连接</div><div class=\"line\">spring.redis.pool.min-idle=0</div><div class=\"line\"># 连接超时时间（毫秒）</div><div class=\"line\">spring.redis.timeout=2000</div></pre></td></tr></table></figure></p>\n<p>在application.properties中配置即可,另外还有<code>Sentinel</code>和<code>Cluster</code>说明支持分布式和集群,博主研究不多就不瞎说这个了.</p>\n<p>自动配置主要在<code>RedisAutoConfiguration</code>中,该类会提供三个bean:</p>\n<ol>\n<li>JedisConnectionFactory : jedis连接控制工厂</li>\n<li>RedisTemplate<object, object=\"\"> : redis操作入口</object,></li>\n<li>StringRedisTemplate : redis操作入口</li>\n</ol>\n<p>那么就开始入口学习.</p>\n<hr>\n<h3 id=\"3-RedisTemplate\"><a href=\"#3-RedisTemplate\" class=\"headerlink\" title=\"3.RedisTemplate\"></a>3.RedisTemplate<k, v=\"\"></k,></h3><p>RedisTemplate是操作的入口.该类继承了<code>RedisAccessor</code>,可以通过其拿到redis连接,实现了<code>RedisOperations</code>接口,获得了操作redis的能力,如下图所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg\" alt=\"\"></p>\n<h4 id=\"3-1-Test-case\"><a href=\"#3-1-Test-case\" class=\"headerlink\" title=\"3.1 Test case\"></a>3.1 Test case</h4><p>那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(classes = Application.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConnectTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Resource</span></div><div class=\"line\">  <span class=\"keyword\">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSetAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">\"ping\"</span>,<span class=\"string\">\"pong\"</span>);</div><div class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"ping\"</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg\" alt=\"\"></p>\n<h4 id=\"3-2-XXXOperations\"><a href=\"#3-2-XXXOperations\" class=\"headerlink\" title=\"3.2 XXXOperations\"></a>3.2 XXXOperations<k, v=\"\"></k,></h4><p>上述代码的第一步先获取到了<code>ValueOperations</code>,在<code>RedisTemplate</code>中同样还有其他<code>XXXOperations</code>,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">接口</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ListOperations</td>\n<td style=\"text-align:left\">Redis list operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetOperations</td>\n<td style=\"text-align:left\">Redis set operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashOperations</td>\n<td style=\"text-align:left\">Redis hash operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HyperLogLogOperations</td>\n<td style=\"text-align:left\">Redis HyperLogLog operations like (pfadd, pfcount,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GeoOperations</td>\n<td style=\"text-align:left\">Redis geospatial operations like GEOADD, GEORADIUS,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundListOperations</td>\n<td style=\"text-align:left\">Redis list key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundSetOperations</td>\n<td style=\"text-align:left\">Redis set key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundHashOperations</td>\n<td style=\"text-align:left\">Redis hash key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundGeoOperations</td>\n<td style=\"text-align:left\">Redis key bound geospatial operations.</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>BoundXXXOperations</code>是在key已知的情况下使用,其所有操作都是建立在有一个<code>certain key</code>的前提.可以看下源码就能明白了.</p>\n<h4 id=\"3-3-XXXSerializer\"><a href=\"#3-3-XXXSerializer\" class=\"headerlink\" title=\"3.3 XXXSerializer\"></a>3.3 XXXSerializer</h4><p>那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] rawValue = rawValue(value);</div><div class=\"line\">\texecute(<span class=\"keyword\">new</span> ValueDeserializingRedisCallback(key) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"keyword\">byte</span>[] inRedis(<span class=\"keyword\">byte</span>[] rawKey, RedisConnection connection) &#123;</div><div class=\"line\">\t\t\tconnection.set(rawKey, rawValue);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现<code>rawKey()</code>方法和<code>rawValue()</code>方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的<code>XXXSerializer</code>,那么回到RedisTemplate,在<code>afterPropertiesSet()</code>方法中有以下初始化方法,默认使用的序列化方式为<code>JdkSerializationRedisSerializer</code>,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过”ping”访问不到的原因.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (defaultSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdefaultSerializer = <span class=\"keyword\">new</span> JdkSerializationRedisSerializer(</div><div class=\"line\">\t\t\t\t\tclassLoader != <span class=\"keyword\">null</span> ? classLoader : <span class=\"keyword\">this</span>.getClass().getClassLoader());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (enableDefaultSerializer) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tkeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (valueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tvalueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashKeySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashKeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashValueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashValueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>那么SpringDataRedis支持哪些序列化呢?从官网可以看到:<br>StringRedisSerializer: string类型序列化,也是最常用的类型<br>JdkSerializationRedisSerializer: jdk默认序列化<br>OxmSerializer : xml格式<br>JacksonJsonRedisSerializer : json格式</p>\n<p>通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的<code>StringRedisTemplate</code>,实现了<code>StringRedisSerializer</code>序列化方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tRedisSerializer&lt;String&gt; stringSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</div><div class=\"line\">\tsetKeySerializer(stringSerializer);</div><div class=\"line\">\tsetValueSerializer(stringSerializer);</div><div class=\"line\">\tsetHashKeySerializer(stringSerializer);</div><div class=\"line\">\tsetHashValueSerializer(stringSerializer);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更改成<code>StringRedisTemplate</code>,再次执行,正常了.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg\" alt=\"\"></p>\n<h4 id=\"3-4-总结过程\"><a href=\"#3-4-总结过程\" class=\"headerlink\" title=\"3.4 总结过程\"></a>3.4 总结过程</h4><ol>\n<li>获取RedisTemplate</li>\n<li>获取操作入口XXXOperations</li>\n<li>使用RedisSerializer序列化key和value</li>\n<li>获取conn连接</li>\n<li>执行命令</li>\n</ol>\n<h3 id=\"4-发布与订阅\"><a href=\"#4-发布与订阅\" class=\"headerlink\" title=\"4.发布与订阅\"></a>4.发布与订阅</h3><p>发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?<br>订阅者:里面有一个处理方法即可.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Listen.class);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMsg</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"reciver msg :\"</span> + message);</div><div class=\"line\">    latch.countDown();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CountDownLatch <span class=\"title\">getLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> latch;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.</p>\n<p>连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PublishConfig</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 注入消息容器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> jedisConnectionFactory jedis连接池</div><div class=\"line\">   * <span class=\"doctag\">@param</span> listenerAdapter 监听适配器</div><div class=\"line\">   * <span class=\"doctag\">@return</span> bean</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RedisMessageListenerContainer <span class=\"title\">container</span><span class=\"params\">(RedisConnectionFactory jedisConnectionFactory,</span></span></div><div class=\"line\">      MessageListenerAdapter listenerAdapter)&#123;</div><div class=\"line\">    RedisMessageListenerContainer container = <span class=\"keyword\">new</span> RedisMessageListenerContainer();</div><div class=\"line\">    container.setConnectionFactory(jedisConnectionFactory);</div><div class=\"line\">    <span class=\"comment\">//绑定监听者与信道的管理</span></div><div class=\"line\">    container.addMessageListener(listenerAdapter,<span class=\"keyword\">new</span> PatternTopic(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> container;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> MessageListenerAdapter <span class=\"title\">adapter</span><span class=\"params\">(Listen listen)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定监听者和监听方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MessageListenerAdapter(listen,<span class=\"string\">\"handleMsg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublish</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">  stringRedisTemplate.convertAndSend(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\">  listen.getLatch().await();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg\" alt=\"\"></p>\n<h3 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5.事务\"></a>5.事务</h3><p>对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);</div><div class=\"line\">execute(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMulti</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">boolean</span> isThrow = <span class=\"keyword\">false</span>;</div><div class=\"line\">   List&lt;Object&gt; result = <span class=\"keyword\">null</span>;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     result = stringRedisTemplate.execute(<span class=\"keyword\">new</span> SessionCallback&lt;List&lt;Object&gt;&gt;() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">execute</span><span class=\"params\">(RedisOperations operations)</span> <span class=\"keyword\">throws</span></span></div><div class=\"line\">           DataAccessException &#123;</div><div class=\"line\">         operations.multi();</div><div class=\"line\">         ValueOperations&lt;String,String&gt; ops = operations.opsForValue();</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping1\"</span>,<span class=\"string\">\"pong1\"</span>);</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping2\"</span>,<span class=\"string\">\"pong2\"</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (isThrow)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"测试异常\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> operations.exec();</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">     e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   System.out.println(result);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6.管道\"></a>6.管道</h3><p>直接引用官方案例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pop a specified number of items from a queue</span></div><div class=\"line\">List&lt;Object&gt; results = stringRedisTemplate.executePipelined(</div><div class=\"line\">  <span class=\"keyword\">new</span> RedisCallback&lt;Object&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</div><div class=\"line\">      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; batchSize; i++) &#123;</div><div class=\"line\">        stringRedisConn.rPop(<span class=\"string\">\"myqueue\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.</p>\n<p>参考文档:</p>\n<p><a href=\"http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\" target=\"_blank\" rel=\"external\">http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template</a></p>\n<p>github:</p>\n<p><a href=\"https://github.com/nl101531/JavaWEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/JavaWEB</a></p>\n","excerpt":"","more":"<h1 id=\"redis学习记录-四-SpringDataRedis分析\"><a href=\"#redis学习记录-四-SpringDataRedis分析\" class=\"headerlink\" title=\"redis学习记录(四)-SpringDataRedis分析\"></a>redis学习记录(四)-SpringDataRedis分析</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\">Redis学习记录(一)–入门知识</a><br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\">Redis学习记录(二)–使用Jedis连接</a><br><a href=\"http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/\">redis学习记录(三)-redis中的数据结构</a></p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>Spring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.</p>\n<p>本文是在Spring boot 1.5.2版本下测试.</p>\n<p>需要引入架包<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring boot start--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>在Spring Boot下默认使用jedis作为客户端,并在包<code>org.springframework.boot.autoconfigure.data.redis</code>下,提供自动配置类<code>RedisProperties</code>,<code>RedisAutoConfiguration</code>等.</p>\n<p>根据<code>RedisProperties</code>可以定位到可配置的属性,如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Redis数据库索引（默认为0）</div><div class=\"line\">spring.redis.database=0</div><div class=\"line\"># Redis服务器地址</div><div class=\"line\">spring.redis.host=115.159.185.14</div><div class=\"line\"># Redis服务器连接端口</div><div class=\"line\">spring.redis.port=6379</div><div class=\"line\"># Redis服务器连接密码（默认为空）</div><div class=\"line\">spring.redis.password=</div><div class=\"line\"># 连接池最大连接数（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-active=8</div><div class=\"line\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-wait=-1</div><div class=\"line\"># 连接池中的最大空闲连接</div><div class=\"line\">spring.redis.pool.max-idle=8</div><div class=\"line\"># 连接池中的最小空闲连接</div><div class=\"line\">spring.redis.pool.min-idle=0</div><div class=\"line\"># 连接超时时间（毫秒）</div><div class=\"line\">spring.redis.timeout=2000</div></pre></td></tr></table></figure></p>\n<p>在application.properties中配置即可,另外还有<code>Sentinel</code>和<code>Cluster</code>说明支持分布式和集群,博主研究不多就不瞎说这个了.</p>\n<p>自动配置主要在<code>RedisAutoConfiguration</code>中,该类会提供三个bean:</p>\n<ol>\n<li>JedisConnectionFactory : jedis连接控制工厂</li>\n<li>RedisTemplate<Object, Object> : redis操作入口</li>\n<li>StringRedisTemplate : redis操作入口</li>\n</ol>\n<p>那么就开始入口学习.</p>\n<hr>\n<h3 id=\"3-RedisTemplate\"><a href=\"#3-RedisTemplate\" class=\"headerlink\" title=\"3.RedisTemplate\"></a>3.RedisTemplate<K, V></h3><p>RedisTemplate是操作的入口.该类继承了<code>RedisAccessor</code>,可以通过其拿到redis连接,实现了<code>RedisOperations</code>接口,获得了操作redis的能力,如下图所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg\" alt=\"\"></p>\n<h4 id=\"3-1-Test-case\"><a href=\"#3-1-Test-case\" class=\"headerlink\" title=\"3.1 Test case\"></a>3.1 Test case</h4><p>那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(classes = Application.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConnectTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Resource</span></div><div class=\"line\">  <span class=\"keyword\">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSetAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">\"ping\"</span>,<span class=\"string\">\"pong\"</span>);</div><div class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"ping\"</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg\" alt=\"\"></p>\n<h4 id=\"3-2-XXXOperations\"><a href=\"#3-2-XXXOperations\" class=\"headerlink\" title=\"3.2 XXXOperations\"></a>3.2 XXXOperations<K, V></h4><p>上述代码的第一步先获取到了<code>ValueOperations</code>,在<code>RedisTemplate</code>中同样还有其他<code>XXXOperations</code>,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">接口</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ListOperations</td>\n<td style=\"text-align:left\">Redis list operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetOperations</td>\n<td style=\"text-align:left\">Redis set operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashOperations</td>\n<td style=\"text-align:left\">Redis hash operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HyperLogLogOperations</td>\n<td style=\"text-align:left\">Redis HyperLogLog operations like (pfadd, pfcount,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GeoOperations</td>\n<td style=\"text-align:left\">Redis geospatial operations like GEOADD, GEORADIUS,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundListOperations</td>\n<td style=\"text-align:left\">Redis list key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundSetOperations</td>\n<td style=\"text-align:left\">Redis set key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundHashOperations</td>\n<td style=\"text-align:left\">Redis hash key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundGeoOperations</td>\n<td style=\"text-align:left\">Redis key bound geospatial operations.</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>BoundXXXOperations</code>是在key已知的情况下使用,其所有操作都是建立在有一个<code>certain key</code>的前提.可以看下源码就能明白了.</p>\n<h4 id=\"3-3-XXXSerializer\"><a href=\"#3-3-XXXSerializer\" class=\"headerlink\" title=\"3.3 XXXSerializer\"></a>3.3 XXXSerializer</h4><p>那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] rawValue = rawValue(value);</div><div class=\"line\">\texecute(<span class=\"keyword\">new</span> ValueDeserializingRedisCallback(key) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"keyword\">byte</span>[] inRedis(<span class=\"keyword\">byte</span>[] rawKey, RedisConnection connection) &#123;</div><div class=\"line\">\t\t\tconnection.set(rawKey, rawValue);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现<code>rawKey()</code>方法和<code>rawValue()</code>方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的<code>XXXSerializer</code>,那么回到RedisTemplate,在<code>afterPropertiesSet()</code>方法中有以下初始化方法,默认使用的序列化方式为<code>JdkSerializationRedisSerializer</code>,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过”ping”访问不到的原因.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (defaultSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdefaultSerializer = <span class=\"keyword\">new</span> JdkSerializationRedisSerializer(</div><div class=\"line\">\t\t\t\t\tclassLoader != <span class=\"keyword\">null</span> ? classLoader : <span class=\"keyword\">this</span>.getClass().getClassLoader());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (enableDefaultSerializer) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tkeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (valueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tvalueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashKeySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashKeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashValueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashValueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>那么SpringDataRedis支持哪些序列化呢?从官网可以看到:<br>StringRedisSerializer: string类型序列化,也是最常用的类型<br>JdkSerializationRedisSerializer: jdk默认序列化<br>OxmSerializer : xml格式<br>JacksonJsonRedisSerializer : json格式</p>\n<p>通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的<code>StringRedisTemplate</code>,实现了<code>StringRedisSerializer</code>序列化方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tRedisSerializer&lt;String&gt; stringSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</div><div class=\"line\">\tsetKeySerializer(stringSerializer);</div><div class=\"line\">\tsetValueSerializer(stringSerializer);</div><div class=\"line\">\tsetHashKeySerializer(stringSerializer);</div><div class=\"line\">\tsetHashValueSerializer(stringSerializer);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更改成<code>StringRedisTemplate</code>,再次执行,正常了.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg\" alt=\"\"></p>\n<h4 id=\"3-4-总结过程\"><a href=\"#3-4-总结过程\" class=\"headerlink\" title=\"3.4 总结过程\"></a>3.4 总结过程</h4><ol>\n<li>获取RedisTemplate</li>\n<li>获取操作入口XXXOperations</li>\n<li>使用RedisSerializer序列化key和value</li>\n<li>获取conn连接</li>\n<li>执行命令</li>\n</ol>\n<h3 id=\"4-发布与订阅\"><a href=\"#4-发布与订阅\" class=\"headerlink\" title=\"4.发布与订阅\"></a>4.发布与订阅</h3><p>发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?<br>订阅者:里面有一个处理方法即可.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Listen.class);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMsg</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"reciver msg :\"</span> + message);</div><div class=\"line\">    latch.countDown();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CountDownLatch <span class=\"title\">getLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> latch;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.</p>\n<p>连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PublishConfig</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * 注入消息容器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> jedisConnectionFactory jedis连接池</div><div class=\"line\">   * <span class=\"doctag\">@param</span> listenerAdapter 监听适配器</div><div class=\"line\">   * <span class=\"doctag\">@return</span> bean</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RedisMessageListenerContainer <span class=\"title\">container</span><span class=\"params\">(RedisConnectionFactory jedisConnectionFactory,</div><div class=\"line\">      MessageListenerAdapter listenerAdapter)</span></span>&#123;</div><div class=\"line\">    RedisMessageListenerContainer container = <span class=\"keyword\">new</span> RedisMessageListenerContainer();</div><div class=\"line\">    container.setConnectionFactory(jedisConnectionFactory);</div><div class=\"line\">    <span class=\"comment\">//绑定监听者与信道的管理</span></div><div class=\"line\">    container.addMessageListener(listenerAdapter,<span class=\"keyword\">new</span> PatternTopic(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> container;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> MessageListenerAdapter <span class=\"title\">adapter</span><span class=\"params\">(Listen listen)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定监听者和监听方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MessageListenerAdapter(listen,<span class=\"string\">\"handleMsg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublish</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">  stringRedisTemplate.convertAndSend(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\">  listen.getLatch().await();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg\" alt=\"\"></p>\n<h3 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5.事务\"></a>5.事务</h3><p>对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);</div><div class=\"line\">execute(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMulti</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">boolean</span> isThrow = <span class=\"keyword\">false</span>;</div><div class=\"line\">   List&lt;Object&gt; result = <span class=\"keyword\">null</span>;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     result = stringRedisTemplate.execute(<span class=\"keyword\">new</span> SessionCallback&lt;List&lt;Object&gt;&gt;() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">execute</span><span class=\"params\">(RedisOperations operations)</span> <span class=\"keyword\">throws</span></div><div class=\"line\">           DataAccessException </span>&#123;</div><div class=\"line\">         operations.multi();</div><div class=\"line\">         ValueOperations&lt;String,String&gt; ops = operations.opsForValue();</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping1\"</span>,<span class=\"string\">\"pong1\"</span>);</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping2\"</span>,<span class=\"string\">\"pong2\"</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (isThrow)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"测试异常\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> operations.exec();</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">     e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   System.out.println(result);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6.管道\"></a>6.管道</h3><p>直接引用官方案例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pop a specified number of items from a queue</span></div><div class=\"line\">List&lt;Object&gt; results = stringRedisTemplate.executePipelined(</div><div class=\"line\">  <span class=\"keyword\">new</span> RedisCallback&lt;Object&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</div><div class=\"line\">      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; batchSize; i++) &#123;</div><div class=\"line\">        stringRedisConn.rPop(<span class=\"string\">\"myqueue\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.</p>\n<p>参考文档:</p>\n<p><a href=\"http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\">http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template</a></p>\n<p>github:</p>\n<p><a href=\"https://github.com/nl101531/JavaWEB\">https://github.com/nl101531/JavaWEB</a></p>\n"},{"title":"动漫推荐","date":"2017-03-18T03:21:00.000Z","_content":"\n# 动漫推荐\n\n标签（空格分隔）： 动漫\n\n---\n\n从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)\n\n### 异邦人 无皇刃谭\n2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n### 秒速五厘米\n大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 `One more time,One more chance`\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n### 你看起来很好吃\n相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.\n记住:哭闹的孩子 不管在哪里都会被霸王龙叼走\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n### 萤火之森\n无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n### fate stay night\n作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n\n\n\n","source":"_posts/动漫/动漫推荐.md","raw":"---\ntitle: 动漫推荐\ncategories: 动漫\ntags:\n - 动漫\ndate: 2017-03-18 11:21:00\n\n---\n\n# 动漫推荐\n\n标签（空格分隔）： 动漫\n\n---\n\n从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)\n\n### 异邦人 无皇刃谭\n2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n### 秒速五厘米\n大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 `One more time,One more chance`\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n### 你看起来很好吃\n相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.\n记住:哭闹的孩子 不管在哪里都会被霸王龙叼走\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n### 萤火之森\n无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n### fate stay night\n作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n\n\n\n","slug":"动漫/动漫推荐","published":1,"updated":"2017-04-02T03:11:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16j000ipruh0hahgdxz","content":"<h1 id=\"动漫推荐\"><a href=\"#动漫推荐\" class=\"headerlink\" title=\"动漫推荐\"></a>动漫推荐</h1><p>标签（空格分隔）： 动漫</p>\n<hr>\n<p>从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)</p>\n<h3 id=\"异邦人-无皇刃谭\"><a href=\"#异邦人-无皇刃谭\" class=\"headerlink\" title=\"异邦人 无皇刃谭\"></a>异邦人 无皇刃谭</h3><p>2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n<h3 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h3><p>大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 <code>One more time,One more chance</code></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n<h3 id=\"你看起来很好吃\"><a href=\"#你看起来很好吃\" class=\"headerlink\" title=\"你看起来很好吃\"></a>你看起来很好吃</h3><p>相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.<br>记住:哭闹的孩子 不管在哪里都会被霸王龙叼走</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n<h3 id=\"萤火之森\"><a href=\"#萤火之森\" class=\"headerlink\" title=\"萤火之森\"></a>萤火之森</h3><p>无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n<h3 id=\"fate-stay-night\"><a href=\"#fate-stay-night\" class=\"headerlink\" title=\"fate stay night\"></a>fate stay night</h3><p>作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n\n\n\n","excerpt":"","more":"<h1 id=\"动漫推荐\"><a href=\"#动漫推荐\" class=\"headerlink\" title=\"动漫推荐\"></a>动漫推荐</h1><p>标签（空格分隔）： 动漫</p>\n<hr>\n<p>从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)</p>\n<h3 id=\"异邦人-无皇刃谭\"><a href=\"#异邦人-无皇刃谭\" class=\"headerlink\" title=\"异邦人 无皇刃谭\"></a>异邦人 无皇刃谭</h3><p>2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n<h3 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h3><p>大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 <code>One more time,One more chance</code></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n<h3 id=\"你看起来很好吃\"><a href=\"#你看起来很好吃\" class=\"headerlink\" title=\"你看起来很好吃\"></a>你看起来很好吃</h3><p>相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.<br>记住:哭闹的孩子 不管在哪里都会被霸王龙叼走</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n<h3 id=\"萤火之森\"><a href=\"#萤火之森\" class=\"headerlink\" title=\"萤火之森\"></a>萤火之森</h3><p>无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n<h3 id=\"fate-stay-night\"><a href=\"#fate-stay-night\" class=\"headerlink\" title=\"fate stay night\"></a>fate stay night</h3><p>作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n\n\n\n"},{"title":"redis学习记录(三)-redis中的数据结构","date":"2017-03-26T13:50:00.000Z","_content":"\n# redis学习记录(三)-redis中的数据结构\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]o\n[Redis学习记录(二)--使用Jedis连接][2]\n\nredis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.\n\n### string\nstring是的key->value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.\n\n![](http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg)\n\n\n### list\nlist是列表,也就是一个key->多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.\n\n![](http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg)\n\n\n### set\nset为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg)\n\n\n### hash\nhash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:\n\n![](http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg)\n\n\n### sort set\n可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.\n\n![](http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg)\n\n\n### 应用场景\n\n#### string\n计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.\n\n#### List\nlist的优势的有序性,两端插入复杂度为O(1),那么对于**最近文章列表**等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.\n\n#### Set\nset的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.\n\n#### hash\nhash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.\n\n#### sort set\nsort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43","source":"_posts/linux/redis学习记录(三)-redis中的数据结构.md","raw":"---\ntitle: redis学习记录(三)-redis中的数据结构\ntags:\n  - redis\ncategories: redis\ndate: 2017-03-26 21:50:00\n---\n\n# redis学习记录(三)-redis中的数据结构\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]o\n[Redis学习记录(二)--使用Jedis连接][2]\n\nredis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.\n\n### string\nstring是的key->value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.\n\n![](http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg)\n\n\n### list\nlist是列表,也就是一个key->多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.\n\n![](http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg)\n\n\n### set\nset为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg)\n\n\n### hash\nhash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:\n\n![](http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg)\n\n\n### sort set\n可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.\n\n![](http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg)\n\n\n### 应用场景\n\n#### string\n计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.\n\n#### List\nlist的优势的有序性,两端插入复杂度为O(1),那么对于**最近文章列表**等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.\n\n#### Set\nset的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.\n\n#### hash\nhash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.\n\n#### sort set\nsort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43","slug":"linux/redis学习记录(三)-redis中的数据结构","published":1,"updated":"2017-03-27T14:34:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16l000lpruhqil4geic","content":"<h1 id=\"redis学习记录-三-redis中的数据结构\"><a href=\"#redis学习记录-三-redis中的数据结构\" class=\"headerlink\" title=\"redis学习记录(三)-redis中的数据结构\"></a>redis学习记录(三)-redis中的数据结构</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(一)–入门知识</a>o<br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(二)–使用Jedis连接</a></p>\n<p>redis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是的key-&gt;value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg\" alt=\"\"></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list是列表,也就是一个key-&gt;多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg\" alt=\"\"></p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg\" alt=\"\"></p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>hash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg\" alt=\"\"></p>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort set\"></a>sort set</h3><p>可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg\" alt=\"\"></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"string-1\"><a href=\"#string-1\" class=\"headerlink\" title=\"string\"></a>string</h4><p>计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>list的优势的有序性,两端插入复杂度为O(1),那么对于<strong>最近文章列表</strong>等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.</p>\n<h4 id=\"hash-1\"><a href=\"#hash-1\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>hash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.</p>\n<h4 id=\"sort-set-1\"><a href=\"#sort-set-1\" class=\"headerlink\" title=\"sort set\"></a>sort set</h4><p>sort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.</p>\n","excerpt":"","more":"<h1 id=\"redis学习记录-三-redis中的数据结构\"><a href=\"#redis学习记录-三-redis中的数据结构\" class=\"headerlink\" title=\"redis学习记录(三)-redis中的数据结构\"></a>redis学习记录(三)-redis中的数据结构</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\">Redis学习记录(一)–入门知识</a>o<br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\">Redis学习记录(二)–使用Jedis连接</a></p>\n<p>redis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是的key-&gt;value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg\" alt=\"\"></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list是列表,也就是一个key-&gt;多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg\" alt=\"\"></p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg\" alt=\"\"></p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>hash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg\" alt=\"\"></p>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort set\"></a>sort set</h3><p>可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg\" alt=\"\"></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"string-1\"><a href=\"#string-1\" class=\"headerlink\" title=\"string\"></a>string</h4><p>计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>list的优势的有序性,两端插入复杂度为O(1),那么对于<strong>最近文章列表</strong>等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.</p>\n<h4 id=\"hash-1\"><a href=\"#hash-1\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>hash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.</p>\n<h4 id=\"sort-set-1\"><a href=\"#sort-set-1\" class=\"headerlink\" title=\"sort set\"></a>sort set</h4><p>sort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.</p>\n"},{"title":"毕业设计周记(一)","date":"2017-03-10T01:50:00.000Z","_content":"本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(一).md","raw":"---\ntitle: 毕业设计周记(一)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-10 09:50:00\n---\n本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(一)","published":1,"updated":"2017-03-11T02:09:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16n000qpruh4r5lhnx2","content":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(三)","date":"2017-03-25T13:50:00.000Z","_content":"**3.26更新**\n周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.\n\n----------\n\n花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.\n\n部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.\n\n竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.\n\n因此目前进度:\n\n1. 服务器部署全部docker化\n2. 线上可以直接判题\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.竞赛的支持\n2.注册流程优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(三).md","raw":"---\ntitle: 毕业设计周记(三)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-25 21:50:00\n---\n**3.26更新**\n周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.\n\n----------\n\n花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.\n\n部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.\n\n竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.\n\n因此目前进度:\n\n1. 服务器部署全部docker化\n2. 线上可以直接判题\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.竞赛的支持\n2.注册流程优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(三)","published":1,"updated":"2017-03-26T13:41:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16o000spruh23f57vnz","content":"<p><strong>3.26更新</strong><br>周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.</p>\n<hr>\n<p>花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.</p>\n<p>部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.</p>\n<p>竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>服务器部署全部docker化</li>\n<li>线上可以直接判题</li>\n</ol>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.注册流程优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p><strong>3.26更新</strong><br>周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.</p>\n<hr>\n<p>花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.</p>\n<p>部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.</p>\n<p>竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>服务器部署全部docker化</li>\n<li>线上可以直接判题</li>\n</ol>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.注册流程优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(二)","date":"2017-03-18T14:50:00.000Z","_content":"上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.\n\n![](http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg)\n\n\n因此目前进度:\n\n1. WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.\n\n等待完成:\n\n1.竞赛的支持\n2.代码重构,一些体验上的逻辑优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(二).md","raw":"---\ntitle: 毕业设计周记(二)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-18 22:50:00\n---\n上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.\n\n![](http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg)\n\n\n因此目前进度:\n\n1. WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.\n\n等待完成:\n\n1.竞赛的支持\n2.代码重构,一些体验上的逻辑优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(二)","published":1,"updated":"2017-03-18T14:52:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16p000vpruhsh8gu74h","content":"<p>上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg\" alt=\"\"></p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.</li>\n</ol>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.代码重构,一些体验上的逻辑优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg\" alt=\"\"></p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.</li>\n</ol>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.代码重构,一些体验上的逻辑优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(五)","date":"2017-04-08T14:50:00.000Z","_content":"\n本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(五).md","raw":"---\ntitle: 毕业设计周记(五)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-08 22:50:00\n\n---\n\n本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(五)","published":1,"updated":"2017-04-08T14:48:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16q000ypruhh1op5lfo","content":"<p>本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(四)","date":"2017-04-03T13:50:00.000Z","_content":"\n上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(四).md","raw":"---\ntitle: 毕业设计周记(四)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-03 21:50:00\n\n---\n\n上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(四)","published":1,"updated":"2017-04-03T23:37:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16u0012pruh5izz25pm","content":"<p>上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.</p>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.</p>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"如何学习一门新技术","date":"2017-02-01T02:37:00.000Z","_content":"\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","source":"_posts/随谈/如何学习一门新技术.md","raw":"---\ntitle: 如何学习一门新技术\ntags:\n  - 学习方法\ncategories: 随谈\ndate: 2017-02-01 10:37:00\n---\n\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","slug":"随谈/如何学习一门新技术","published":1,"updated":"2017-03-11T02:14:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16w0015pruhuy7hf15m","content":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\" target=\"_blank\" rel=\"external\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n","excerpt":"","more":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n"},{"title":"ERP叛逃者(转)","date":"2017-03-19T10:21:00.000Z","_content":"\n# ERP叛逃者(转)\n\n标签（空格分隔）： 随谈\n\n---\n\n>作者:alswl\n原文链接:https://blog.alswl.com/2011/04/erp-defectors/\n\n一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.\n\n----------\n\n大四实习时候，跑去驻厂开发，当时主管跟我说\"我们做的是企业信息化软件\"。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。\n\n在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。\n\n我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。\n\n可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。\n\n我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。\n\n我简单比较了互联网企业和传统行业软件企业的差异。\n\n### 目标人群不一样\n\n行业软件：企业用户\n\n互联网产品：个人用户更多，也有企业用户\n\n由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。\n\n另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。\n\n### 盈利点不一样\n\n互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。\n\n行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。\n\n盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。\n\n### 核心竞争力\n\n行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。\n\n互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。\n\n互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）\n\n我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。\n\n\n\n\n\n","source":"_posts/随谈/ERP叛逃者.md","raw":"---\ntitle: ERP叛逃者(转)\ncategories: 随谈\ntags:\n - 选择\ndate: 2017-03-19 18:21:00\n\n---\n\n# ERP叛逃者(转)\n\n标签（空格分隔）： 随谈\n\n---\n\n>作者:alswl\n原文链接:https://blog.alswl.com/2011/04/erp-defectors/\n\n一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.\n\n----------\n\n大四实习时候，跑去驻厂开发，当时主管跟我说\"我们做的是企业信息化软件\"。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。\n\n在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。\n\n我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。\n\n可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。\n\n我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。\n\n我简单比较了互联网企业和传统行业软件企业的差异。\n\n### 目标人群不一样\n\n行业软件：企业用户\n\n互联网产品：个人用户更多，也有企业用户\n\n由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。\n\n另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。\n\n### 盈利点不一样\n\n互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。\n\n行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。\n\n盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。\n\n### 核心竞争力\n\n行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。\n\n互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。\n\n互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）\n\n我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。\n\n\n\n\n\n","slug":"随谈/ERP叛逃者","published":1,"updated":"2017-03-19T10:20:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw16y0019pruhd36937zi","content":"<h1 id=\"ERP叛逃者-转\"><a href=\"#ERP叛逃者-转\" class=\"headerlink\" title=\"ERP叛逃者(转)\"></a>ERP叛逃者(转)</h1><p>标签（空格分隔）： 随谈</p>\n<hr>\n<blockquote>\n<p>作者:alswl<br>原文链接:<a href=\"https://blog.alswl.com/2011/04/erp-defectors/\" target=\"_blank\" rel=\"external\">https://blog.alswl.com/2011/04/erp-defectors/</a></p>\n</blockquote>\n<p>一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.</p>\n<hr>\n<p>大四实习时候，跑去驻厂开发，当时主管跟我说”我们做的是企业信息化软件”。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。</p>\n<p>在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。</p>\n<p>我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。</p>\n<p>可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。</p>\n<p>我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。</p>\n<p>我简单比较了互联网企业和传统行业软件企业的差异。</p>\n<h3 id=\"目标人群不一样\"><a href=\"#目标人群不一样\" class=\"headerlink\" title=\"目标人群不一样\"></a>目标人群不一样</h3><p>行业软件：企业用户</p>\n<p>互联网产品：个人用户更多，也有企业用户</p>\n<p>由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。</p>\n<p>另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。</p>\n<h3 id=\"盈利点不一样\"><a href=\"#盈利点不一样\" class=\"headerlink\" title=\"盈利点不一样\"></a>盈利点不一样</h3><p>互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。</p>\n<p>行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。</p>\n<p>盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。</p>\n<h3 id=\"核心竞争力\"><a href=\"#核心竞争力\" class=\"headerlink\" title=\"核心竞争力\"></a>核心竞争力</h3><p>行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。</p>\n<p>互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。</p>\n<p>互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）</p>\n<p>我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。</p>\n","excerpt":"","more":"<h1 id=\"ERP叛逃者-转\"><a href=\"#ERP叛逃者-转\" class=\"headerlink\" title=\"ERP叛逃者(转)\"></a>ERP叛逃者(转)</h1><p>标签（空格分隔）： 随谈</p>\n<hr>\n<blockquote>\n<p>作者:alswl<br>原文链接:<a href=\"https://blog.alswl.com/2011/04/erp-defectors/\">https://blog.alswl.com/2011/04/erp-defectors/</a></p>\n</blockquote>\n<p>一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.</p>\n<hr>\n<p>大四实习时候，跑去驻厂开发，当时主管跟我说”我们做的是企业信息化软件”。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。</p>\n<p>在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。</p>\n<p>我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。</p>\n<p>可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。</p>\n<p>我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。</p>\n<p>我简单比较了互联网企业和传统行业软件企业的差异。</p>\n<h3 id=\"目标人群不一样\"><a href=\"#目标人群不一样\" class=\"headerlink\" title=\"目标人群不一样\"></a>目标人群不一样</h3><p>行业软件：企业用户</p>\n<p>互联网产品：个人用户更多，也有企业用户</p>\n<p>由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。</p>\n<p>另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。</p>\n<h3 id=\"盈利点不一样\"><a href=\"#盈利点不一样\" class=\"headerlink\" title=\"盈利点不一样\"></a>盈利点不一样</h3><p>互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。</p>\n<p>行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。</p>\n<p>盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。</p>\n<h3 id=\"核心竞争力\"><a href=\"#核心竞争力\" class=\"headerlink\" title=\"核心竞争力\"></a>核心竞争力</h3><p>行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。</p>\n<p>互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。</p>\n<p>互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）</p>\n<p>我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。</p>\n"},{"title":"工作经验","date":"2017-02-28T01:50:00.000Z","_content":"\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","source":"_posts/随谈/工作经验(持续更新).md","raw":"---\ntitle: 工作经验\ntags:\n  - 工作\ncategories: 随谈\ndate: 2017-02-28 09:50:00\n---\n\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","slug":"随谈/工作经验(持续更新)","published":1,"updated":"2017-03-11T02:09:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw171001cpruh9oteip8g","content":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n","excerpt":"","more":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n"},{"title":"面经","date":"2017-01-10T01:50:00.000Z","_content":"\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n###1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n###2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","source":"_posts/随谈/面经.md","raw":"---\ntitle: 面经\ntags:\n  - 面试\ncategories: 随谈\ndate: 2017-01-10 09:50:00\n---\n\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n###1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n###2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","slug":"随谈/面经","published":1,"updated":"2017-03-11T02:08:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ihw172001fpruhc0jewnyx","content":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<p>###1.电面<br>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<p>###2.现场面<br>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\" target=\"_blank\" rel=\"external\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\" target=\"_blank\" rel=\"external\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\" target=\"_blank\" rel=\"external\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n","excerpt":"","more":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<p>###1.电面<br>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<p>###2.现场面<br>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1ihw10y0000pruhyteybqw0","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw11a0006pruhauh29c9r"},{"post_id":"cj1ihw16d000dpruhi8a1ckf5","category_id":"cj1ihw16b000apruhmvgk79dv","_id":"cj1ihw16k000jpruhmndrg6bo"},{"post_id":"cj1ihw1680008pruhm7veshrm","category_id":"cj1ihw16b000apruhmvgk79dv","_id":"cj1ihw16m000opruhcb3hy94e"},{"post_id":"cj1ihw16a0009pruhivjvbxf7","category_id":"cj1ihw16b000apruhmvgk79dv","_id":"cj1ihw16o000rpruhrjq7wwur"},{"post_id":"cj1ihw16n000qpruh4r5lhnx2","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw16q000xpruh0gheigxu"},{"post_id":"cj1ihw16b000cpruhljjodcjs","category_id":"cj1ihw16m000mpruhwzq393su","_id":"cj1ihw16u0011pruhxbh9eef7"},{"post_id":"cj1ihw16o000spruh23f57vnz","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw16v0014pruh9xdj62ej"},{"post_id":"cj1ihw16p000vpruhsh8gu74h","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw16y0016pruhutdz41c5"},{"post_id":"cj1ihw16g000epruh3ic8ou10","category_id":"cj1ihw16p000tpruh9rdp88zj","_id":"cj1ihw170001bpruhtq9nu5q2"},{"post_id":"cj1ihw16q000ypruhh1op5lfo","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw172001dpruhfz5fqw6y"},{"post_id":"cj1ihw16u0012pruh5izz25pm","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw173001hpruh0sltwaqm"},{"post_id":"cj1ihw16j000ipruh0hahgdxz","category_id":"cj1ihw16t000zpruhf4b7nmgu","_id":"cj1ihw173001ipruh2ipev7zf"},{"post_id":"cj1ihw16w0015pruhuy7hf15m","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw174001kpruhrw3w0abf"},{"post_id":"cj1ihw16y0019pruhd36937zi","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw174001mpruhh3x7zrd1"},{"post_id":"cj1ihw16l000lpruhqil4geic","category_id":"cj1ihw16p000tpruh9rdp88zj","_id":"cj1ihw175001opruhn8p0rxa1"},{"post_id":"cj1ihw171001cpruh9oteip8g","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw175001qpruhalcyexek"},{"post_id":"cj1ihw172001fpruhc0jewnyx","category_id":"cj1ihw1160003pruh08bys5n3","_id":"cj1ihw176001spruhd9fbhdwb"}],"PostTag":[{"post_id":"cj1ihw10y0000pruhyteybqw0","tag_id":"cj1ihw1180004pruh4cqhpp43","_id":"cj1ihw1190005pruhqqj6k8g9"},{"post_id":"cj1ihw16d000dpruhi8a1ckf5","tag_id":"cj1ihw16b000bpruh0nmzej28","_id":"cj1ihw16j000hpruh94m3ey1y"},{"post_id":"cj1ihw1680008pruhm7veshrm","tag_id":"cj1ihw16b000bpruh0nmzej28","_id":"cj1ihw16k000kpruhy5mnw8hd"},{"post_id":"cj1ihw16a0009pruhivjvbxf7","tag_id":"cj1ihw16b000bpruh0nmzej28","_id":"cj1ihw16m000ppruhietmjru0"},{"post_id":"cj1ihw16b000cpruhljjodcjs","tag_id":"cj1ihw16m000npruh682ki8pt","_id":"cj1ihw16q000wpruhq9vu5gnk"},{"post_id":"cj1ihw16g000epruh3ic8ou10","tag_id":"cj1ihw16p000upruhew2rfwji","_id":"cj1ihw16v0013pruh5fqbrfv3"},{"post_id":"cj1ihw16j000ipruh0hahgdxz","tag_id":"cj1ihw16t0010pruhmb9mna1h","_id":"cj1ihw170001apruhw46ipfwc"},{"post_id":"cj1ihw16l000lpruhqil4geic","tag_id":"cj1ihw16p000upruhew2rfwji","_id":"cj1ihw173001gpruhsqjcx67d"},{"post_id":"cj1ihw16n000qpruh4r5lhnx2","tag_id":"cj1ihw172001epruha2oqzdyb","_id":"cj1ihw174001lpruh53tq74zs"},{"post_id":"cj1ihw16o000spruh23f57vnz","tag_id":"cj1ihw172001epruha2oqzdyb","_id":"cj1ihw175001ppruh2z128ena"},{"post_id":"cj1ihw16p000vpruhsh8gu74h","tag_id":"cj1ihw172001epruha2oqzdyb","_id":"cj1ihw176001tpruho6qcug81"},{"post_id":"cj1ihw16q000ypruhh1op5lfo","tag_id":"cj1ihw172001epruha2oqzdyb","_id":"cj1ihw178001vpruhs69j1l6o"},{"post_id":"cj1ihw16u0012pruh5izz25pm","tag_id":"cj1ihw172001epruha2oqzdyb","_id":"cj1ihw178001xpruhezyf4qtk"},{"post_id":"cj1ihw16w0015pruhuy7hf15m","tag_id":"cj1ihw178001wpruhaa6ct6jy","_id":"cj1ihw178001zpruhh4fh3m2o"},{"post_id":"cj1ihw16y0019pruhd36937zi","tag_id":"cj1ihw178001ypruhzvgmu78p","_id":"cj1ihw1790021pruh669fonjv"},{"post_id":"cj1ihw171001cpruh9oteip8g","tag_id":"cj1ihw1780020pruhqhknl4ll","_id":"cj1ihw1790023pruhnv2yih38"},{"post_id":"cj1ihw172001fpruhc0jewnyx","tag_id":"cj1ihw1790022pruhne7wwut2","_id":"cj1ihw1790024pruh2y26d89i"}],"Tag":[{"name":"随谈","_id":"cj1ihw1180004pruh4cqhpp43"},{"name":"docker","_id":"cj1ihw16b000bpruh0nmzej28"},{"name":"angular","_id":"cj1ihw16m000npruh682ki8pt"},{"name":"redis","_id":"cj1ihw16p000upruhew2rfwji"},{"name":"动漫","_id":"cj1ihw16t0010pruhmb9mna1h"},{"name":"毕业设计","_id":"cj1ihw172001epruha2oqzdyb"},{"name":"学习方法","_id":"cj1ihw178001wpruhaa6ct6jy"},{"name":"选择","_id":"cj1ihw178001ypruhzvgmu78p"},{"name":"工作","_id":"cj1ihw1780020pruhqhknl4ll"},{"name":"面试","_id":"cj1ihw1790022pruhne7wwut2"}]}}