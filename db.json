{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/image/wechatpay.png","path":"image/wechatpay.png","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7cb865d7b34a0d7e54a2b688b8c36a8fe92f779b","modified":1489113813000},{"_id":"source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488216496000},{"_id":"source/.DS_Store","hash":"95f402ee31de17cb9515c322582cffe7d5d20c1e","modified":1489198066000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488216496000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488216496000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1489200774000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488216496000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488216496000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488216496000},{"_id":"themes/next/_config.yml","hash":"086bdc6c7d17c7924d6f2fa068a0573cd5ba1722","modified":1489278525000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488216496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488216496000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488216496000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488216496000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488216496000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488216496000},{"_id":"source/_posts/hello-world.md","hash":"21e778d613f6df7967ebcf532c1c790ac871e845","modified":1489196984000},{"_id":"source/_posts/.DS_Store","hash":"c2a9a8b791457bfa5b597b792d05eaa098126638","modified":1489198548000},{"_id":"source/about/index.md","hash":"b78add3ca593f79e94064fc424833a497440d643","modified":1489807290000},{"_id":"source/categories/index.md","hash":"836c83255631a36c6063d6a215f2bc98341567de","modified":1489160265000},{"_id":"source/tags/index.md","hash":"da7ffd2d17b90889d6a18973ce298bd67e043e80","modified":1489158988000},{"_id":"source/image/wechatpay.png","hash":"d5d073f06bc48b43cbf6ad875ef7ff251c2e8592","modified":1489194851000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488216496000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488216496000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488216496000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488216496000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488216496000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488216496000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488216496000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488216496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488216496000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488216496000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488216496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1489115588000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488216496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488216496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488216496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488216496000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488216496000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488216496000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488216496000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488216496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488216496000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488216496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488216496000},{"_id":"themes/next/source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488216496000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488216496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488216496000},{"_id":"source/image/alipay.png","hash":"2b28021d05768718851abffd9c1e250c570015e6","modified":1489194836000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"source/_posts/docker/Docker学习记录(一)-基本概念.md","hash":"555c239b457c0920a9f4778b1d774d13cf2e9a95","modified":1489224121000},{"_id":"source/_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","hash":"eab2fd7f6998b0155f1ab3f17d440385fee935fb","modified":1489306812000},{"_id":"source/_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","hash":"86888612482c57b837a9ed671230fe96e97f1fc8","modified":1489247631000},{"_id":"source/_posts/随谈/如何学习一门新技术.md","hash":"03a6fca956c2f3480381aa0a0161fe868ca2f86d","modified":1489198443000},{"_id":"source/_posts/毕业设计/毕业设计周记(一).md","hash":"2599feed06d7bb6e3ab829ad1508f06a36f8a43a","modified":1489198162000},{"_id":"source/_posts/毕业设计/.DS_Store","hash":"d3b9eb58d606841e774b9f5d4929616d90848633","modified":1489198300000},{"_id":"source/_posts/随谈/工作经验(持续更新).md","hash":"897123d3a89d2283b9fb3557ba40e05b5176c489","modified":1489198159000},{"_id":"source/_posts/随谈/.DS_Store","hash":"9879e136178815653fa4842a380ff464f1374530","modified":1489198403000},{"_id":"source/_posts/随谈/面经.md","hash":"528f9e3713a6e484d40afc43dc89104b9fe5f8e5","modified":1489198109000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488216496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488216496000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488216496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488216496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488216496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488216496000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488216496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488216496000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488216496000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488216496000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488216496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488216496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488216496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488216496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488216496000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488216496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488216496000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488216496000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488216496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488216496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488216496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488216496000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488216496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488216496000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488216496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488216496000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488216496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488216496000},{"_id":"themes/next/source/images/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488216496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488216496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488216496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488216496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488216496000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488216496000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488216496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488216496000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488216496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488216496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488216496000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488216496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488216496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488216496000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488216496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488216496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488216496000},{"_id":"public/baidusitemap.xml","hash":"60d3c35855accad0556511094cc30b5c03717b55","modified":1489807184087},{"_id":"public/atom.xml","hash":"e792438d5b04ad8d952030a4cd068c4714da0a46","modified":1489807184089},{"_id":"public/search.xml","hash":"3e05c5bbd274e899d3012fddec46be3d648955de","modified":1489807184089},{"_id":"public/about/index.html","hash":"9f942c8cb7c2214c0f39f3daa2cae4450a2c79a5","modified":1489807185168},{"_id":"public/categories/index.html","hash":"d5191037813c3f8fee71f11c2abe48f3e2348412","modified":1489807185177},{"_id":"public/tags/index.html","hash":"93c68a508331fc3b00599d73cda14d5d4e1359b5","modified":1489807185177},{"_id":"public/2017/03/12/docker/Docker学习记录(三)-构建非跨平台项目编译环境/index.html","hash":"4d2442495b7c966e5f2e61b2bdcb6c4b776ec5b2","modified":1489807185177},{"_id":"public/2017/03/10/docker/Docker学习记录(二)-Dockerfile创建镜像/index.html","hash":"db43a5eb3f827b669d91643c9c738d450d3d91ac","modified":1489807185177},{"_id":"public/2017/03/10/docker/Docker学习记录(一)-基本概念/index.html","hash":"3e9db951d06d4841c115108313d7b1227e2997f6","modified":1489807185177},{"_id":"public/2017/03/09/hello-world/index.html","hash":"2c504fbdd42d45e3ac2a1c9df38ec7cbb0adedb7","modified":1489807185177},{"_id":"public/2017/03/10/毕业设计/毕业设计周记(一)/index.html","hash":"2864d6bd128db9be1917dc5a1ec0e0a12c695aa2","modified":1489807185177},{"_id":"public/2017/02/28/随谈/工作经验(持续更新)/index.html","hash":"394699e0b5ee6be6db90ec7ca5f040c1dfae47de","modified":1489807185177},{"_id":"public/2017/01/10/随谈/面经/index.html","hash":"41cc6ffcc0c5c609fe929f155ccfa5a7dc4d9779","modified":1489807185177},{"_id":"public/archives/2017/index.html","hash":"73b54ab30e61ddb12b6d7b2a8ca623efdacec17d","modified":1489807185177},{"_id":"public/2017/02/01/随谈/如何学习一门新技术/index.html","hash":"97469e1349a719c746f031050d516267172ab2f4","modified":1489807185177},{"_id":"public/archives/index.html","hash":"2ec28e954684adf83fd6ee688f117db88471b7aa","modified":1489807185177},{"_id":"public/archives/2017/01/index.html","hash":"92fdf73538a6f761f9f73df40060f226fde40505","modified":1489807185178},{"_id":"public/archives/2017/02/index.html","hash":"c79ad52e7704e61b9007c48a694cb5838f7482ec","modified":1489807185178},{"_id":"public/categories/随谈/index.html","hash":"89235ee1c53e4b8c00c9eeb9d75016ca4ef8ed14","modified":1489807185178},{"_id":"public/archives/2017/03/index.html","hash":"79ba237c9cc90e1f8d848b31dcadf721c38fa1ce","modified":1489807185178},{"_id":"public/categories/docker/index.html","hash":"60830d2fec525e53865f9fd2824df5d695d17f55","modified":1489807185178},{"_id":"public/index.html","hash":"d04d71995908f9d7fb9b57779fe97f5c4ea1217a","modified":1489807185178},{"_id":"public/tags/docker/index.html","hash":"59f6fed20a91c04bc8454edb8cbf8bbd7e161fbb","modified":1489807185178},{"_id":"public/tags/毕业设计/index.html","hash":"0398131e0c89c65eee477a3d10ebcb6ec1cd6054","modified":1489807185178},{"_id":"public/tags/学习方法/index.html","hash":"cead249ee9c6a52ed231f9916a6686f1d1181f22","modified":1489807185178},{"_id":"public/tags/随谈/index.html","hash":"0850dc0b7b60c0a28088f73af0b72c40e05d0624","modified":1489807185178},{"_id":"public/tags/工作/index.html","hash":"c4409e6229a325514bc224efd7b429ccf25a5875","modified":1489807185178},{"_id":"public/tags/面试/index.html","hash":"0ce033f9cb255682edffa7ffdd678b2505a67b95","modified":1489807185178}],"Category":[{"name":"随谈","_id":"cj0eojy680001cuuhsu6wk4v5"},{"name":"docker","_id":"cj0eojybd000acuuhwhw8f8a4"}],"Data":[],"Page":[{"title":"about","date":"2017-03-10T15:39:09.000Z","type":"about","_content":"\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n下一步要做的事情就是把之前的博客慢慢迁移过来.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-10 23:39:09\ntype: \"about\"\n---\n\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n下一步要做的事情就是把之前的博客慢慢迁移过来.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","updated":"2017-03-18T03:21:30.000Z","path":"about/index.html","_id":"cj0eojyak0005cuuhrxiplcwu","comments":1,"layout":"page","content":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>下一步要做的事情就是把之前的博客慢慢迁移过来.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>下一步要做的事情就是把之前的博客慢慢迁移过来.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n"},{"title":"categorys","date":"2017-03-10T15:35:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categorys\ndate: 2017-03-10 23:35:22\ntype: \"categories\"\n---\n","updated":"2017-03-10T15:37:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj0eojyam0006cuuhik3d2m67","content":"","excerpt":"","more":""},{"title":"tagcloud","date":"2017-03-10T15:14:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tagcloud\ndate: 2017-03-10 23:14:57\ntype: \"tags\"\n---\n","updated":"2017-03-10T15:16:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj0eojyan0007cuuhpiug3tht","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-03-08T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - 随谈\ncategories: 随谈\n\ndate: 2017-03-09 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-11T01:49:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojy620000cuuhtarusnzt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Docker学习记录(一)-基本概念","date":"2017-03-10T09:21:00.000Z","_content":"\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","source":"_posts/docker/Docker学习记录(一)-基本概念.md","raw":"---\ntitle: Docker学习记录(一)-基本概念\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 17:21:00\n---\n\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","slug":"docker/Docker学习记录(一)-基本概念","published":1,"updated":"2017-03-11T09:22:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybc0008cuuhd6k46gnm","content":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\" target=\"_blank\" rel=\"external\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n"},{"title":"Docker学习记录(二)-Dockerfile创建镜像","date":"2017-03-10T13:21:00.000Z","_content":"\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n1.FROM：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n2.MAINTAINER：格式为MAINTAIER<name>，指定维护者信息。\n\n3.RUN：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n4.CMD：指定容器启动后执行的命令，一般都是早就写好的脚本，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n5.EXPOSE：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n6.ENV：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n7.COPY：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n8.ENTRYPOINT：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n9.VOLUME：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n10.USER：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n11.WORKDIR：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","source":"_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","raw":"---\ntitle: Docker学习记录(二)-Dockerfile创建镜像\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 21:21:00\n---\n\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n1.FROM：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n2.MAINTAINER：格式为MAINTAIER<name>，指定维护者信息。\n\n3.RUN：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n4.CMD：指定容器启动后执行的命令，一般都是早就写好的脚本，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n5.EXPOSE：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n6.ENV：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n7.COPY：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n8.ENTRYPOINT：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n9.VOLUME：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n10.USER：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n11.WORKDIR：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","slug":"docker/Docker学习记录(二)-Dockerfile创建镜像","published":1,"updated":"2017-03-11T15:53:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybd0009cuuhz73bxyie","content":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p>1.FROM：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p>2.MAINTAINER：格式为MAINTAIER<name>，指定维护者信息。</name></p>\n<p>3.RUN：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p>4.CMD：指定容器启动后执行的命令，一般都是早就写好的脚本，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>5.EXPOSE：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p>6.ENV：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p>7.COPY：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p>8.ENTRYPOINT：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p>9.VOLUME：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p>10.USER：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p>11.WORKDIR：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p>1.FROM：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p>2.MAINTAINER：格式为MAINTAIER<name>，指定维护者信息。</p>\n<p>3.RUN：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p>4.CMD：指定容器启动后执行的命令，一般都是早就写好的脚本，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>5.EXPOSE：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p>6.ENV：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p>7.COPY：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p>8.ENTRYPOINT：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p>9.VOLUME：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p>10.USER：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p>11.WORKDIR：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n"},{"title":"如何学习一门新技术","date":"2017-02-01T02:37:00.000Z","_content":"\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","source":"_posts/随谈/如何学习一门新技术.md","raw":"---\ntitle: 如何学习一门新技术\ntags:\n  - 学习方法\ncategories: 随谈\ndate: 2017-02-01 10:37:00\n---\n\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","slug":"随谈/如何学习一门新技术","published":1,"updated":"2017-03-11T02:14:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybe000ccuuh9bs7kpa4","content":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\" target=\"_blank\" rel=\"external\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n","excerpt":"","more":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n"},{"title":"Docker学习记录(三)-构建非跨平台项目编译环境","date":"2017-03-12T07:21:00.000Z","_content":"\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","source":"_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","raw":"---\ntitle: Docker学习记录(三)-构建非跨平台项目编译环境\ncategories: docker\ntags:\n - docker\ndate: 2017-03-12 15:21:00\n\n---\n\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","slug":"docker/Docker学习记录(三)-构建非跨平台项目编译环境","published":1,"updated":"2017-03-12T08:20:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybg000dcuuh7y6ees90","content":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n"},{"title":"毕业设计周记(一)","date":"2017-03-10T01:50:00.000Z","_content":"本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(一).md","raw":"---\ntitle: 毕业设计周记(一)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-10 09:50:00\n---\n本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(一)","published":1,"updated":"2017-03-11T02:09:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybj000ecuuh8120h2jy","content":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"工作经验","date":"2017-02-28T01:50:00.000Z","_content":"\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","source":"_posts/随谈/工作经验(持续更新).md","raw":"---\ntitle: 工作经验\ntags:\n  - 工作\ncategories: 随谈\ndate: 2017-02-28 09:50:00\n---\n\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","slug":"随谈/工作经验(持续更新)","published":1,"updated":"2017-03-11T02:09:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybl000jcuuhdpb8tv2h","content":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n","excerpt":"","more":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n"},{"title":"面经","date":"2017-01-10T01:50:00.000Z","_content":"\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n###1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n###2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","source":"_posts/随谈/面经.md","raw":"---\ntitle: 面经\ntags:\n  - 面试\ncategories: 随谈\ndate: 2017-01-10 09:50:00\n---\n\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n###1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n###2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","slug":"随谈/面经","published":1,"updated":"2017-03-11T02:08:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0eojybn000mcuuhlrtaub98","content":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<p>###1.电面<br>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<p>###2.现场面<br>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\" target=\"_blank\" rel=\"external\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\" target=\"_blank\" rel=\"external\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\" target=\"_blank\" rel=\"external\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n","excerpt":"","more":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就500左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<p>###1.电面<br>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<p>###2.现场面<br>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0eojy620000cuuhtarusnzt","category_id":"cj0eojy680001cuuhsu6wk4v5","_id":"cj0eojy6c0004cuuhcdfmttjr"},{"post_id":"cj0eojybe000ccuuh9bs7kpa4","category_id":"cj0eojy680001cuuhsu6wk4v5","_id":"cj0eojybl000icuuh2jhuu0pn"},{"post_id":"cj0eojybg000dcuuh7y6ees90","category_id":"cj0eojybd000acuuhwhw8f8a4","_id":"cj0eojybn000lcuuhd6st9ek8"},{"post_id":"cj0eojybc0008cuuhd6k46gnm","category_id":"cj0eojybd000acuuhwhw8f8a4","_id":"cj0eojybp000ocuuhpcn5honn"},{"post_id":"cj0eojybj000ecuuh8120h2jy","category_id":"cj0eojy680001cuuhsu6wk4v5","_id":"cj0eojybp000qcuuhe88d59ve"},{"post_id":"cj0eojybl000jcuuhdpb8tv2h","category_id":"cj0eojy680001cuuhsu6wk4v5","_id":"cj0eojybq000scuuhyebn5yq1"},{"post_id":"cj0eojybd0009cuuhz73bxyie","category_id":"cj0eojybd000acuuhwhw8f8a4","_id":"cj0eojybq000ucuuhf4chdawr"},{"post_id":"cj0eojybn000mcuuhlrtaub98","category_id":"cj0eojy680001cuuhsu6wk4v5","_id":"cj0eojybq000wcuuhpb4zqt23"}],"PostTag":[{"post_id":"cj0eojy620000cuuhtarusnzt","tag_id":"cj0eojy6a0002cuuhgcawadmu","_id":"cj0eojy6c0003cuuhdu3csblb"},{"post_id":"cj0eojybg000dcuuh7y6ees90","tag_id":"cj0eojybe000bcuuh9tcbk01w","_id":"cj0eojybl000hcuuhj9xs9qkj"},{"post_id":"cj0eojybc0008cuuhd6k46gnm","tag_id":"cj0eojybe000bcuuh9tcbk01w","_id":"cj0eojybn000kcuuh3m1qo1j4"},{"post_id":"cj0eojybd0009cuuhz73bxyie","tag_id":"cj0eojybe000bcuuh9tcbk01w","_id":"cj0eojybp000pcuuhm3xv8ysw"},{"post_id":"cj0eojybe000ccuuh9bs7kpa4","tag_id":"cj0eojybo000ncuuhn7yqou0p","_id":"cj0eojybq000tcuuh8rkauxow"},{"post_id":"cj0eojybj000ecuuh8120h2jy","tag_id":"cj0eojybq000rcuuhrvogprvh","_id":"cj0eojybq000xcuuhl5ppqd4e"},{"post_id":"cj0eojybl000jcuuhdpb8tv2h","tag_id":"cj0eojybq000vcuuhqbmgtg8g","_id":"cj0eojybr000zcuuhqg71dq06"},{"post_id":"cj0eojybn000mcuuhlrtaub98","tag_id":"cj0eojybr000ycuuh9mwdvkn0","_id":"cj0eojybs0010cuuhb5a951qh"}],"Tag":[{"name":"随谈","_id":"cj0eojy6a0002cuuhgcawadmu"},{"name":"docker","_id":"cj0eojybe000bcuuh9tcbk01w"},{"name":"学习方法","_id":"cj0eojybo000ncuuhn7yqou0p"},{"name":"毕业设计","_id":"cj0eojybq000rcuuhrvogprvh"},{"name":"工作","_id":"cj0eojybq000vcuuhqbmgtg8g"},{"name":"面试","_id":"cj0eojybr000ycuuh9mwdvkn0"}]}}