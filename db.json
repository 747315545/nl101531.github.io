{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/image/wechatpay.png","path":"image/wechatpay.png","modified":1,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/image/alipay.png","path":"image/alipay.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7cb865d7b34a0d7e54a2b688b8c36a8fe92f779b","modified":1489113813000},{"_id":"source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"source/.DS_Store","hash":"95f402ee31de17cb9515c322582cffe7d5d20c1e","modified":1489198066000},{"_id":"source/robots.txt","hash":"360b347ba7653fb0936cba10e718a38792c64ae0","modified":1492214329000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488216496000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488216496000},{"_id":"themes/next/.DS_Store","hash":"b4031ca706d0e344ab2ab686d4decf4474d9e602","modified":1489200774000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488216496000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488216496000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488216496000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488216496000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488216496000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488216496000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488216496000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488216496000},{"_id":"themes/next/_config.yml","hash":"7191805ecf6899985764aa4f3c7a0f4faef1f5af","modified":1498572381000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488216496000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488216496000},{"_id":"source/_posts/.me_configs.data","hash":"b02cfe02cb1d35e0bcc701d1a54501e03523599c","modified":1493719372000},{"_id":"source/_posts/.DS_Store","hash":"eb129c08abdd402041a17490a61dac9003ab7c16","modified":1495517347000},{"_id":"source/_posts/.md_configs.data","hash":"8842f205e55d4dee88e990327ceeebfc55470fe5","modified":1493719372000},{"_id":"source/_posts/.z_sync_configs.data","hash":"0adeb256e21f2497cd17938c77498288e8a71dab","modified":1492959826000},{"_id":"source/_posts/hello-world.md","hash":"21e778d613f6df7967ebcf532c1c790ac871e845","modified":1489196984000},{"_id":"source/about/index.md","hash":"a540401d798e358d728805dabe3f71cac58875c5","modified":1493566137000},{"_id":"source/categories/index.md","hash":"836c83255631a36c6063d6a215f2bc98341567de","modified":1489160265000},{"_id":"source/tags/index.md","hash":"da7ffd2d17b90889d6a18973ce298bd67e043e80","modified":1489158988000},{"_id":"source/image/wechatpay.png","hash":"d5d073f06bc48b43cbf6ad875ef7ff251c2e8592","modified":1489194851000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488216496000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488216496000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488216496000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488216496000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488216496000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488216496000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488216496000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488216496000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488216496000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488216496000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488216496000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488216496000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1489115588000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488216496000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488216496000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488216496000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488216496000},{"_id":"themes/next/layout/index.swig","hash":"e7347407abe2345a09c756f9845b58198a31762b","modified":1490105813000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488216496000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488216496000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488216496000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488216496000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488216496000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488216496000},{"_id":"themes/next/source/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488216496000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488216496000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488216496000},{"_id":"source/image/alipay.png","hash":"2b28021d05768718851abffd9c1e250c570015e6","modified":1489194836000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"source/_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","hash":"250a7e1a655c006e26421f7e5c687173c792274f","modified":1491099245000},{"_id":"source/_posts/docker/Docker学习记录(一)-基本概念.md","hash":"8e537aa5bc91330fb2f8dad2441a5f758bf5442f","modified":1491099164000},{"_id":"source/_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","hash":"cef7f59eac42ddfd86f81565e90a9ae45e157358","modified":1491099009000},{"_id":"source/_posts/java/Java8学习记录(一)-函数式接口.md","hash":"8f3d51316b37766868dd0c84a998189e8d82841b","modified":1495277272000},{"_id":"source/_posts/java/Java8学习记录(二)-Stream原理.md","hash":"9c46c5ce53487b0797b9aedfcb6c91efa543f160","modified":1498618054000},{"_id":"source/_posts/linux/redis学习记录(三)-redis中的数据结构.md","hash":"12cb54cb949d2061bf73b3d050a4bba710fd0aaa","modified":1490625270000},{"_id":"source/_posts/spring/Spring Cloud学习记录(一)--为什么需要微服务.md","hash":"d7516dfe6bda777b0145991bb50b82363a16ebfb","modified":1497017892000},{"_id":"source/_posts/linux/redis学习记录(四)-SpringDataRedis分析.md","hash":"b1fc7d76139a9863089c16b7c245e5ba2ceeddd8","modified":1490838072000},{"_id":"source/_posts/spring/test.md","hash":"a32d360615ed0096670123a692f3fd6de1323fc9","modified":1498715094000},{"_id":"source/_posts/spring/Spring Cloud学习记录(二)--服务治理.md","hash":"cf89fd8b99369b5462c06d93f21af6deba4a14b3","modified":1496547005000},{"_id":"source/_posts/spring/Spring Security学习记录(一) -- Spring Security学习记录(一) -- 初识Spring Security.md","hash":"422aea5af4a4bd17d19fe6408580dedfc65070b9","modified":1498139748000},{"_id":"source/_posts/spring/Spring Security学习记录(三) -- JSON Web Token实践.md","hash":"865f5bdeb9b257695beaf3c6317771587b3a3c6b","modified":1498475470000},{"_id":"source/_posts/spring/Spring Security学习记录(二) -- Spring Security的Filter.md","hash":"a64580f73b16c530434140dac3ad0f4b9d00dbf2","modified":1498380950000},{"_id":"source/_posts/web/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493513240000},{"_id":"source/_posts/web/WEB小知识-HTTP请求对+和&的处理.md","hash":"8780414cc4b624edd2f85159756c9554382eeddd","modified":1495468765000},{"_id":"source/_posts/动漫/动漫推荐.md","hash":"b7c38cd2f8620183083e2fb2f5ec89fa58239001","modified":1496049829000},{"_id":"source/_posts/web/angular2学习记录-给后端程序员的经验分享.md","hash":"2687bb750b7dc375d8f6ba2c36d2a6102f48e1e0","modified":1493454327000},{"_id":"source/_posts/工具/Java中的序列化相关知识.md","hash":"b6a6e63706c1a461cb421c5766292d176effe658","modified":1494162821000},{"_id":"source/_posts/工具/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493513230000},{"_id":"source/_posts/毕业设计/.DS_Store","hash":"d3b9eb58d606841e774b9f5d4929616d90848633","modified":1493513214000},{"_id":"source/_posts/毕业设计/毕业设计周记(一).md","hash":"2599feed06d7bb6e3ab829ad1508f06a36f8a43a","modified":1489198162000},{"_id":"source/_posts/毕业设计/毕业设计周记(七).md","hash":"b691f1e0332bfc14466ee1199e7e9b2f3e95a26b","modified":1493032072000},{"_id":"source/_posts/毕业设计/毕业设计周记(三).md","hash":"356e1b385c220a35665ea7db19b2466de7c452de","modified":1490535717000},{"_id":"source/_posts/毕业设计/毕业设计周记(五).md","hash":"dbb9ca9217a74fb1628898a77885c6fcc90b2322","modified":1491662888000},{"_id":"source/_posts/毕业设计/毕业设计周记(二).md","hash":"d7c1c233e3f9a7606c840474ccde98f1343044b0","modified":1489848763000},{"_id":"source/_posts/毕业设计/毕业设计周记(八).md","hash":"8f7d94b741cee09fd1051410d06319bb1ed870bc","modified":1493464130000},{"_id":"source/_posts/毕业设计/毕业设计周记(六).md","hash":"19fccddd791d1cfad922acd6341b6ec6ba9c07c2","modified":1492324547000},{"_id":"source/_posts/毕业设计/毕业设计周记(四).md","hash":"0de7c382df02c8730517a536b6e018b71252ab48","modified":1491262653000},{"_id":"source/_posts/经验/少走弯路的10条建议(转).md","hash":"fee217f93ed403d9e22d8d12cfadee4a67c4726a","modified":1492738559000},{"_id":"source/_posts/运维/对一个WEB请求的理解.md","hash":"c0665faf3b5f826dce4a9f64f479c22db3db86cb","modified":1494033188000},{"_id":"source/_posts/随谈/.DS_Store","hash":"9879e136178815653fa4842a380ff464f1374530","modified":1489198403000},{"_id":"source/_posts/随谈/ERP叛逃者.md","hash":"0f1ccd6ad23ec592fa04648cec083bc435e2420e","modified":1492738815000},{"_id":"source/_posts/随谈/工作经验(持续更新).md","hash":"1c6656fff11fa839243012e0ebc609e1a283a85f","modified":1492738765000},{"_id":"source/_posts/随谈/如何学习一门新技术.md","hash":"0ef7011c3c23436bb34b2efdd8a434e7365dadde","modified":1492738838000},{"_id":"source/_posts/随谈/面经.md","hash":"bcf5d4e109dc5e53846e58dd9cead291042a9f5e","modified":1494774407000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488216496000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488216496000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488216496000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488216496000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488216496000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488216496000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488216496000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488216496000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490926851000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489850203000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488216496000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488216496000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488216496000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488216496000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489851422000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488216496000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488216496000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488216496000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488216496000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488216496000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488216496000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488216496000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488216496000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488216496000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488216496000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488216496000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488216496000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488216496000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488216496000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488216496000},{"_id":"themes/next/source/images/favicon.ico","hash":"db819a45b018088f0bad21ea406538330271aa4e","modified":1489192528000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488216496000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488216496000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488216496000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488216496000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488216496000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488216496000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488216496000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488216496000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488216496000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488216496000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"a22af4836254f4164a5ede0fbe42eaf660ca552f","modified":1498571913000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488216496000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488216496000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ef97a0b0bf378ed5f52a75f5ec25cb756f6592d9","modified":1498614015000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488216496000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"6a8906d9857cb5b2504be829c038cbf850cb1e45","modified":1498614232000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488216496000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488216496000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488216496000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488216496000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488216496000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488216496000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488216496000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488216496000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488216496000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488216496000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488216496000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488216496000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488216496000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1493568767000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488216496000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488216496000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488216496000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488216496000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b8c78a2932b37722beb5c1b278cf98704b18b136","modified":1498614351000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488216496000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488216496000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488216496000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488216496000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488216496000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488216496000}],"Category":[{"name":"随谈","_id":"cj4i0a7rj00036wz50lalji65"},{"name":"docker","_id":"cj4i0a7ws000a6wz5juuxq2ci"},{"name":"java","_id":"cj4i0a7xb000r6wz5fcnauyfn"},{"name":"redis","_id":"cj4i0a7xj00136wz5rmkqoq8g"},{"name":"Spring","_id":"cj4i0a7xo00196wz5tlgov5zi"},{"name":"web","_id":"cj4i0a7yj002d6wz5pv1nm091"},{"name":"动漫","_id":"cj4i0a7yo002l6wz5qeck78of"},{"name":"工作问题","_id":"cj4i0a7yr002w6wz5vza5vs2j"},{"name":"经验","_id":"cj4i0a7yr00316wz5a8mju0ao"}],"Data":[],"Page":[{"title":"about","date":"2017-03-10T15:39:09.000Z","type":"about","_content":"\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n基本每周一篇学习笔记,记录自己的成长,同时也希望能帮助更多的人,学习文章难免有错误,如有发现请指出,以免误人子弟.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-10 23:39:09\ntype: \"about\"\n---\n\n### Name:\n屈定(公司花名)\n\n### Status:\n实习  AND Change\n\n### Info:\n之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!\n基本每周一篇学习笔记,记录自己的成长,同时也希望能帮助更多的人,学习文章难免有错误,如有发现请指出,以免误人子弟.\n\n\n### Connact:\n\n微信\n![](http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg)\n","updated":"2017-04-30T15:28:57.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj4i0a7rf00016wz5hg9vp0y9","content":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>基本每周一篇学习笔记,记录自己的成长,同时也希望能帮助更多的人,学习文章难免有错误,如有发现请指出,以免误人子弟.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name:\"></a>Name:</h3><p>屈定(公司花名)</p>\n<h3 id=\"Status\"><a href=\"#Status\" class=\"headerlink\" title=\"Status:\"></a>Status:</h3><p>实习  AND Change</p>\n<h3 id=\"Info\"><a href=\"#Info\" class=\"headerlink\" title=\"Info:\"></a>Info:</h3><p>之前在csdn写博客,后来迁移到简书,最后在github上定居,只想要一种自由的感觉,符合条件的还是hexo!<br>基本每周一篇学习笔记,记录自己的成长,同时也希望能帮助更多的人,学习文章难免有错误,如有发现请指出,以免误人子弟.</p>\n<h3 id=\"Connact\"><a href=\"#Connact\" class=\"headerlink\" title=\"Connact:\"></a>Connact:</h3><p>微信<br><img src=\"http://ac-HSNl7zbI.clouddn.com/W3t8MRTDSX3UiqJtTTRzkqfgPj5aykSrST1Wvlvb.jpg\" alt=\"\"></p>\n"},{"title":"categorys","date":"2017-03-10T15:35:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categorys\ndate: 2017-03-10 23:35:22\ntype: \"categories\"\n---\n","updated":"2017-03-10T15:37:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj4i0a7rh00026wz5gc8wezm2","content":"","excerpt":"","more":""},{"title":"tagcloud","date":"2017-03-10T15:14:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tagcloud\ndate: 2017-03-10 23:14:57\ntype: \"tags\"\n---\n","updated":"2017-03-10T15:16:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj4i0a7rl00056wz5681i67x7","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2017-03-08T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - 随谈\ncategories: 随谈\n\ndate: 2017-03-09 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-11T01:49:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7ra00006wz54k3va0ae","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Docker学习记录(三)-构建非跨平台项目编译环境","date":"2017-03-12T07:21:00.000Z","_content":"\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n>个人独立博客: http://mrdear.cn\n\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","source":"_posts/docker/Docker学习记录(三)-构建非跨平台项目编译环境.md","raw":"---\ntitle: Docker学习记录(三)-构建非跨平台项目编译环境\ncategories: docker\ntags:\n - docker\ndate: 2017-03-12 15:21:00\n\n---\n\n# Docker学习记录(三)-构建非跨平台项目编译环境\n\n标签（空格分隔）： docker\n\n---\n>个人独立博客: http://mrdear.cn\n\n因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.\n\n----------\n\n1.问题\n----\n在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.\n因此docker需要环境 java maven gcc g++ make\n\n2.构建编译环境\n--------\n编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.\nDockerfile:\n```\n#构建judger端需要的环境,方便本地测试\n#基于java8环境\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#gcc g++ make安装\nRUN apt-get install -y gcc-4.9\nRUN apt-get install -y g++-4.9\nRUN apt-get install -y build-essential\n\n#配置mvn环境\nADD apache-maven-3.3.9.tar.gz /usr/local\nENV M2_HOME /usr/local/apache-maven-3.3.9\nENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n#jni环境\nRUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/\nRUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/\n\n```\n\n构建命令:\n`docker build -t dev .`\n\n3.挂载运行\n------\n运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.\n挂载命令:\n```\ndocker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 \n-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev\n```\n该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.\n\n那么启动之后如下所示:\n![](http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg)\n\nok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下\n\n![](http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg)","slug":"docker/Docker学习记录(三)-构建非跨平台项目编译环境","published":1,"updated":"2017-04-02T02:14:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7wq00086wz5nhens42o","content":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<blockquote>\n<p>个人独立博客: <a href=\"http://mrdear.cn\">http://mrdear.cn</a></p>\n</blockquote>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-三-构建非跨平台项目编译环境\"><a href=\"#Docker学习记录-三-构建非跨平台项目编译环境\" class=\"headerlink\" title=\"Docker学习记录(三)-构建非跨平台项目编译环境\"></a>Docker学习记录(三)-构建非跨平台项目编译环境</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<blockquote>\n<p>个人独立博客: <a href=\"http://mrdear.cn\">http://mrdear.cn</a></p>\n</blockquote>\n<p>因为毕业设计的问题所以去学了docker,本文描述这个问题解决的过程.</p>\n<hr>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>在毕业设计AUSTOJ中,判题端使用JNI方式调用C++来编译和执行代码,得到输出结果,Java端进行结果对比.然而该C++代码在mac下无法编译,总是会报错,JNI也会出问题.另外该子模块在mac下无法使用maven打包,所以打包也需要放在docker中.<br>因此docker需要环境 java maven gcc g++ make</p>\n<h2 id=\"2-构建编译环境\"><a href=\"#2-构建编译环境\" class=\"headerlink\" title=\"2.构建编译环境\"></a>2.构建编译环境</h2><p>编写dockerfile文件,该文件的maven包我是从本机复制进去的,同样你也可以从外网下载.<br>Dockerfile:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#构建judger端需要的环境,方便本地测试</div><div class=\"line\">#基于java8环境</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#gcc g++ make安装</div><div class=\"line\">RUN apt-get install -y gcc-4.9</div><div class=\"line\">RUN apt-get install -y g++-4.9</div><div class=\"line\">RUN apt-get install -y build-essential</div><div class=\"line\"></div><div class=\"line\">#配置mvn环境</div><div class=\"line\">ADD apache-maven-3.3.9.tar.gz /usr/local</div><div class=\"line\">ENV M2_HOME /usr/local/apache-maven-3.3.9</div><div class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin:$M2_HOME/bin</div><div class=\"line\"></div><div class=\"line\">#jni环境</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jawt_md.h $JAVA_HOME/include/</div><div class=\"line\">RUN cp $JAVA_HOME/include/linux/jni_md.h $JAVA_HOME/include/</div></pre></td></tr></table></figure></p>\n<p>构建命令:<br><code>docker build -t dev .</code></p>\n<h2 id=\"3-挂载运行\"><a href=\"#3-挂载运行\" class=\"headerlink\" title=\"3.挂载运行\"></a>3.挂载运行</h2><p>运行时需要挂载本项目到docker中,该挂载是映射,因此本地和docker任意位置改变项目中文件都会反映在真实项目中,这也是想要的结果.<br>挂载命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -ti -p 50013:50013  -v /Users/niuli/workspace/git/AUSTOJ2/:/AUSTOJ2 </div><div class=\"line\">-v /Users/niuli/workspace/git/testcase/:/austoj/testcase dev</div></pre></td></tr></table></figure></p>\n<p>该命令以交互模式启动一个docker容器,同时绑定docker的50013端口到此容器的50013,因为我的项目使用的是50013端口.另外我挂载了本项目目录AUSTOJ2和测试数据目录分别到docker的/AUSTOJ2目录和/austoj/testcase目录.</p>\n<p>那么启动之后如下所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sVRm9T6RaAgcL0tqAX7vGz0kaTVDT21kJbSSokIA.jpg\" alt=\"\"></p>\n<p>ok,到此编译环境搞定,可以随心所欲的编译启动该子模块,并且还能实时反映到本机目录下</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/y020GeCL2UrSuASyDaYbvWs0XF3LWRYqRbej5pAB.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/bOKHInF9SpgHTSmr361EhU2geUFRjKW1yPwHap6s.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/JXVXNAq7Q6JtPc9QhKzJAdu1h3HskLriYhruA1tY.jpg\" alt=\"\"></p>\n"},{"title":"Docker学习记录(一)-基本概念","date":"2017-03-10T09:21:00.000Z","_content":"\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","source":"_posts/docker/Docker学习记录(一)-基本概念.md","raw":"---\ntitle: Docker学习记录(一)-基本概念\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 17:21:00\n\n---\n\n# Docker学习记录(一)-基本概念\n\n标签（空格分隔）： docker\n\n---\n因为做的项目用到了docker,所以开始学习下这方面的知识.\n\n----------\n\n1.基本概念\n------\ndocker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.\ndocker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.\ndocker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.\ndocker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.\n\n这样说应该很好理解了吧.\n\n因此创建一个helloworld的流程就和清晰了.\n启动docker虚拟机->创建docker镜像(或者从仓库拉取)->创建docker容器(运行helloworld)->结束\n\n2.docker虚拟机\n-----------\n首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用[阿里云加速器][1],登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.\n这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行`docker-machine rm default`删除默认主机.\n\n2.1新建主机\n![](http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg)\n\n2.2为当前shell配置环境\n![](http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg)\n\n2.3验证\n![](http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg)\n\n到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.\n```\ndocker-machine kill 停止某个Docker主机\ndocker-machine ls 列出所有管理的Docker主机\ndocker-machine regenerate-certs 为某个主机重新成功TLS认证信息\ndocker-machine restart 重启Docker主机\ndocker-machine rm 删除Docker主机\ndocker-machine scp 在Docker主机之间复制文件\ndocker-machine ssh SSH到主机上执行命令\ndocker-machine start 启动一个主机\ndocker-machine status 查看一个主机状态\ndocker-machine stop 停止一个主机\ndocker-machine upgrade 更新主机Docker版本为最新\ndocker-machine url 获取主机的URL\n```\n\n3.docker镜像\n----------\n使用`docker images`可以列出机器上所有的docker镜像.\n![](http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg)\n\n其中:\nREPOSTITORY：表示镜像的仓库源\nTAG：镜像的标签\nIMAGE ID：镜像ID\nCREATED：镜像创建时间\nSIZE：镜像大小\n\n使用`docker search 镜像名`查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.\n![](http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg)\n\n使用`docker pull 镜像名`获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如`docker pull redis:3.2`,就指定拉去redis3.2版本\n![](http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg)\n\n使用`docker run 镜像名`从该镜像启动一个实例.\n\n常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.\n```\ndocker inspect 查看镜像详情\ndocker rmi 删除镜像,带上-f参数则强制删除\ndocker save 导出镜像\ndocker load 导入镜像\ndocker push 上传镜像到仓库\ndocker tag 给镜像设置标签\n```\n\n4.docker容器\n----------\n容器是应用的实例,使用`docker create`创建一个容器,使用`docker start`启动一个容器,另一个简单方式就是`docker run`,等价于先创建再启动.\n\n那么使用`docker run`的时候后台做了哪些操作?\n1. 查找是否存在指定镜像,不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统,在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去\n5. 从地址池配置一个ip地址给容器\n6. 执行用户指定应用程序\n7. 执行完毕后容器被终止\n\n使用`docker ps -a`查看最近启动的容器\n![](http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg)\n\n使用`docker rm`删除容器,清理完毕后再删除hello world镜像.\n\n下面使用redis镜像实战整个流程,并学习容器常用命令.\n\n5.创建redis镜像\n-----------\n有了helloworld经历,这里流程就很清晰了,搜索镜像->拉去镜像->创建实例->连接交互\n![](http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg)\n\n可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.\n**docker run参数**\n```\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d: 后台运行容器，并返回容器ID；\n-i: 以交互模式运行容器，通常与 -t 同时使用；\n-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n--name=\"nginx-lb\": 为容器指定一个名称；\n--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h \"mars\": 指定容器的hostname；\n-e username=\"ritchie\": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net=\"bridge\": 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n--expose=[]: 开放一个端口或一组端口；\n-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射\n```\n\n首先使用-d -p参数,可以看到redis跑在了后台.\n![](http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg)\n\n**外部连接:**\n使用`docker port 容器id`查看映射出来的端口,该端口为**docker主机**的哈,所以要通过docker主机ip:端口才可以访问.\n比如我的docker主机ip为:192.168.99.100(使用`docker-machine env查看`),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了\n\n**进入容器**\n使用`docker exec`命令可以进入容器内部,参数和run的参数作用相同.\n\n![](http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg)\n\n其他命令\n```\ndocker stop 停止一个容器\ndocker rm 删除一个容器\ndocker import 导入一个容器\ndocker export 导出一个容器\n```\n\n\n  [1]: https://cr.console.aliyun.com","slug":"docker/Docker学习记录(一)-基本概念","published":1,"updated":"2017-04-02T02:12:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7wr00096wz5ms9yixnk","content":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\" target=\"_blank\" rel=\"external\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-一-基本概念\"><a href=\"#Docker学习记录-一-基本概念\" class=\"headerlink\" title=\"Docker学习记录(一)-基本概念\"></a>Docker学习记录(一)-基本概念</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>因为做的项目用到了docker,所以开始学习下这方面的知识.</p>\n<hr>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>docker虚拟机:docker环境,docker的操作都要依赖此虚拟机,可以理解为JDK.<br>docker镜像:镜像可以用面向对象中的Model类来理解,就是一个已经建立好的模型.<br>docker容器:容器可以关联面向对象中的实例来理解,实例是依赖类来创建,所以容器就是依赖镜像创建,同样一个类可以有多个实例,那么一个镜像也可以对应多个容器.<br>docker仓库:仓库是镜像市场,里面有别人建立好的Model类,也就是镜像,可以直接拿来使用.</p>\n<p>这样说应该很好理解了吧.</p>\n<p>因此创建一个helloworld的流程就和清晰了.<br>启动docker虚拟机-&gt;创建docker镜像(或者从仓库拉取)-&gt;创建docker容器(运行helloworld)-&gt;结束</p>\n<h2 id=\"2-docker虚拟机\"><a href=\"#2-docker虚拟机\" class=\"headerlink\" title=\"2.docker虚拟机\"></a>2.docker虚拟机</h2><p>首先docker安装后自带的虚拟机配置下载镜像又要GFW的原因速度很慢,一般使用<a href=\"https://cr.console.aliyun.com\">阿里云加速器</a>,登陆后找到加速器按照要求先创建一个新的docker主机,然后启动该主机.<br>这里要注意,阿里云给的命令是创建一个名字为default的主机,安装后自带了一个default,所以先运行<code>docker-machine rm default</code>删除默认主机.</p>\n<p>2.1新建主机<br><img src=\"http://ac-HSNl7zbI.clouddn.com/sAxM3IuAIRznxVzOKQUSSmnVuh4KGub9bNLDN9P3.jpg\" alt=\"\"></p>\n<p>2.2为当前shell配置环境<br><img src=\"http://ac-HSNl7zbI.clouddn.com/AK0TxhfaoaaJgUR6XLDAxWoiml1uNr5aEPyhOHkn.jpg\" alt=\"\"></p>\n<p>2.3验证<br><img src=\"http://ac-HSNl7zbI.clouddn.com/BgvivpB6bjf61IBPyswjjHCb5XfcYjvrpOS9sDNo.jpg\" alt=\"\"></p>\n<p>到此docker虚拟机创建完毕,这里需要掌握一些基本增删改查基本命令.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-machine kill 停止某个Docker主机</div><div class=\"line\">docker-machine ls 列出所有管理的Docker主机</div><div class=\"line\">docker-machine regenerate-certs 为某个主机重新成功TLS认证信息</div><div class=\"line\">docker-machine restart 重启Docker主机</div><div class=\"line\">docker-machine rm 删除Docker主机</div><div class=\"line\">docker-machine scp 在Docker主机之间复制文件</div><div class=\"line\">docker-machine ssh SSH到主机上执行命令</div><div class=\"line\">docker-machine start 启动一个主机</div><div class=\"line\">docker-machine status 查看一个主机状态</div><div class=\"line\">docker-machine stop 停止一个主机</div><div class=\"line\">docker-machine upgrade 更新主机Docker版本为最新</div><div class=\"line\">docker-machine url 获取主机的URL</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-docker镜像\"><a href=\"#3-docker镜像\" class=\"headerlink\" title=\"3.docker镜像\"></a>3.docker镜像</h2><p>使用<code>docker images</code>可以列出机器上所有的docker镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/axr3cW667D3Awsul4QA0qnVlrx2OYsRz0QJel6yG.jpg\" alt=\"\"></p>\n<p>其中:<br>REPOSTITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小</p>\n<p>使用<code>docker search 镜像名</code>查找某一镜像,例如查找hello world,可以看到带有OFFICIAL的为官方提供的镜像.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/LGnffJHC3CQIrxAMdBqUr6YXQf4s4CRiMLkhzwzY.jpg\" alt=\"\"></p>\n<p>使用<code>docker pull 镜像名</code>获取一个镜像,这里获取hello world,另外镜像后可以跟版本号,例如<code>docker pull redis:3.2</code>,就指定拉去redis3.2版本<br><img src=\"http://ac-HSNl7zbI.clouddn.com/pGDCyoQUkK3vnLXFRasOUzpDyLFbprXFTghVbzLf.jpg\" alt=\"\"></p>\n<p>使用<code>docker run 镜像名</code>从该镜像启动一个实例.</p>\n<p>常见命令,另外对于docker镜像的创建和运行比较重要,后续文章单独学习分析.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker inspect 查看镜像详情</div><div class=\"line\">docker rmi 删除镜像,带上-f参数则强制删除</div><div class=\"line\">docker save 导出镜像</div><div class=\"line\">docker load 导入镜像</div><div class=\"line\">docker push 上传镜像到仓库</div><div class=\"line\">docker tag 给镜像设置标签</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-docker容器\"><a href=\"#4-docker容器\" class=\"headerlink\" title=\"4.docker容器\"></a>4.docker容器</h2><p>容器是应用的实例,使用<code>docker create</code>创建一个容器,使用<code>docker start</code>启动一个容器,另一个简单方式就是<code>docker run</code>,等价于先创建再启动.</p>\n<p>那么使用<code>docker run</code>的时候后台做了哪些操作?</p>\n<ol>\n<li>查找是否存在指定镜像,不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统,在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接到容器中去</li>\n<li>从地址池配置一个ip地址给容器</li>\n<li>执行用户指定应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<p>使用<code>docker ps -a</code>查看最近启动的容器<br><img src=\"http://ac-HSNl7zbI.clouddn.com/aYGJha5vP2SwSQUEHtlNmRBU67vXS8co5KTCMO75.jpg\" alt=\"\"></p>\n<p>使用<code>docker rm</code>删除容器,清理完毕后再删除hello world镜像.</p>\n<p>下面使用redis镜像实战整个流程,并学习容器常用命令.</p>\n<h2 id=\"5-创建redis镜像\"><a href=\"#5-创建redis镜像\" class=\"headerlink\" title=\"5.创建redis镜像\"></a>5.创建redis镜像</h2><p>有了helloworld经历,这里流程就很清晰了,搜索镜像-&gt;拉去镜像-&gt;创建实例-&gt;连接交互<br><img src=\"http://ac-HSNl7zbI.clouddn.com/6184zD9Mp4SvaS1srJVGcXN4H2HqDj9QXa23l43H.jpg\" alt=\"\"></p>\n<p>可以看到启动了redis,但是这里直接输出到当前控制台了,可以通过参数配置使其后台运行.<br><strong>docker run参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</div><div class=\"line\">-d: 后台运行容器，并返回容器ID；</div><div class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</div><div class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</div><div class=\"line\">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</div><div class=\"line\">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</div><div class=\"line\">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</div><div class=\"line\">-h &quot;mars&quot;: 指定容器的hostname；</div><div class=\"line\">-e username=&quot;ritchie&quot;: 设置环境变量；</div><div class=\"line\">--env-file=[]: 从指定文件读入环境变量；</div><div class=\"line\">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</div><div class=\"line\">-m :设置容器使用内存最大值；</div><div class=\"line\">--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/Container: 四种类型；</div><div class=\"line\">--link=[]: 添加链接到另一个容器；</div><div class=\"line\">--expose=[]: 开放一个端口或一组端口；</div><div class=\"line\">-p 指定容器端口映射,该参数可以使得容器端口和主机端口相互映射</div></pre></td></tr></table></figure></p>\n<p>首先使用-d -p参数,可以看到redis跑在了后台.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/spT76EzPOxiqmpHHvUfft1bCHwQPkeqVIjJAGtCt.jpg\" alt=\"\"></p>\n<p><strong>外部连接:</strong><br>使用<code>docker port 容器id</code>查看映射出来的端口,该端口为<strong>docker主机</strong>的哈,所以要通过docker主机ip:端口才可以访问.<br>比如我的docker主机ip为:192.168.99.100(使用<code>docker-machine env查看</code>),docker分配映射端口为32768,那么访问就是192.168.99.100:32768,如果想用主机地址访问的话,就需要-p参数加上主机端口映射了</p>\n<p><strong>进入容器</strong><br>使用<code>docker exec</code>命令可以进入容器内部,参数和run的参数作用相同.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/fUQQvk3ApsvI4UbNYxO6C7tHu7d31M6v04aEhWmX.jpg\" alt=\"\"></p>\n<p>其他命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop 停止一个容器</div><div class=\"line\">docker rm 删除一个容器</div><div class=\"line\">docker import 导入一个容器</div><div class=\"line\">docker export 导出一个容器</div></pre></td></tr></table></figure></p>\n"},{"title":"Docker学习记录(二)-Dockerfile创建镜像","date":"2017-03-10T13:21:00.000Z","_content":"\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n**1.FROM**：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n**2.MAINTAINER**：格式为MAINTAIER<name>，指定维护者信息。\n\n**3.RUN**：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n**4.CMD**：指定容器启动后执行的命令\n命令格式为: \nsh格式: CMD <命令> \nexec格式:CMD [\"可执行文件\",\"参数1\",\"参数2\"]\n一般都是早就写好的脚本或者启动一个服务，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.\n比如执行`CMD serice mysql start`,那么翻译过来的话是`CMD [\"sh\",\"-c\",\"serice mysql start\"]`,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式`CMD [\"nginx\",\"-g\",\"\"daemon off;]`,指定前台运行.\n\n**5.EXPOSE**：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n**6.ENV**：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n**7.COPY**：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n**8.ENTRYPOINT**：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n**9.VOLUME**：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n**10.USER**：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n**11.WORKDIR**：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","source":"_posts/docker/Docker学习记录(二)-Dockerfile创建镜像.md","raw":"---\ntitle: Docker学习记录(二)-Dockerfile创建镜像\ncategories: docker\ntags:\n - docker\ndate: 2017-03-10 21:21:00\n\n---\n\n# Docker学习记录(二)-Dockerfile创建镜像\n\n标签（空格分隔）： docker\n\n---\n\n本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.\n\n\n----------\n\n1.Dockerfile\n------------\n### 1.1基本案例\ndockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:\n```\n第一行指定该镜像基于的基础镜像(必须)\nFROM java:8\n\n维护者信息\nMAINTAINER quding  niudear@foxmail.com\n\n镜像操作指令\nRUN echo $JAVA_HOME\n\n启动时操作的命令\n\nCMD ./usr/sbin/nginx\n```\n该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.\n\n### 1.2指令详解\n\n**1.FROM**：格式为 `FROM <image>`或`FROM<image>:<tag>`第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。\n\n**2.MAINTAINER**：格式为MAINTAIER<name>，指定维护者信息。\n\n**3.RUN**：格式为`RUN <command>`或者`RUN [“executable”，“param1”，“param2”]`。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如`RUN[“/bin/bash”，“-c”，“echohello”]`。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：`RUN apt-get install -y git`，然后`RUN git clonexxxx`\n\n**4.CMD**：指定容器启动后执行的命令\n命令格式为: \nsh格式: CMD <命令> \nexec格式:CMD [\"可执行文件\",\"参数1\",\"参数2\"]\n一般都是早就写好的脚本或者启动一个服务，例如：`CMD[“/run.sh”]`。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。\n\n这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.\n比如执行`CMD serice mysql start`,那么翻译过来的话是`CMD [\"sh\",\"-c\",\"serice mysql start\"]`,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式`CMD [\"nginx\",\"-g\",\"\"daemon off;]`,指定前台运行.\n\n**5.EXPOSE**：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。\n例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：`EXPOSE 9200 9300`\n\n**6.ENV**：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务\n\n**7.COPY**：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。\n\n**8.ENTRYPOINT**：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。\n每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效\n\n**9.VOLUME**：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：\n\n**10.USER**：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。\n\n**11.WORKDIR**：定义工作目录，如果容器中没有此目录，会自动创建\n\n创建指令`docker build 路径`,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.\n\n----------\n\n2.创建SSH服务镜像\n-----------\n### 2.1准备Java8环境\n后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.\n```\ndocker pull java:8\n```\n![](http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg)\n\n### 2.2编写Dockerfile\nssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.\n**Dockerfile:**\n```\n#显示该镜像是基于java8镜像\nFROM java:8\n\n#维护人信息\nMAINTAINER quding niudear@foxmail.com\n#更新源\nRUN apt-get update\n#安装软件\nRUN apt-get install -y openssh-server\n\nRUN mkdir -p /var/run/sshd\nRUN mkdir -p /root/.ssh\n\n#取消pam限制\nRUN sed -ri 's/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g' /etc/pam.d/sshd\n\n#复制配置文件到相应位置\nCOPY authorized_keys /root/.ssh/authorized_keys\nCOPY run.sh /run.sh\n\n#赋予脚本权限\nRUN chmod 755 /run.sh\n\n#开放端口\nEXPOSE 22\n\n#设置启动命令\n\nCMD [\"/run.sh\"]\n```\n\n**run.sh**\n```\n#!/bin/bash\n/usr/sbin/sshd -D\n```\n\n**拷贝本机的id_ras**\n```\ncat ~/.ssh/id_rsa.pub >authorized_keys\n//用来免密的\n```\n\n**执行构建**\n```\ndocker build -t sshd:java .  \n```\n\n构建成功后使用`docker images`即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.\n\n\n","slug":"docker/Docker学习记录(二)-Dockerfile创建镜像","published":1,"updated":"2017-04-02T02:10:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7ws000c6wz5uwzsbyxg","content":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p><strong>1.FROM</strong>：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p><strong>2.MAINTAINER</strong>：格式为MAINTAIER<name>，指定维护者信息。</name></p>\n<p><strong>3.RUN</strong>：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p><strong>4.CMD</strong>：指定容器启动后执行的命令<br>命令格式为:<br>sh格式: CMD &lt;命令&gt;<br>exec格式:CMD [“可执行文件”,”参数1”,”参数2”]<br>一般都是早就写好的脚本或者启动一个服务，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.<br>比如执行<code>CMD serice mysql start</code>,那么翻译过来的话是<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;serice mysql start&quot;]</code>,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式<code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;&quot;daemon off;]</code>,指定前台运行.</p>\n<p><strong>5.EXPOSE</strong>：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p><strong>6.ENV</strong>：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p><strong>7.COPY</strong>：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p><strong>8.ENTRYPOINT</strong>：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p><strong>9.VOLUME</strong>：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p><strong>10.USER</strong>：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p><strong>11.WORKDIR</strong>：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n","excerpt":"","more":"<h1 id=\"Docker学习记录-二-Dockerfile创建镜像\"><a href=\"#Docker学习记录-二-Dockerfile创建镜像\" class=\"headerlink\" title=\"Docker学习记录(二)-Dockerfile创建镜像\"></a>Docker学习记录(二)-Dockerfile创建镜像</h1><p>标签（空格分隔）： docker</p>\n<hr>\n<p>本文学习Dcokerfile的基本命令,并且创建一个支持ssh服务的镜像.</p>\n<hr>\n<h2 id=\"1-Dockerfile\"><a href=\"#1-Dockerfile\" class=\"headerlink\" title=\"1.Dockerfile\"></a>1.Dockerfile</h2><h3 id=\"1-1基本案例\"><a href=\"#1-1基本案例\" class=\"headerlink\" title=\"1.1基本案例\"></a>1.1基本案例</h3><p>dockerfile可以说是docker的描述符,该文件定义了docker镜像的所能拥有哪些东西.基本格式如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一行指定该镜像基于的基础镜像(必须)</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">维护者信息</div><div class=\"line\">MAINTAINER quding  niudear@foxmail.com</div><div class=\"line\"></div><div class=\"line\">镜像操作指令</div><div class=\"line\">RUN echo $JAVA_HOME</div><div class=\"line\"></div><div class=\"line\">启动时操作的命令</div><div class=\"line\"></div><div class=\"line\">CMD ./usr/sbin/nginx</div></pre></td></tr></table></figure></p>\n<p>该文件说明从Java8这个基础镜像创建一个新的镜像,输出Java路径,启动成功则启动nginx服务,这也是一个Dockerfile需要包含的操作步骤.</p>\n<h3 id=\"1-2指令详解\"><a href=\"#1-2指令详解\" class=\"headerlink\" title=\"1.2指令详解\"></a>1.2指令详解</h3><p><strong>1.FROM</strong>：格式为 <code>FROM &lt;image&gt;</code>或<code>FROM&lt;image&gt;:&lt;tag&gt;</code>第一条指令必须是FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）。</p>\n<p><strong>2.MAINTAINER</strong>：格式为MAINTAIER<name>，指定维护者信息。</p>\n<p><strong>3.RUN</strong>：格式为<code>RUN &lt;command&gt;</code>或者<code>RUN [“executable”，“param1”，“param2”]</code>。前者将在shell终端中运行的命令，即/bin/sh–c；后者则使用exec执行。指定使用其他终端可以通过第二种方式实现，例如<code>RUN[“/bin/bash”，“-c”，“echohello”]</code>。每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用\\来换行。这实际上就是在容器构建时需要执行哪些指令，例如容器构建时需要下拉代码，但是默认启动的容器中是没有Git指令的，就需要下载，可以执行：<code>RUN apt-get install -y git</code>，然后<code>RUN git clonexxxx</code></p>\n<p><strong>4.CMD</strong>：指定容器启动后执行的命令<br>命令格式为:<br>sh格式: CMD &lt;命令&gt;<br>exec格式:CMD [“可执行文件”,”参数1”,”参数2”]<br>一般都是早就写好的脚本或者启动一个服务，例如：<code>CMD[“/run.sh”]</code>。注意：如果Dockerfile中指定了多条命令，只有最后一条会被执行。如果用户启动时候加了运行的命令，则会覆盖掉CMD指定的指令。</p>\n<p>这里有一个问题,很多时候我们想要docker一直在后台运行,但是往往docker启动后就停止.原因就在于此.<br>比如执行<code>CMD serice mysql start</code>,那么翻译过来的话是<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;serice mysql start&quot;]</code>,那么对于docker来说CMD主进程为sh,那么sh执行完该命令就结束,所以导致docker停止.所以要改成直接启动文件形式<code>CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;&quot;daemon off;]</code>,指定前台运行.</p>\n<p><strong>5.EXPOSE</strong>：告诉Docker服务端容器需要暴露的端口号，供互联系统使用。在启动容器时需要通过-P（注意是大写），Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以具体指定哪个本地端口映射过来。<br>例如：我在elasticsearch镜像的Dockerfile中指定了暴露出9200和9300端口，我可以在Dockerfile中写：<code>EXPOSE 9200 9300</code></p>\n<p><strong>6.ENV</strong>：创建的时候给容器中加上个需要的环境变量。指定一个值，为后续的RUN指令服务</p>\n<p><strong>7.COPY</strong>：复制本地的文件或目录到容器中。目标路径不存在时，会自动创建。</p>\n<p><strong>8.ENTRYPOINT</strong>：配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。<br>每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效</p>\n<p><strong>9.VOLUME</strong>：创建一个挂在点，可以从本机或其他容器挂载的挂载点。意思就是从容器中暴露出一部分，和外界共享这块东西，一般放数据库的数据或者是代码。在容器启动运行的时候，如果需要将volume暴露的东西和本地的一个文件夹进行映射，想要通过本地文件直接访问容器中暴露的部分，可以在运行的时候进行映射：</p>\n<p><strong>10.USER</strong>：指定运行容器时的用户名或者UID，后续的RUN也会使用指定的用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。<br>要临时获取管理员权限的时候要使用gosu，不推荐使用sudo。如果不指定，容器默认是root运行。</p>\n<p><strong>11.WORKDIR</strong>：定义工作目录，如果容器中没有此目录，会自动创建</p>\n<p>创建指令<code>docker build 路径</code>,该命令会读取路径下的Dockerfile文件和其他文件,然后发送给服务端,由服务端创建镜像.</p>\n<hr>\n<h2 id=\"2-创建SSH服务镜像\"><a href=\"#2-创建SSH服务镜像\" class=\"headerlink\" title=\"2.创建SSH服务镜像\"></a>2.创建SSH服务镜像</h2><h3 id=\"2-1准备Java8环境\"><a href=\"#2-1准备Java8环境\" class=\"headerlink\" title=\"2.1准备Java8环境\"></a>2.1准备Java8环境</h3><p>后续教程需要利用到Java8环境,因此先下载一个官方的Java8镜像作为基础镜像.直接执行如下命令.可以利用之前的教程,启动容器查看下java路径.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull java:8</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/sJUUIIhnu1bxyfWnYtf8VfN7W3z5NMMj7lARWGpw.jpg\" alt=\"\"></p>\n<h3 id=\"2-2编写Dockerfile\"><a href=\"#2-2编写Dockerfile\" class=\"headerlink\" title=\"2.2编写Dockerfile\"></a>2.2编写Dockerfile</h3><p>ssh服务主要是openssh-server来提供,因此需要在容器中安装该服务.<br><strong>Dockerfile:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#显示该镜像是基于java8镜像</div><div class=\"line\">FROM java:8</div><div class=\"line\"></div><div class=\"line\">#维护人信息</div><div class=\"line\">MAINTAINER quding niudear@foxmail.com</div><div class=\"line\">#更新源</div><div class=\"line\">RUN apt-get update</div><div class=\"line\">#安装软件</div><div class=\"line\">RUN apt-get install -y openssh-server</div><div class=\"line\"></div><div class=\"line\">RUN mkdir -p /var/run/sshd</div><div class=\"line\">RUN mkdir -p /root/.ssh</div><div class=\"line\"></div><div class=\"line\">#取消pam限制</div><div class=\"line\">RUN sed -ri &apos;s/session  required   pam_loginuid.so/#session    required  pam_loginuid.so/g&apos; /etc/pam.d/sshd</div><div class=\"line\"></div><div class=\"line\">#复制配置文件到相应位置</div><div class=\"line\">COPY authorized_keys /root/.ssh/authorized_keys</div><div class=\"line\">COPY run.sh /run.sh</div><div class=\"line\"></div><div class=\"line\">#赋予脚本权限</div><div class=\"line\">RUN chmod 755 /run.sh</div><div class=\"line\"></div><div class=\"line\">#开放端口</div><div class=\"line\">EXPOSE 22</div><div class=\"line\"></div><div class=\"line\">#设置启动命令</div><div class=\"line\"></div><div class=\"line\">CMD [&quot;/run.sh&quot;]</div></pre></td></tr></table></figure></p>\n<p><strong>run.sh</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">/usr/sbin/sshd -D</div></pre></td></tr></table></figure></p>\n<p><strong>拷贝本机的id_ras</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;authorized_keys</div><div class=\"line\">//用来免密的</div></pre></td></tr></table></figure></p>\n<p><strong>执行构建</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t sshd:java .</div></pre></td></tr></table></figure></p>\n<p>构建成功后使用<code>docker images</code>即可查看,然后像上篇一样启动容器,暴露出端口,再使用ssh连接,和一般linux系统就没什么差别了.</p>\n"},{"title":"Java8学习记录(一)-函数式接口","date":"2017-05-18T15:39:11.000Z","_content":"实习前只是粗略的看了下Java8的一些基本语法,但是没有系统的学习过.在使用一段时间后决定系统的对其进行一次分析,加深对Java8函数式编程的理解,提高自己的编码技巧.另外kotlin崛起,感兴趣的朋友尝试下混编也未尝不可.\n- - - - -\n\n### 函数式接口\n函数式接口,对于Java来说就是接口内只有一个公开方法的接口,因为使用lanbda表达式,例如`() -> user.getName()`对应的调用则可能是`func.get()`,编译器会根据接口推断所属于的方法,如果有两个则无法推断.Java8提供了很多函数式接口,一般都使用注解`@FunctionalInterface`声明,有必要了解如下一些函数式接口.\n\n函数式接口        |      参数类型    |    返回类型   |   描述   |\n---  |      ---    |    ---   |    ---\nSupplier<T>       |      无      |   T  |   接收一个T类型的值\nConsumer<T>        |      T     | 无 |  处理一个T类型的值\nBiConsumer<T, U>    | T,U   | 无  |  处理T类型和U类型的值\nPredicate<T>    | T  | boolean  |  处理T类型的值,并返回true或者false.\nToIntFunction<T>    | T  | int  |  处理T类型的值,并返回int值\nToLongFunction<T>    | T  | long  |  处理T类型的值,并返回long值\nToDoubleFunction<T>    | T  | double  |  处理T类型的值,并返回double值\nFunction<T, R>    | T  | R  |  处理T类型的值,并返回R类型值\nBiFunction<T, U, R>    | T,U  | R  |  处理T类型和U类型的值,并返回R类型值\nBiFunction<T, U, R>    | T,U  | R  |  处理T类型和U类型的值,并返回R类型值\nUnaryOperator<T>    | T  | T  |  处理T类型值,并返回T类型值,\nBinaryOperator<T>    | T,T  | T  |  处理T类型值,并返回T类型值\n\n以上的函数每一个代表的都是一种基本的操作,操作之间可以自由组合,所以才有了stream这些灵活的操作.\n\n### Stream操作\nStream的操作是建立在函数式接口的组合上的,最好的学习方法是看Stream接口来学习.下面举一些例子来分析,假设有这样的一些初始数据.\n```java\nList<String> testData = new ArrayList<String>();\n    testData.add(\"张三\");\n    testData.add(\"李四\");\n    testData.add(\"王二\");\n    testData.add(\"麻子\");\n```\n\n**filter**\n```java\n    Stream<T> filter(Predicate<? super T> predicate);\n```\nfilter接收predicate函数,predicate是接收T值,返回boolean值,那么对应的引用就可以写成如下形式,意思是取集合中以'张'开头的名字.\n```java\ntestData.stream()\n        .filter(x -> x.startsWith(\"张\"))\n```\n**map**\n```java\n    <R> Stream<R> map(Function<? super T, ? extends R> mapper);\n```\nmap操作接收的是Function接口,对于Function接收T值返回R值,那map的作用就很明显是转换用的,比如下面代码,转换名称为对应的名称长度,也就是从输入String数据返回int数据.\n```java\ntestData.stream()\n        .map(x -> x.length())\n```\n**flatMap**\n```java\n    <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);\n```\nflatMap和map都是使用Function接口,不同的是返回值flatMap限定为Stream类型.所以flatMap可以作为合并流使用,如以下代码,提取出所有的字符.\n```java\ntestData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .collect(Collectors.toList());\n        //输出  [张, 三, 李, 四, 王, 二, 麻, 子]\n```\n**peek**\n```java\n    Stream<T> peek(Consumer<? super T> action);\n```\npeek参数为Consumer,Consumer接收T值,无返回,那么该方法就可以作为调试不影响stream中内容的一些操作,不过由于对象都是地址引用,你再此做一些对象内容操作也是可以的.\n**reduce**\n```java\n<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);\n```\nReduce比较复杂的一个接口,属于归纳性操作,看参数,第一个是U泛型,也就是输入类型的参数,最为初始值,第二个BiFunction,接收T,U参数,返回U类型参数,BinaryOperator接收U,U类型,并返回U类型.\n```java\n    StringBuilder identity = new StringBuilder();\n    StringBuilder reduce = testData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .reduce(identity, (r, x) -> {\n          r.append(x);\n          return r;\n        }, StringBuilder::append);\n    System.out.println(identity == reduce);\n    System.out.println(reduce.toString());\n    //输出 true\n   //  张三李四王二麻子\n```\n首先提供一个基本容器identity,然后两个参数r即是identity,x为每次输入参数,最后一个StringBuilder::append是并发下多个identity的合并策略.\n再举个例子,既然reduce属于归纳性操作,那么也可以当成collect使用,如下:\n```java    \n ArrayList<String> identity = new ArrayList<>();\n    ArrayList<String> result = testData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .reduce(identity, (r, x) -> {\n          r.add(x);\n          return r;\n        },(r1,r2) -> {\n          r1.addAll(r2);\n          return r1;\n        });\n    System.out.println(identity == result);\n    System.out.println(result);\n    //输出 true\n    //[张, 三, 李, 四, 王, 二, 麻, 子]\n```\n### 强大的collect\ncollect无疑是stream中最强大的操作,掌握了collect操作才能说掌握了stream.为了便于使用者,Java提供了`Collectors`类,该类提供了很多便捷的collect操作,如`Collector<T, ?, List<T>> toList()`,`Collector<T, ?, Set<T>> toSet()`等操作.这些操作最终都会调用如下构造函数构造出collector对象,因此掌握该本质是最佳的学习方式.\n```java\nCollectorImpl(Supplier<A> supplier,\n                      BiConsumer<A, T> accumulator,\n                      BinaryOperator<A> combiner,\n                      Function<A,R> finisher,\n                      Set<Characteristics> characteristics) {\n            this.supplier = supplier;\n            this.accumulator = accumulator;\n            this.combiner = combiner;\n            this.finisher = finisher;\n            this.characteristics = characteristics;\n        }\n```\nSupplier类似reduce中的u,接收一个元数据,BiConsumer则是操作数据,BinaryOperator并发下聚合,finisher完成时的转换操作,Set<Characteristics>应该按照定义是优化一些操作中的转换.如下面的toList()操作,其finish操作为`castingIdentity()`.\n```java    \n   public static <T>\n    Collector<T, ?, List<T>> toList() {\n        return new CollectorImpl<>((Supplier<List<T>>) ArrayList::new, List::add,\n                                   (left, right) -> { left.addAll(right); return left; },\n                                   CH_ID);\n    }\n```\n再看toMap的实现\n```java\n    public static <T, K, U, M extends Map<K, U>>\n    Collector<T, ?, M> toMap(Function<? super T, ? extends K> keyMapper,\n                                Function<? super T, ? extends U> valueMapper,\n                                BinaryOperator<U> mergeFunction,\n                                Supplier<M> mapSupplier) {\n        BiConsumer<M, T> accumulator\n                = (map, element) -> map.merge(keyMapper.apply(element),\n                                              valueMapper.apply(element), mergeFunction);\n        return new CollectorImpl<>(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);\n    }\n```\nFunction作为转换函数提供了key和value的转换,BinaryOperator提供了重复key合并策略,mapSupplier则表示最终收集到的容器.那么使用就很简单了\n```java\nHashMap<Character, String> map = testData.stream()\n        .collect(Collectors.toMap(x -> x.charAt(0), Function.identity()\n            , (v1, v2) -> v2, HashMap::new));\n```\n\n其他还有很多方法,就不一一叙述,主要是了解这些接口,知道他所拥有的功能,以及组合的意义,即可很好的掌握Java中的函数式编程.\n\n","source":"_posts/java/Java8学习记录(一)-函数式接口.md","raw":"---\ntitle: Java8学习记录(一)-函数式接口\ntags:\n  -  java8\ncategories:  java\ndate: 2017-05-18 23:39:11\n---\n实习前只是粗略的看了下Java8的一些基本语法,但是没有系统的学习过.在使用一段时间后决定系统的对其进行一次分析,加深对Java8函数式编程的理解,提高自己的编码技巧.另外kotlin崛起,感兴趣的朋友尝试下混编也未尝不可.\n- - - - -\n\n### 函数式接口\n函数式接口,对于Java来说就是接口内只有一个公开方法的接口,因为使用lanbda表达式,例如`() -> user.getName()`对应的调用则可能是`func.get()`,编译器会根据接口推断所属于的方法,如果有两个则无法推断.Java8提供了很多函数式接口,一般都使用注解`@FunctionalInterface`声明,有必要了解如下一些函数式接口.\n\n函数式接口        |      参数类型    |    返回类型   |   描述   |\n---  |      ---    |    ---   |    ---\nSupplier<T>       |      无      |   T  |   接收一个T类型的值\nConsumer<T>        |      T     | 无 |  处理一个T类型的值\nBiConsumer<T, U>    | T,U   | 无  |  处理T类型和U类型的值\nPredicate<T>    | T  | boolean  |  处理T类型的值,并返回true或者false.\nToIntFunction<T>    | T  | int  |  处理T类型的值,并返回int值\nToLongFunction<T>    | T  | long  |  处理T类型的值,并返回long值\nToDoubleFunction<T>    | T  | double  |  处理T类型的值,并返回double值\nFunction<T, R>    | T  | R  |  处理T类型的值,并返回R类型值\nBiFunction<T, U, R>    | T,U  | R  |  处理T类型和U类型的值,并返回R类型值\nBiFunction<T, U, R>    | T,U  | R  |  处理T类型和U类型的值,并返回R类型值\nUnaryOperator<T>    | T  | T  |  处理T类型值,并返回T类型值,\nBinaryOperator<T>    | T,T  | T  |  处理T类型值,并返回T类型值\n\n以上的函数每一个代表的都是一种基本的操作,操作之间可以自由组合,所以才有了stream这些灵活的操作.\n\n### Stream操作\nStream的操作是建立在函数式接口的组合上的,最好的学习方法是看Stream接口来学习.下面举一些例子来分析,假设有这样的一些初始数据.\n```java\nList<String> testData = new ArrayList<String>();\n    testData.add(\"张三\");\n    testData.add(\"李四\");\n    testData.add(\"王二\");\n    testData.add(\"麻子\");\n```\n\n**filter**\n```java\n    Stream<T> filter(Predicate<? super T> predicate);\n```\nfilter接收predicate函数,predicate是接收T值,返回boolean值,那么对应的引用就可以写成如下形式,意思是取集合中以'张'开头的名字.\n```java\ntestData.stream()\n        .filter(x -> x.startsWith(\"张\"))\n```\n**map**\n```java\n    <R> Stream<R> map(Function<? super T, ? extends R> mapper);\n```\nmap操作接收的是Function接口,对于Function接收T值返回R值,那map的作用就很明显是转换用的,比如下面代码,转换名称为对应的名称长度,也就是从输入String数据返回int数据.\n```java\ntestData.stream()\n        .map(x -> x.length())\n```\n**flatMap**\n```java\n    <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);\n```\nflatMap和map都是使用Function接口,不同的是返回值flatMap限定为Stream类型.所以flatMap可以作为合并流使用,如以下代码,提取出所有的字符.\n```java\ntestData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .collect(Collectors.toList());\n        //输出  [张, 三, 李, 四, 王, 二, 麻, 子]\n```\n**peek**\n```java\n    Stream<T> peek(Consumer<? super T> action);\n```\npeek参数为Consumer,Consumer接收T值,无返回,那么该方法就可以作为调试不影响stream中内容的一些操作,不过由于对象都是地址引用,你再此做一些对象内容操作也是可以的.\n**reduce**\n```java\n<U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner);\n```\nReduce比较复杂的一个接口,属于归纳性操作,看参数,第一个是U泛型,也就是输入类型的参数,最为初始值,第二个BiFunction,接收T,U参数,返回U类型参数,BinaryOperator接收U,U类型,并返回U类型.\n```java\n    StringBuilder identity = new StringBuilder();\n    StringBuilder reduce = testData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .reduce(identity, (r, x) -> {\n          r.append(x);\n          return r;\n        }, StringBuilder::append);\n    System.out.println(identity == reduce);\n    System.out.println(reduce.toString());\n    //输出 true\n   //  张三李四王二麻子\n```\n首先提供一个基本容器identity,然后两个参数r即是identity,x为每次输入参数,最后一个StringBuilder::append是并发下多个identity的合并策略.\n再举个例子,既然reduce属于归纳性操作,那么也可以当成collect使用,如下:\n```java    \n ArrayList<String> identity = new ArrayList<>();\n    ArrayList<String> result = testData.stream()\n        .flatMap(x -> Stream.of(x.split(\"\")))\n        .reduce(identity, (r, x) -> {\n          r.add(x);\n          return r;\n        },(r1,r2) -> {\n          r1.addAll(r2);\n          return r1;\n        });\n    System.out.println(identity == result);\n    System.out.println(result);\n    //输出 true\n    //[张, 三, 李, 四, 王, 二, 麻, 子]\n```\n### 强大的collect\ncollect无疑是stream中最强大的操作,掌握了collect操作才能说掌握了stream.为了便于使用者,Java提供了`Collectors`类,该类提供了很多便捷的collect操作,如`Collector<T, ?, List<T>> toList()`,`Collector<T, ?, Set<T>> toSet()`等操作.这些操作最终都会调用如下构造函数构造出collector对象,因此掌握该本质是最佳的学习方式.\n```java\nCollectorImpl(Supplier<A> supplier,\n                      BiConsumer<A, T> accumulator,\n                      BinaryOperator<A> combiner,\n                      Function<A,R> finisher,\n                      Set<Characteristics> characteristics) {\n            this.supplier = supplier;\n            this.accumulator = accumulator;\n            this.combiner = combiner;\n            this.finisher = finisher;\n            this.characteristics = characteristics;\n        }\n```\nSupplier类似reduce中的u,接收一个元数据,BiConsumer则是操作数据,BinaryOperator并发下聚合,finisher完成时的转换操作,Set<Characteristics>应该按照定义是优化一些操作中的转换.如下面的toList()操作,其finish操作为`castingIdentity()`.\n```java    \n   public static <T>\n    Collector<T, ?, List<T>> toList() {\n        return new CollectorImpl<>((Supplier<List<T>>) ArrayList::new, List::add,\n                                   (left, right) -> { left.addAll(right); return left; },\n                                   CH_ID);\n    }\n```\n再看toMap的实现\n```java\n    public static <T, K, U, M extends Map<K, U>>\n    Collector<T, ?, M> toMap(Function<? super T, ? extends K> keyMapper,\n                                Function<? super T, ? extends U> valueMapper,\n                                BinaryOperator<U> mergeFunction,\n                                Supplier<M> mapSupplier) {\n        BiConsumer<M, T> accumulator\n                = (map, element) -> map.merge(keyMapper.apply(element),\n                                              valueMapper.apply(element), mergeFunction);\n        return new CollectorImpl<>(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);\n    }\n```\nFunction作为转换函数提供了key和value的转换,BinaryOperator提供了重复key合并策略,mapSupplier则表示最终收集到的容器.那么使用就很简单了\n```java\nHashMap<Character, String> map = testData.stream()\n        .collect(Collectors.toMap(x -> x.charAt(0), Function.identity()\n            , (v1, v2) -> v2, HashMap::new));\n```\n\n其他还有很多方法,就不一一叙述,主要是了解这些接口,知道他所拥有的功能,以及组合的意义,即可很好的掌握Java中的函数式编程.\n\n","slug":"java/Java8学习记录(一)-函数式接口","published":1,"updated":"2017-05-20T10:47:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7wu000d6wz5yub57986","content":"<p>实习前只是粗略的看了下Java8的一些基本语法,但是没有系统的学习过.在使用一段时间后决定系统的对其进行一次分析,加深对Java8函数式编程的理解,提高自己的编码技巧.另外kotlin崛起,感兴趣的朋友尝试下混编也未尝不可.</p>\n<hr>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>函数式接口,对于Java来说就是接口内只有一个公开方法的接口,因为使用lanbda表达式,例如<code>() -&gt; user.getName()</code>对应的调用则可能是<code>func.get()</code>,编译器会根据接口推断所属于的方法,如果有两个则无法推断.Java8提供了很多函数式接口,一般都使用注解<code>@FunctionalInterface</code>声明,有必要了解如下一些函数式接口.</p>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Supplier<t></t></td>\n<td>无</td>\n<td>T</td>\n<td>接收一个T类型的值</td>\n</tr>\n<tr>\n<td>Consumer<t></t></td>\n<td>T</td>\n<td>无</td>\n<td>处理一个T类型的值</td>\n</tr>\n<tr>\n<td>BiConsumer<t, u=\"\"></t,></td>\n<td>T,U</td>\n<td>无</td>\n<td>处理T类型和U类型的值</td>\n</tr>\n<tr>\n<td>Predicate<t></t></td>\n<td>T</td>\n<td>boolean</td>\n<td>处理T类型的值,并返回true或者false.</td>\n</tr>\n<tr>\n<td>ToIntFunction<t></t></td>\n<td>T</td>\n<td>int</td>\n<td>处理T类型的值,并返回int值</td>\n</tr>\n<tr>\n<td>ToLongFunction<t></t></td>\n<td>T</td>\n<td>long</td>\n<td>处理T类型的值,并返回long值</td>\n</tr>\n<tr>\n<td>ToDoubleFunction<t></t></td>\n<td>T</td>\n<td>double</td>\n<td>处理T类型的值,并返回double值</td>\n</tr>\n<tr>\n<td>Function<t, r=\"\"></t,></td>\n<td>T</td>\n<td>R</td>\n<td>处理T类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>BiFunction<t, u,=\"\" r=\"\"></t,></td>\n<td>T,U</td>\n<td>R</td>\n<td>处理T类型和U类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>BiFunction<t, u,=\"\" r=\"\"></t,></td>\n<td>T,U</td>\n<td>R</td>\n<td>处理T类型和U类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>UnaryOperator<t></t></td>\n<td>T</td>\n<td>T</td>\n<td>处理T类型值,并返回T类型值,</td>\n</tr>\n<tr>\n<td>BinaryOperator<t></t></td>\n<td>T,T</td>\n<td>T</td>\n<td>处理T类型值,并返回T类型值</td>\n</tr>\n</tbody>\n</table>\n<p>以上的函数每一个代表的都是一种基本的操作,操作之间可以自由组合,所以才有了stream这些灵活的操作.</p>\n<h3 id=\"Stream操作\"><a href=\"#Stream操作\" class=\"headerlink\" title=\"Stream操作\"></a>Stream操作</h3><p>Stream的操作是建立在函数式接口的组合上的,最好的学习方法是看Stream接口来学习.下面举一些例子来分析,假设有这样的一些初始数据.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; testData = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">    testData.add(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"王二\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"麻子\"</span>);</div></pre></td></tr></table></figure></p>\n<p><strong>filter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>filter接收predicate函数,predicate是接收T值,返回boolean值,那么对应的引用就可以写成如下形式,意思是取集合中以’张’开头的名字.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .filter(x -&gt; x.startsWith(<span class=\"string\">\"张\"</span>))</div></pre></td></tr></table></figure></p>\n<p><strong>map</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;R&gt; <span class=\"function\">Stream&lt;R&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends R&gt; mapper)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>map操作接收的是Function接口,对于Function接收T值返回R值,那map的作用就很明显是转换用的,比如下面代码,转换名称为对应的名称长度,也就是从输入String数据返回int数据.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .map(x -&gt; x.length())</div></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;R&gt; <span class=\"function\">Stream&lt;R&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>flatMap和map都是使用Function接口,不同的是返回值flatMap限定为Stream类型.所以flatMap可以作为合并流使用,如以下代码,提取出所有的字符.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">        .collect(Collectors.toList());</div><div class=\"line\">        <span class=\"comment\">//输出  [张, 三, 李, 四, 王, 二, 麻, 子]</span></div></pre></td></tr></table></figure></p>\n<p><strong>peek</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">peek</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>peek参数为Consumer,Consumer接收T值,无返回,那么该方法就可以作为调试不影响stream中内容的一些操作,不过由于对象都是地址引用,你再此做一些对象内容操作也是可以的.<br><strong>reduce</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;U&gt; <span class=\"function\">U <span class=\"title\">reduce</span><span class=\"params\">(U identity, BiFunction&lt;U, ? <span class=\"keyword\">super</span> T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Reduce比较复杂的一个接口,属于归纳性操作,看参数,第一个是U泛型,也就是输入类型的参数,最为初始值,第二个BiFunction,接收T,U参数,返回U类型参数,BinaryOperator接收U,U类型,并返回U类型.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> StringBuilder identity = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"> StringBuilder reduce = testData.stream()</div><div class=\"line\">     .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">     .reduce(identity, (r, x) -&gt; &#123;</div><div class=\"line\">       r.append(x);</div><div class=\"line\">       <span class=\"keyword\">return</span> r;</div><div class=\"line\">     &#125;, StringBuilder::append);</div><div class=\"line\"> System.out.println(identity == reduce);</div><div class=\"line\"> System.out.println(reduce.toString());</div><div class=\"line\"> <span class=\"comment\">//输出 true</span></div><div class=\"line\"><span class=\"comment\">//  张三李四王二麻子</span></div></pre></td></tr></table></figure></p>\n<p>首先提供一个基本容器identity,然后两个参数r即是identity,x为每次输入参数,最后一个StringBuilder::append是并发下多个identity的合并策略.<br>再举个例子,既然reduce属于归纳性操作,那么也可以当成collect使用,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;String&gt; identity = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">   ArrayList&lt;String&gt; result = testData.stream()</div><div class=\"line\">       .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">       .reduce(identity, (r, x) -&gt; &#123;</div><div class=\"line\">         r.add(x);</div><div class=\"line\">         <span class=\"keyword\">return</span> r;</div><div class=\"line\">       &#125;,(r1,r2) -&gt; &#123;</div><div class=\"line\">         r1.addAll(r2);</div><div class=\"line\">         <span class=\"keyword\">return</span> r1;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   System.out.println(identity == result);</div><div class=\"line\">   System.out.println(result);</div><div class=\"line\">   <span class=\"comment\">//输出 true</span></div><div class=\"line\">   <span class=\"comment\">//[张, 三, 李, 四, 王, 二, 麻, 子]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"强大的collect\"><a href=\"#强大的collect\" class=\"headerlink\" title=\"强大的collect\"></a>强大的collect</h3><p>collect无疑是stream中最强大的操作,掌握了collect操作才能说掌握了stream.为了便于使用者,Java提供了<code>Collectors</code>类,该类提供了很多便捷的collect操作,如<code>Collector&lt;T, ?, List&lt;T&gt;&gt; toList()</code>,<code>Collector&lt;T, ?, Set&lt;T&gt;&gt; toSet()</code>等操作.这些操作最终都会调用如下构造函数构造出collector对象,因此掌握该本质是最佳的学习方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">CollectorImpl(Supplier&lt;A&gt; supplier,</div><div class=\"line\">                      BiConsumer&lt;A, T&gt; accumulator,</div><div class=\"line\">                      BinaryOperator&lt;A&gt; combiner,</div><div class=\"line\">                      Function&lt;A,R&gt; finisher,</div><div class=\"line\">                      Set&lt;Characteristics&gt; characteristics) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.supplier = supplier;</div><div class=\"line\">            <span class=\"keyword\">this</span>.accumulator = accumulator;</div><div class=\"line\">            <span class=\"keyword\">this</span>.combiner = combiner;</div><div class=\"line\">            <span class=\"keyword\">this</span>.finisher = finisher;</div><div class=\"line\">            <span class=\"keyword\">this</span>.characteristics = characteristics;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>Supplier类似reduce中的u,接收一个元数据,BiConsumer则是操作数据,BinaryOperator并发下聚合,finisher完成时的转换操作,Set<characteristics>应该按照定义是优化一些操作中的转换.如下面的toList()操作,其finish操作为<code>castingIdentity()</code>.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;</div><div class=\"line\"> Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;((Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class=\"keyword\">new</span>, List::add,</div><div class=\"line\">                                (left, right) -&gt; &#123; left.addAll(right); <span class=\"keyword\">return</span> left; &#125;,</div><div class=\"line\">                                CH_ID);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></characteristics></p>\n<p>再看toMap的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, K, U, M extends Map&lt;K, U&gt;&gt;</div><div class=\"line\">Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class=\"keyword\">super</span> T, ? extends K&gt; keyMapper,</div><div class=\"line\">                            Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; valueMapper,</div><div class=\"line\">                            BinaryOperator&lt;U&gt; mergeFunction,</div><div class=\"line\">                            Supplier&lt;M&gt; mapSupplier) &#123;</div><div class=\"line\">    BiConsumer&lt;M, T&gt; accumulator</div><div class=\"line\">            = (map, element) -&gt; map.merge(keyMapper.apply(element),</div><div class=\"line\">                                          valueMapper.apply(element), mergeFunction);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Function作为转换函数提供了key和value的转换,BinaryOperator提供了重复key合并策略,mapSupplier则表示最终收集到的容器.那么使用就很简单了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">HashMap&lt;Character, String&gt; map = testData.stream()</div><div class=\"line\">        .collect(Collectors.toMap(x -&gt; x.charAt(<span class=\"number\">0</span>), Function.identity()</div><div class=\"line\">            , (v1, v2) -&gt; v2, HashMap::<span class=\"keyword\">new</span>));</div></pre></td></tr></table></figure></p>\n<p>其他还有很多方法,就不一一叙述,主要是了解这些接口,知道他所拥有的功能,以及组合的意义,即可很好的掌握Java中的函数式编程.</p>\n","excerpt":"","more":"<p>实习前只是粗略的看了下Java8的一些基本语法,但是没有系统的学习过.在使用一段时间后决定系统的对其进行一次分析,加深对Java8函数式编程的理解,提高自己的编码技巧.另外kotlin崛起,感兴趣的朋友尝试下混编也未尝不可.</p>\n<hr>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>函数式接口,对于Java来说就是接口内只有一个公开方法的接口,因为使用lanbda表达式,例如<code>() -&gt; user.getName()</code>对应的调用则可能是<code>func.get()</code>,编译器会根据接口推断所属于的方法,如果有两个则无法推断.Java8提供了很多函数式接口,一般都使用注解<code>@FunctionalInterface</code>声明,有必要了解如下一些函数式接口.</p>\n<table>\n<thead>\n<tr>\n<th>函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Supplier<T></td>\n<td>无</td>\n<td>T</td>\n<td>接收一个T类型的值</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>T</td>\n<td>无</td>\n<td>处理一个T类型的值</td>\n</tr>\n<tr>\n<td>BiConsumer<T, U></td>\n<td>T,U</td>\n<td>无</td>\n<td>处理T类型和U类型的值</td>\n</tr>\n<tr>\n<td>Predicate<T></td>\n<td>T</td>\n<td>boolean</td>\n<td>处理T类型的值,并返回true或者false.</td>\n</tr>\n<tr>\n<td>ToIntFunction<T></td>\n<td>T</td>\n<td>int</td>\n<td>处理T类型的值,并返回int值</td>\n</tr>\n<tr>\n<td>ToLongFunction<T></td>\n<td>T</td>\n<td>long</td>\n<td>处理T类型的值,并返回long值</td>\n</tr>\n<tr>\n<td>ToDoubleFunction<T></td>\n<td>T</td>\n<td>double</td>\n<td>处理T类型的值,并返回double值</td>\n</tr>\n<tr>\n<td>Function<T, R></td>\n<td>T</td>\n<td>R</td>\n<td>处理T类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>BiFunction<T, U, R></td>\n<td>T,U</td>\n<td>R</td>\n<td>处理T类型和U类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>BiFunction<T, U, R></td>\n<td>T,U</td>\n<td>R</td>\n<td>处理T类型和U类型的值,并返回R类型值</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td>T</td>\n<td>T</td>\n<td>处理T类型值,并返回T类型值,</td>\n</tr>\n<tr>\n<td>BinaryOperator<T></td>\n<td>T,T</td>\n<td>T</td>\n<td>处理T类型值,并返回T类型值</td>\n</tr>\n</tbody>\n</table>\n<p>以上的函数每一个代表的都是一种基本的操作,操作之间可以自由组合,所以才有了stream这些灵活的操作.</p>\n<h3 id=\"Stream操作\"><a href=\"#Stream操作\" class=\"headerlink\" title=\"Stream操作\"></a>Stream操作</h3><p>Stream的操作是建立在函数式接口的组合上的,最好的学习方法是看Stream接口来学习.下面举一些例子来分析,假设有这样的一些初始数据.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; testData = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">    testData.add(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"王二\"</span>);</div><div class=\"line\">    testData.add(<span class=\"string\">\"麻子\"</span>);</div></pre></td></tr></table></figure></p>\n<p><strong>filter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>filter接收predicate函数,predicate是接收T值,返回boolean值,那么对应的引用就可以写成如下形式,意思是取集合中以’张’开头的名字.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .filter(x -&gt; x.startsWith(<span class=\"string\">\"张\"</span>))</div></pre></td></tr></table></figure></p>\n<p><strong>map</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;R&gt; <span class=\"function\">Stream&lt;R&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends R&gt; mapper)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>map操作接收的是Function接口,对于Function接收T值返回R值,那map的作用就很明显是转换用的,比如下面代码,转换名称为对应的名称长度,也就是从输入String数据返回int数据.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .map(x -&gt; x.length())</div></pre></td></tr></table></figure></p>\n<p><strong>flatMap</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;R&gt; <span class=\"function\">Stream&lt;R&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>flatMap和map都是使用Function接口,不同的是返回值flatMap限定为Stream类型.所以flatMap可以作为合并流使用,如以下代码,提取出所有的字符.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">testData.stream()</div><div class=\"line\">        .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">        .collect(Collectors.toList());</div><div class=\"line\">        <span class=\"comment\">//输出  [张, 三, 李, 四, 王, 二, 麻, 子]</span></div></pre></td></tr></table></figure></p>\n<p><strong>peek</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">Stream&lt;T&gt; <span class=\"title\">peek</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>peek参数为Consumer,Consumer接收T值,无返回,那么该方法就可以作为调试不影响stream中内容的一些操作,不过由于对象都是地址引用,你再此做一些对象内容操作也是可以的.<br><strong>reduce</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;U&gt; <span class=\"function\">U <span class=\"title\">reduce</span><span class=\"params\">(U identity, BiFunction&lt;U, ? <span class=\"keyword\">super</span> T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span></span>;</div></pre></td></tr></table></figure></p>\n<p>Reduce比较复杂的一个接口,属于归纳性操作,看参数,第一个是U泛型,也就是输入类型的参数,最为初始值,第二个BiFunction,接收T,U参数,返回U类型参数,BinaryOperator接收U,U类型,并返回U类型.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> StringBuilder identity = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"> StringBuilder reduce = testData.stream()</div><div class=\"line\">     .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">     .reduce(identity, (r, x) -&gt; &#123;</div><div class=\"line\">       r.append(x);</div><div class=\"line\">       <span class=\"keyword\">return</span> r;</div><div class=\"line\">     &#125;, StringBuilder::append);</div><div class=\"line\"> System.out.println(identity == reduce);</div><div class=\"line\"> System.out.println(reduce.toString());</div><div class=\"line\"> <span class=\"comment\">//输出 true</span></div><div class=\"line\"><span class=\"comment\">//  张三李四王二麻子</span></div></pre></td></tr></table></figure></p>\n<p>首先提供一个基本容器identity,然后两个参数r即是identity,x为每次输入参数,最后一个StringBuilder::append是并发下多个identity的合并策略.<br>再举个例子,既然reduce属于归纳性操作,那么也可以当成collect使用,如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;String&gt; identity = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">   ArrayList&lt;String&gt; result = testData.stream()</div><div class=\"line\">       .flatMap(x -&gt; Stream.of(x.split(<span class=\"string\">\"\"</span>)))</div><div class=\"line\">       .reduce(identity, (r, x) -&gt; &#123;</div><div class=\"line\">         r.add(x);</div><div class=\"line\">         <span class=\"keyword\">return</span> r;</div><div class=\"line\">       &#125;,(r1,r2) -&gt; &#123;</div><div class=\"line\">         r1.addAll(r2);</div><div class=\"line\">         <span class=\"keyword\">return</span> r1;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   System.out.println(identity == result);</div><div class=\"line\">   System.out.println(result);</div><div class=\"line\">   <span class=\"comment\">//输出 true</span></div><div class=\"line\">   <span class=\"comment\">//[张, 三, 李, 四, 王, 二, 麻, 子]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"强大的collect\"><a href=\"#强大的collect\" class=\"headerlink\" title=\"强大的collect\"></a>强大的collect</h3><p>collect无疑是stream中最强大的操作,掌握了collect操作才能说掌握了stream.为了便于使用者,Java提供了<code>Collectors</code>类,该类提供了很多便捷的collect操作,如<code>Collector&lt;T, ?, List&lt;T&gt;&gt; toList()</code>,<code>Collector&lt;T, ?, Set&lt;T&gt;&gt; toSet()</code>等操作.这些操作最终都会调用如下构造函数构造出collector对象,因此掌握该本质是最佳的学习方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">CollectorImpl(Supplier&lt;A&gt; supplier,</div><div class=\"line\">                      BiConsumer&lt;A, T&gt; accumulator,</div><div class=\"line\">                      BinaryOperator&lt;A&gt; combiner,</div><div class=\"line\">                      Function&lt;A,R&gt; finisher,</div><div class=\"line\">                      Set&lt;Characteristics&gt; characteristics) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.supplier = supplier;</div><div class=\"line\">            <span class=\"keyword\">this</span>.accumulator = accumulator;</div><div class=\"line\">            <span class=\"keyword\">this</span>.combiner = combiner;</div><div class=\"line\">            <span class=\"keyword\">this</span>.finisher = finisher;</div><div class=\"line\">            <span class=\"keyword\">this</span>.characteristics = characteristics;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>Supplier类似reduce中的u,接收一个元数据,BiConsumer则是操作数据,BinaryOperator并发下聚合,finisher完成时的转换操作,Set<Characteristics>应该按照定义是优化一些操作中的转换.如下面的toList()操作,其finish操作为<code>castingIdentity()</code>.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;</div><div class=\"line\"> Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;((Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class=\"keyword\">new</span>, List::add,</div><div class=\"line\">                                (left, right) -&gt; &#123; left.addAll(right); <span class=\"keyword\">return</span> left; &#125;,</div><div class=\"line\">                                CH_ID);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>再看toMap的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, K, U, M extends Map&lt;K, U&gt;&gt;</div><div class=\"line\">Collector&lt;T, ?, M&gt; toMap(Function&lt;? <span class=\"keyword\">super</span> T, ? extends K&gt; keyMapper,</div><div class=\"line\">                            Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; valueMapper,</div><div class=\"line\">                            BinaryOperator&lt;U&gt; mergeFunction,</div><div class=\"line\">                            Supplier&lt;M&gt; mapSupplier) &#123;</div><div class=\"line\">    BiConsumer&lt;M, T&gt; accumulator</div><div class=\"line\">            = (map, element) -&gt; map.merge(keyMapper.apply(element),</div><div class=\"line\">                                          valueMapper.apply(element), mergeFunction);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Function作为转换函数提供了key和value的转换,BinaryOperator提供了重复key合并策略,mapSupplier则表示最终收集到的容器.那么使用就很简单了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">HashMap&lt;Character, String&gt; map = testData.stream()</div><div class=\"line\">        .collect(Collectors.toMap(x -&gt; x.charAt(<span class=\"number\">0</span>), Function.identity()</div><div class=\"line\">            , (v1, v2) -&gt; v2, HashMap::<span class=\"keyword\">new</span>));</div></pre></td></tr></table></figure></p>\n<p>其他还有很多方法,就不一一叙述,主要是了解这些接口,知道他所拥有的功能,以及组合的意义,即可很好的掌握Java中的函数式编程.</p>\n"},{"title":"Java8学习记录(二)-Stream原理","date":"2017-05-20T11:06:51.000Z","_content":"推荐一篇博文,很好的介绍了Stream的原理.本文对其进行一些补充更加详细的讲解.\n> 作者: 李豪\n> 地址: https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md\n\n需求:\n>从`\"张三\",\"李四\",\"王二\",\"张四五\"`中选出以`张`开头的名字,然后从再从中选出名字最长的一个,输出其长度.\n\n### 1.一种直白的实现\n![](http://oobu4m7ko.bkt.clouddn.com/1497141037.png?imageMogr2/thumbnail/!70p)\n\n**缺点**:\n1. 迭代次数过多\n2. 频繁产生中间结果,性能无法接受\n\n**实际想要的效果**:\n平常的写法:\n```java    \nint longest = 0;\nfor(String str : strings){\n    if(str.startsWith(\"张\")){// 1. filter(), 保留以张开头的字符串\n        int len = str.length();// 2. mapToInt(), 转换成长度\n        longest = Math.max(len, longest);// 3. max(), 保留最长的长度\n    }\n}\n```\nStream的做法:\n```java\n  Stream.of(\"张三\",\"李四\",\"王二\",\"张四五\")\n        .filter(x -> x.startsWith(\"张\"))\n        .mapToInt(String::length)\n        .max()\n        .ifPresent(System.out::println);\n```\n\n### 2.Stream是怎么做到的?\n\n**Stream的操作分类**:\n\n中间操作:\n        - 有状态 sorted(),必须等上一步操作完拿到全部元素后才可操作\n        - 无状态 filter(),该操作的元素不受上一步操作的影响\n```java\n  list.stream().filter(x -> x.startWith(\"张\").map(x -> x.length())\n  list.stream().filter(x -> x.startWith(\"张\").sorted().map(x -> x.length())\n```\n终端操作:\n        - 短路操作findFirst(),找到一个则返回\n        - 非短路操作forEach(),遍历全部元素\n\nStream做到的是对于多次调用合并到一次迭代中处理完所有的调用方式.换句话说就是解决了上述的两个缺点.大概思路是记录下每一步的操作,然后终端操作时对其迭代依次执行每一步的操作,最后再一次循环中处理.\n\n**问题**:\n1. 操作是如何记录下来的?\n2. 操作是如何叠加的?\n3. 叠加完如何执行的?\n4. 执行完如何收集结果的?\n\n- - - - -\nStream结构示意图:\n\n![](http://oobu4m7ko.bkt.clouddn.com/1497146463.png?imageMogr2/thumbnail/!70p)\n\n\n示例代码:\n```java\n    List<String> data = new ArrayList<>();\n    data.add(\"张三\");\n    data.add(\"李四\");\n    data.add(\"王三\");\n    data.add(\"马六\");\n\n    data.stream()\n        .filter(x -> x.length() == 2)\n        .map(x -> x.replace(\"三\",\"五\"))\n        .sorted()\n        .filter(x -> x.contains(\"五\"))\n        .forEach(System.out::println);\n```\n\n#### 1. 操作是如何记录下来的?\n1. Head记录Stream起始操作\n2. StatelessOp记录中间操作\n3. StatefulOp记录终端操作\n这三个操作实例化会指向其父类`AbstractPipeline`,也就是在`AbstractPipeline`中建立了双向链表\n\n对于Head\n```java\n    AbstractPipeline(Spliterator<?> source,\n                     int sourceFlags, boolean parallel) {\n        this.previousStage = null; //首操作上一步为null    \n        this.sourceSpliterator = source; //数据\n        this.sourceStage = this; //Head操作\n        this.sourceOrOpFlags = sourceFlags & StreamOpFlag.STREAM_MASK;\n        this.combinedFlags = (~(sourceOrOpFlags << 1)) & StreamOpFlag.INITIAL_OPS_VALUE;\n        this.depth = 0;\n        this.parallel = parallel;\n    }\n```\n对于其他Stage:\n```java    \n    AbstractPipeline(AbstractPipeline<?, E_IN, ?> previousStage, int opFlags) {\n        if (previousStage.linkedOrConsumed)\n            throw new IllegalStateException(MSG_STREAM_LINKED);\n        previousStage.linkedOrConsumed = true;\n        //双向链表的建立\n        previousStage.nextStage = this;\n        this.previousStage = previousStage;\n        this.sourceStage = previousStage.sourceStage;        \n        this.depth = previousStage.depth + 1;        \n        \n        this.sourceOrOpFlags = opFlags & StreamOpFlag.OP_MASK;\n        this.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);\n        if (opIsStateful())\n            sourceStage.sourceAnyStateful = true;\n    }\n```\n<img src=\"http://oobu4m7ko.bkt.clouddn.com/1497148591.png?imageMogr2/thumbnail/!60p\" height=500 align=right >\n调用过程如此用双向链表串联起来,每一步都得知其上一步与下一步的操作.\n\n- - - - -\n#### 2.操作是如何叠加的?\n`Sink<T>`接口:\n1. void begin(long size),循环开始前调用,通知每个Stage做好准备\n2. void end(),循环结束时调用,依次调用每个Stage的end方法,处理结果\n3. boolean cancellationRequested(),判断是否可以提前结束循环\n4. void accept(T value),每一步的处理\n\n例Filter:\n```java\n    @Override\n    public final Stream<P_OUT> filter(Predicate<? super P_OUT> predicate) {\n        Objects.requireNonNull(predicate);\n        return new StatelessOp<P_OUT, P_OUT>(this, StreamShape.REFERENCE,\n                                     StreamOpFlag.NOT_SIZED) {\n            @Override\n            Sink<P_OUT> opWrapSink(int flags, Sink<P_OUT> sink) {\n                return new Sink.ChainedReference<P_OUT, P_OUT>(sink) {\n                    @Override\n                    public void begin(long size) {\n                        downstream.begin(-1);\n                    }\n\n                    @Override\n                    public void accept(P_OUT u) {\n                        //条件成立则传递给下一个操作,也因为如此所以有状态的操作必须放到\n                        //end方法里面\n                        if (predicate.test(u))\n                            downstream.accept(u);\n                    }\n                };\n            }\n        };\n    }\n```\n再例如sorted():\n```java    \n        @Override\n        public void begin(long size) {\n            if (size >= Nodes.MAX_ARRAY_SIZE)\n                throw new IllegalArgumentException(Nodes.BAD_SIZE);\n            list = (size >= 0) ? new ArrayList<T>((int) size) : new ArrayList<T>();\n        }\n        @Override\n        public void end() {\n            list.sort(comparator);\n            downstream.begin(list.size());\n            if (!cancellationWasRequested) {\n                list.forEach(downstream::accept);\n            }\n            else {\n                for (T t : list) {\n                    if (downstream.cancellationRequested()) break;\n                    downstream.accept(t);\n                }\n            }\n            downstream.end();\n            list = null;\n        }\n        @Override\n        public void accept(T t) {\n            list.add(t);\n        }\n```\n![](http://oobu4m7ko.bkt.clouddn.com/1497157056.png?imageMogr2/thumbnail/!70p)\n#### 叠加后如何执行?\n执行操作是由终端操作来触发的,例如foreach操作\n```java\n    @Override\n    public void forEach(Consumer<? super P_OUT> action) {\n        //evaluate就是开关,一旦调用就立即执行整个Stream    \n        evaluate(ForEachOps.makeRef(action, false));\n    }\n```\n执行前会对操作从末尾到起始反向包裹起来,得到调用链\n```java\n    //这个Sink是终端操作所对应的Sink\n    final <P_IN> Sink<P_IN> wrapSink(Sink<E_OUT> sink) {\n        Objects.requireNonNull(sink);\n\n        for ( AbstractPipeline p=AbstractPipeline.this; p.depth > 0; p=p.previousStage) {\n            sink = p.opWrapSink(p.previousStage.combinedFlags, sink);\n        }\n        return (Sink<P_IN>) sink;\n    }\n```\n![](http://oobu4m7ko.bkt.clouddn.com/1497156134.png?imageMogr2/thumbnail/!70p)\n\n```java\n    @Override\n    final <P_IN> void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator) {\n        Objects.requireNonNull(wrappedSink);\n\n        if (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) {\n            //依次执行调用链\n            wrappedSink.begin(spliterator.getExactSizeIfKnown());\n            spliterator.forEachRemaining(wrappedSink);\n            wrappedSink.end();\n        }\n        else {\n            copyIntoWithCancel(wrappedSink, spliterator);\n        }\n    }\n```\n#### 有状态的中间操作何时执行?\n例如sorted()操作,其依赖上一次操作的结果集,按照调用链来说结果集必须在accept()调用完才会产生.那也就说明sorted操作需要在end中,然后再重新开启调用链.\n\n**sorted的end方法**:\n```java\n       @Override\n        public void end() {\n            list.sort(comparator);\n            downstream.begin(list.size());\n            if (!cancellationWasRequested) {\n                list.forEach(downstream::accept);\n            }\n            else {\n                for (T t : list) {\n                    if (downstream.cancellationRequested()) break;\n                    downstream.accept(t);\n                }\n            }\n            downstream.end();\n            list = null;\n        }\n```\n那么就相当于sorted给原有操作断路了一次,然后又重新接上,再次遍历.\n![](http://oobu4m7ko.bkt.clouddn.com/1497158292.png?imageMogr2/thumbnail/!70p)\n\n#### 如何收集到结果?\nforeach是不需要收集到结果的,但是对于collect这样的操作是需要拿到最终end产生的结果.end产生的结果在最后一个Sink中,这样的操作最终都会提供一个取出数据的get方法.\n```java\n       @Override\n        public <P_IN> R evaluateSequential(PipelineHelper<T> helper,\n                                           Spliterator<P_IN> spliterator) {\n            return helper.wrapAndCopyInto(makeSink(), spliterator).get();\n        }\n```\n如此拿到数据返回\n\n\n\n\n\n\n","source":"_posts/java/Java8学习记录(二)-Stream原理.md","raw":"---\ntitle: Java8学习记录(二)-Stream原理\ntags:\n  -  java8\ncategories:  java \ndate: 2017-05-20 19:06:51\n---\n推荐一篇博文,很好的介绍了Stream的原理.本文对其进行一些补充更加详细的讲解.\n> 作者: 李豪\n> 地址: https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md\n\n需求:\n>从`\"张三\",\"李四\",\"王二\",\"张四五\"`中选出以`张`开头的名字,然后从再从中选出名字最长的一个,输出其长度.\n\n### 1.一种直白的实现\n![](http://oobu4m7ko.bkt.clouddn.com/1497141037.png?imageMogr2/thumbnail/!70p)\n\n**缺点**:\n1. 迭代次数过多\n2. 频繁产生中间结果,性能无法接受\n\n**实际想要的效果**:\n平常的写法:\n```java    \nint longest = 0;\nfor(String str : strings){\n    if(str.startsWith(\"张\")){// 1. filter(), 保留以张开头的字符串\n        int len = str.length();// 2. mapToInt(), 转换成长度\n        longest = Math.max(len, longest);// 3. max(), 保留最长的长度\n    }\n}\n```\nStream的做法:\n```java\n  Stream.of(\"张三\",\"李四\",\"王二\",\"张四五\")\n        .filter(x -> x.startsWith(\"张\"))\n        .mapToInt(String::length)\n        .max()\n        .ifPresent(System.out::println);\n```\n\n### 2.Stream是怎么做到的?\n\n**Stream的操作分类**:\n\n中间操作:\n        - 有状态 sorted(),必须等上一步操作完拿到全部元素后才可操作\n        - 无状态 filter(),该操作的元素不受上一步操作的影响\n```java\n  list.stream().filter(x -> x.startWith(\"张\").map(x -> x.length())\n  list.stream().filter(x -> x.startWith(\"张\").sorted().map(x -> x.length())\n```\n终端操作:\n        - 短路操作findFirst(),找到一个则返回\n        - 非短路操作forEach(),遍历全部元素\n\nStream做到的是对于多次调用合并到一次迭代中处理完所有的调用方式.换句话说就是解决了上述的两个缺点.大概思路是记录下每一步的操作,然后终端操作时对其迭代依次执行每一步的操作,最后再一次循环中处理.\n\n**问题**:\n1. 操作是如何记录下来的?\n2. 操作是如何叠加的?\n3. 叠加完如何执行的?\n4. 执行完如何收集结果的?\n\n- - - - -\nStream结构示意图:\n\n![](http://oobu4m7ko.bkt.clouddn.com/1497146463.png?imageMogr2/thumbnail/!70p)\n\n\n示例代码:\n```java\n    List<String> data = new ArrayList<>();\n    data.add(\"张三\");\n    data.add(\"李四\");\n    data.add(\"王三\");\n    data.add(\"马六\");\n\n    data.stream()\n        .filter(x -> x.length() == 2)\n        .map(x -> x.replace(\"三\",\"五\"))\n        .sorted()\n        .filter(x -> x.contains(\"五\"))\n        .forEach(System.out::println);\n```\n\n#### 1. 操作是如何记录下来的?\n1. Head记录Stream起始操作\n2. StatelessOp记录中间操作\n3. StatefulOp记录终端操作\n这三个操作实例化会指向其父类`AbstractPipeline`,也就是在`AbstractPipeline`中建立了双向链表\n\n对于Head\n```java\n    AbstractPipeline(Spliterator<?> source,\n                     int sourceFlags, boolean parallel) {\n        this.previousStage = null; //首操作上一步为null    \n        this.sourceSpliterator = source; //数据\n        this.sourceStage = this; //Head操作\n        this.sourceOrOpFlags = sourceFlags & StreamOpFlag.STREAM_MASK;\n        this.combinedFlags = (~(sourceOrOpFlags << 1)) & StreamOpFlag.INITIAL_OPS_VALUE;\n        this.depth = 0;\n        this.parallel = parallel;\n    }\n```\n对于其他Stage:\n```java    \n    AbstractPipeline(AbstractPipeline<?, E_IN, ?> previousStage, int opFlags) {\n        if (previousStage.linkedOrConsumed)\n            throw new IllegalStateException(MSG_STREAM_LINKED);\n        previousStage.linkedOrConsumed = true;\n        //双向链表的建立\n        previousStage.nextStage = this;\n        this.previousStage = previousStage;\n        this.sourceStage = previousStage.sourceStage;        \n        this.depth = previousStage.depth + 1;        \n        \n        this.sourceOrOpFlags = opFlags & StreamOpFlag.OP_MASK;\n        this.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);\n        if (opIsStateful())\n            sourceStage.sourceAnyStateful = true;\n    }\n```\n<img src=\"http://oobu4m7ko.bkt.clouddn.com/1497148591.png?imageMogr2/thumbnail/!60p\" height=500 align=right >\n调用过程如此用双向链表串联起来,每一步都得知其上一步与下一步的操作.\n\n- - - - -\n#### 2.操作是如何叠加的?\n`Sink<T>`接口:\n1. void begin(long size),循环开始前调用,通知每个Stage做好准备\n2. void end(),循环结束时调用,依次调用每个Stage的end方法,处理结果\n3. boolean cancellationRequested(),判断是否可以提前结束循环\n4. void accept(T value),每一步的处理\n\n例Filter:\n```java\n    @Override\n    public final Stream<P_OUT> filter(Predicate<? super P_OUT> predicate) {\n        Objects.requireNonNull(predicate);\n        return new StatelessOp<P_OUT, P_OUT>(this, StreamShape.REFERENCE,\n                                     StreamOpFlag.NOT_SIZED) {\n            @Override\n            Sink<P_OUT> opWrapSink(int flags, Sink<P_OUT> sink) {\n                return new Sink.ChainedReference<P_OUT, P_OUT>(sink) {\n                    @Override\n                    public void begin(long size) {\n                        downstream.begin(-1);\n                    }\n\n                    @Override\n                    public void accept(P_OUT u) {\n                        //条件成立则传递给下一个操作,也因为如此所以有状态的操作必须放到\n                        //end方法里面\n                        if (predicate.test(u))\n                            downstream.accept(u);\n                    }\n                };\n            }\n        };\n    }\n```\n再例如sorted():\n```java    \n        @Override\n        public void begin(long size) {\n            if (size >= Nodes.MAX_ARRAY_SIZE)\n                throw new IllegalArgumentException(Nodes.BAD_SIZE);\n            list = (size >= 0) ? new ArrayList<T>((int) size) : new ArrayList<T>();\n        }\n        @Override\n        public void end() {\n            list.sort(comparator);\n            downstream.begin(list.size());\n            if (!cancellationWasRequested) {\n                list.forEach(downstream::accept);\n            }\n            else {\n                for (T t : list) {\n                    if (downstream.cancellationRequested()) break;\n                    downstream.accept(t);\n                }\n            }\n            downstream.end();\n            list = null;\n        }\n        @Override\n        public void accept(T t) {\n            list.add(t);\n        }\n```\n![](http://oobu4m7ko.bkt.clouddn.com/1497157056.png?imageMogr2/thumbnail/!70p)\n#### 叠加后如何执行?\n执行操作是由终端操作来触发的,例如foreach操作\n```java\n    @Override\n    public void forEach(Consumer<? super P_OUT> action) {\n        //evaluate就是开关,一旦调用就立即执行整个Stream    \n        evaluate(ForEachOps.makeRef(action, false));\n    }\n```\n执行前会对操作从末尾到起始反向包裹起来,得到调用链\n```java\n    //这个Sink是终端操作所对应的Sink\n    final <P_IN> Sink<P_IN> wrapSink(Sink<E_OUT> sink) {\n        Objects.requireNonNull(sink);\n\n        for ( AbstractPipeline p=AbstractPipeline.this; p.depth > 0; p=p.previousStage) {\n            sink = p.opWrapSink(p.previousStage.combinedFlags, sink);\n        }\n        return (Sink<P_IN>) sink;\n    }\n```\n![](http://oobu4m7ko.bkt.clouddn.com/1497156134.png?imageMogr2/thumbnail/!70p)\n\n```java\n    @Override\n    final <P_IN> void copyInto(Sink<P_IN> wrappedSink, Spliterator<P_IN> spliterator) {\n        Objects.requireNonNull(wrappedSink);\n\n        if (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) {\n            //依次执行调用链\n            wrappedSink.begin(spliterator.getExactSizeIfKnown());\n            spliterator.forEachRemaining(wrappedSink);\n            wrappedSink.end();\n        }\n        else {\n            copyIntoWithCancel(wrappedSink, spliterator);\n        }\n    }\n```\n#### 有状态的中间操作何时执行?\n例如sorted()操作,其依赖上一次操作的结果集,按照调用链来说结果集必须在accept()调用完才会产生.那也就说明sorted操作需要在end中,然后再重新开启调用链.\n\n**sorted的end方法**:\n```java\n       @Override\n        public void end() {\n            list.sort(comparator);\n            downstream.begin(list.size());\n            if (!cancellationWasRequested) {\n                list.forEach(downstream::accept);\n            }\n            else {\n                for (T t : list) {\n                    if (downstream.cancellationRequested()) break;\n                    downstream.accept(t);\n                }\n            }\n            downstream.end();\n            list = null;\n        }\n```\n那么就相当于sorted给原有操作断路了一次,然后又重新接上,再次遍历.\n![](http://oobu4m7ko.bkt.clouddn.com/1497158292.png?imageMogr2/thumbnail/!70p)\n\n#### 如何收集到结果?\nforeach是不需要收集到结果的,但是对于collect这样的操作是需要拿到最终end产生的结果.end产生的结果在最后一个Sink中,这样的操作最终都会提供一个取出数据的get方法.\n```java\n       @Override\n        public <P_IN> R evaluateSequential(PipelineHelper<T> helper,\n                                           Spliterator<P_IN> spliterator) {\n            return helper.wrapAndCopyInto(makeSink(), spliterator).get();\n        }\n```\n如此拿到数据返回\n\n\n\n\n\n\n","slug":"java/Java8学习记录(二)-Stream原理","published":1,"updated":"2017-06-28T02:47:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7wx000e6wz5i2e4hswm","content":"<p>推荐一篇博文,很好的介绍了Stream的原理.本文对其进行一些补充更加详细的讲解.</p>\n<blockquote>\n<p>作者: 李豪<br>地址: <a href=\"https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md\" target=\"_blank\" rel=\"external\">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md</a></p>\n</blockquote>\n<p>需求:</p>\n<blockquote>\n<p>从<code>&quot;张三&quot;,&quot;李四&quot;,&quot;王二&quot;,&quot;张四五&quot;</code>中选出以<code>张</code>开头的名字,然后从再从中选出名字最长的一个,输出其长度.</p>\n</blockquote>\n<h3 id=\"1-一种直白的实现\"><a href=\"#1-一种直白的实现\" class=\"headerlink\" title=\"1.一种直白的实现\"></a>1.一种直白的实现</h3><p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497141037.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p><strong>缺点</strong>:</p>\n<ol>\n<li>迭代次数过多</li>\n<li>频繁产生中间结果,性能无法接受</li>\n</ol>\n<p><strong>实际想要的效果</strong>:<br>平常的写法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(String str : strings)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(str.startsWith(<span class=\"string\">\"张\"</span>))&#123;<span class=\"comment\">// 1. filter(), 保留以张开头的字符串</span></div><div class=\"line\">        <span class=\"keyword\">int</span> len = str.length();<span class=\"comment\">// 2. mapToInt(), 转换成长度</span></div><div class=\"line\">        longest = Math.max(len, longest);<span class=\"comment\">// 3. max(), 保留最长的长度</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Stream的做法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream.of(<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"王二\"</span>,<span class=\"string\">\"张四五\"</span>)</div><div class=\"line\">      .filter(x -&gt; x.startsWith(<span class=\"string\">\"张\"</span>))</div><div class=\"line\">      .mapToInt(String::length)</div><div class=\"line\">      .max()</div><div class=\"line\">      .ifPresent(System.out::println);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Stream是怎么做到的\"><a href=\"#2-Stream是怎么做到的\" class=\"headerlink\" title=\"2.Stream是怎么做到的?\"></a>2.Stream是怎么做到的?</h3><p><strong>Stream的操作分类</strong>:</p>\n<p>中间操作:</p>\n<pre><code>- 有状态 sorted(),必须等上一步操作完拿到全部元素后才可操作\n- 无状态 filter(),该操作的元素不受上一步操作的影响\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream().filter(x -&gt; x.startWith(<span class=\"string\">\"张\"</span>).map(x -&gt; x.length())</div><div class=\"line\">list.stream().filter(x -&gt; x.startWith(<span class=\"string\">\"张\"</span>).sorted().map(x -&gt; x.length())</div></pre></td></tr></table></figure>\n<p>终端操作:</p>\n<pre><code>- 短路操作findFirst(),找到一个则返回\n- 非短路操作forEach(),遍历全部元素\n</code></pre><p>Stream做到的是对于多次调用合并到一次迭代中处理完所有的调用方式.换句话说就是解决了上述的两个缺点.大概思路是记录下每一步的操作,然后终端操作时对其迭代依次执行每一步的操作,最后再一次循环中处理.</p>\n<p><strong>问题</strong>:</p>\n<ol>\n<li>操作是如何记录下来的?</li>\n<li>操作是如何叠加的?</li>\n<li>叠加完如何执行的?</li>\n<li>执行完如何收集结果的?</li>\n</ol>\n<hr>\n<p>Stream结构示意图:</p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497146463.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">data.add(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"王三\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"马六\"</span>);</div><div class=\"line\"></div><div class=\"line\">data.stream()</div><div class=\"line\">    .filter(x -&gt; x.length() == <span class=\"number\">2</span>)</div><div class=\"line\">    .map(x -&gt; x.replace(<span class=\"string\">\"三\"</span>,<span class=\"string\">\"五\"</span>))</div><div class=\"line\">    .sorted()</div><div class=\"line\">    .filter(x -&gt; x.contains(<span class=\"string\">\"五\"</span>))</div><div class=\"line\">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-操作是如何记录下来的\"><a href=\"#1-操作是如何记录下来的\" class=\"headerlink\" title=\"1. 操作是如何记录下来的?\"></a>1. 操作是如何记录下来的?</h4><ol>\n<li>Head记录Stream起始操作</li>\n<li>StatelessOp记录中间操作</li>\n<li>StatefulOp记录终端操作<br>这三个操作实例化会指向其父类<code>AbstractPipeline</code>,也就是在<code>AbstractPipeline</code>中建立了双向链表</li>\n</ol>\n<p>对于Head<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbstractPipeline(Spliterator&lt;?&gt; source,</div><div class=\"line\">                 <span class=\"keyword\">int</span> sourceFlags, <span class=\"keyword\">boolean</span> parallel) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.previousStage = <span class=\"keyword\">null</span>; <span class=\"comment\">//首操作上一步为null    </span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceSpliterator = source; <span class=\"comment\">//数据</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceStage = <span class=\"keyword\">this</span>; <span class=\"comment\">//Head操作</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceOrOpFlags = sourceFlags &amp; StreamOpFlag.STREAM_MASK;</div><div class=\"line\">    <span class=\"keyword\">this</span>.combinedFlags = (~(sourceOrOpFlags &lt;&lt; <span class=\"number\">1</span>)) &amp; StreamOpFlag.INITIAL_OPS_VALUE;</div><div class=\"line\">    <span class=\"keyword\">this</span>.depth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.parallel = parallel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于其他Stage:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbstractPipeline(AbstractPipeline&lt;?, E_IN, ?&gt; previousStage, <span class=\"keyword\">int</span> opFlags) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (previousStage.linkedOrConsumed)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(MSG_STREAM_LINKED);</div><div class=\"line\">    previousStage.linkedOrConsumed = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"comment\">//双向链表的建立</span></div><div class=\"line\">    previousStage.nextStage = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.previousStage = previousStage;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceStage = previousStage.sourceStage;        </div><div class=\"line\">    <span class=\"keyword\">this</span>.depth = previousStage.depth + <span class=\"number\">1</span>;        </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceOrOpFlags = opFlags &amp; StreamOpFlag.OP_MASK;</div><div class=\"line\">    <span class=\"keyword\">this</span>.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);</div><div class=\"line\">    <span class=\"keyword\">if</span> (opIsStateful())</div><div class=\"line\">        sourceStage.sourceAnyStateful = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497148591.png?imageMogr2/thumbnail/!60p\" height=\"500\" align=\"right\"><br>调用过程如此用双向链表串联起来,每一步都得知其上一步与下一步的操作.</p>\n<hr>\n<h4 id=\"2-操作是如何叠加的\"><a href=\"#2-操作是如何叠加的\" class=\"headerlink\" title=\"2.操作是如何叠加的?\"></a>2.操作是如何叠加的?</h4><p><code>Sink&lt;T&gt;</code>接口:</p>\n<ol>\n<li>void begin(long size),循环开始前调用,通知每个Stage做好准备</li>\n<li>void end(),循环结束时调用,依次调用每个Stage的end方法,处理结果</li>\n<li>boolean cancellationRequested(),判断是否可以提前结束循环</li>\n<li>void accept(T value),每一步的处理</li>\n</ol>\n<p>例Filter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Stream&lt;P_OUT&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> P_OUT&gt; predicate)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(predicate);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StatelessOp&lt;P_OUT, P_OUT&gt;(<span class=\"keyword\">this</span>, StreamShape.REFERENCE,</div><div class=\"line\">                                 StreamOpFlag.NOT_SIZED) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\">Sink&lt;P_OUT&gt; <span class=\"title\">opWrapSink</span><span class=\"params\">(<span class=\"keyword\">int</span> flags, Sink&lt;P_OUT&gt; sink)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Sink.ChainedReference&lt;P_OUT, P_OUT&gt;(sink) &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;</div><div class=\"line\">                    downstream.begin(-<span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(P_OUT u)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">//条件成立则传递给下一个操作,也因为如此所以有状态的操作必须放到</span></div><div class=\"line\">                    <span class=\"comment\">//end方法里面</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (predicate.test(u))</div><div class=\"line\">                        downstream.accept(u);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再例如sorted():<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= Nodes.MAX_ARRAY_SIZE)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(Nodes.BAD_SIZE);</div><div class=\"line\">    list = (size &gt;= <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> ArrayList&lt;T&gt;((<span class=\"keyword\">int</span>) size) : <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    list.sort(comparator);</div><div class=\"line\">    downstream.begin(list.size());</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cancellationWasRequested) &#123;</div><div class=\"line\">        list.forEach(downstream::accept);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (downstream.cancellationRequested()) <span class=\"keyword\">break</span>;</div><div class=\"line\">            downstream.accept(t);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    downstream.end();</div><div class=\"line\">    list = <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">    list.add(t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497157056.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"叠加后如何执行\"><a href=\"#叠加后如何执行\" class=\"headerlink\" title=\"叠加后如何执行?\"></a>叠加后如何执行?</h4><p>执行操作是由终端操作来触发的,例如foreach操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> P_OUT&gt; action)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//evaluate就是开关,一旦调用就立即执行整个Stream    </span></div><div class=\"line\">    evaluate(ForEachOps.makeRef(action, <span class=\"keyword\">false</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行前会对操作从末尾到起始反向包裹起来,得到调用链<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这个Sink是终端操作所对应的Sink</span></div><div class=\"line\"><span class=\"keyword\">final</span> &lt;P_IN&gt; <span class=\"function\">Sink&lt;P_IN&gt; <span class=\"title\">wrapSink</span><span class=\"params\">(Sink&lt;E_OUT&gt; sink)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(sink);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> ( AbstractPipeline p=AbstractPipeline.<span class=\"keyword\">this</span>; p.depth &gt; <span class=\"number\">0</span>; p=p.previousStage) &#123;</div><div class=\"line\">        sink = p.opWrapSink(p.previousStage.combinedFlags, sink);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (Sink&lt;P_IN&gt;) sink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497156134.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">final</span> &lt;P_IN&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyInto</span><span class=\"params\">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(wrappedSink);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) &#123;</div><div class=\"line\">        <span class=\"comment\">//依次执行调用链</span></div><div class=\"line\">        wrappedSink.begin(spliterator.getExactSizeIfKnown());</div><div class=\"line\">        spliterator.forEachRemaining(wrappedSink);</div><div class=\"line\">        wrappedSink.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        copyIntoWithCancel(wrappedSink, spliterator);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"有状态的中间操作何时执行\"><a href=\"#有状态的中间操作何时执行\" class=\"headerlink\" title=\"有状态的中间操作何时执行?\"></a>有状态的中间操作何时执行?</h4><p>例如sorted()操作,其依赖上一次操作的结果集,按照调用链来说结果集必须在accept()调用完才会产生.那也就说明sorted操作需要在end中,然后再重新开启调用链.</p>\n<p><strong>sorted的end方法</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     list.sort(comparator);</div><div class=\"line\">     downstream.begin(list.size());</div><div class=\"line\">     <span class=\"keyword\">if</span> (!cancellationWasRequested) &#123;</div><div class=\"line\">         list.forEach(downstream::accept);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">for</span> (T t : list) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (downstream.cancellationRequested()) <span class=\"keyword\">break</span>;</div><div class=\"line\">             downstream.accept(t);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     downstream.end();</div><div class=\"line\">     list = <span class=\"keyword\">null</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>那么就相当于sorted给原有操作断路了一次,然后又重新接上,再次遍历.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497158292.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"如何收集到结果\"><a href=\"#如何收集到结果\" class=\"headerlink\" title=\"如何收集到结果?\"></a>如何收集到结果?</h4><p>foreach是不需要收集到结果的,但是对于collect这样的操作是需要拿到最终end产生的结果.end产生的结果在最后一个Sink中,这样的操作最终都会提供一个取出数据的get方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateSequential</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</span></span></div><div class=\"line\">                                    Spliterator&lt;P_IN&gt; spliterator) &#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> helper.wrapAndCopyInto(makeSink(), spliterator).get();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>如此拿到数据返回</p>\n","excerpt":"","more":"<p>推荐一篇博文,很好的介绍了Stream的原理.本文对其进行一些补充更加详细的讲解.</p>\n<blockquote>\n<p>作者: 李豪<br>地址: <a href=\"https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md\">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md</a></p>\n</blockquote>\n<p>需求:</p>\n<blockquote>\n<p>从<code>&quot;张三&quot;,&quot;李四&quot;,&quot;王二&quot;,&quot;张四五&quot;</code>中选出以<code>张</code>开头的名字,然后从再从中选出名字最长的一个,输出其长度.</p>\n</blockquote>\n<h3 id=\"1-一种直白的实现\"><a href=\"#1-一种直白的实现\" class=\"headerlink\" title=\"1.一种直白的实现\"></a>1.一种直白的实现</h3><p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497141037.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p><strong>缺点</strong>:</p>\n<ol>\n<li>迭代次数过多</li>\n<li>频繁产生中间结果,性能无法接受</li>\n</ol>\n<p><strong>实际想要的效果</strong>:<br>平常的写法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> longest = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(String str : strings)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(str.startsWith(<span class=\"string\">\"张\"</span>))&#123;<span class=\"comment\">// 1. filter(), 保留以张开头的字符串</span></div><div class=\"line\">        <span class=\"keyword\">int</span> len = str.length();<span class=\"comment\">// 2. mapToInt(), 转换成长度</span></div><div class=\"line\">        longest = Math.max(len, longest);<span class=\"comment\">// 3. max(), 保留最长的长度</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Stream的做法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream.of(<span class=\"string\">\"张三\"</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"王二\"</span>,<span class=\"string\">\"张四五\"</span>)</div><div class=\"line\">      .filter(x -&gt; x.startsWith(<span class=\"string\">\"张\"</span>))</div><div class=\"line\">      .mapToInt(String::length)</div><div class=\"line\">      .max()</div><div class=\"line\">      .ifPresent(System.out::println);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Stream是怎么做到的\"><a href=\"#2-Stream是怎么做到的\" class=\"headerlink\" title=\"2.Stream是怎么做到的?\"></a>2.Stream是怎么做到的?</h3><p><strong>Stream的操作分类</strong>:</p>\n<p>中间操作:</p>\n<pre><code>- 有状态 sorted(),必须等上一步操作完拿到全部元素后才可操作\n- 无状态 filter(),该操作的元素不受上一步操作的影响\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream().filter(x -&gt; x.startWith(<span class=\"string\">\"张\"</span>).map(x -&gt; x.length())</div><div class=\"line\">list.stream().filter(x -&gt; x.startWith(<span class=\"string\">\"张\"</span>).sorted().map(x -&gt; x.length())</div></pre></td></tr></table></figure>\n<p>终端操作:</p>\n<pre><code>- 短路操作findFirst(),找到一个则返回\n- 非短路操作forEach(),遍历全部元素\n</code></pre><p>Stream做到的是对于多次调用合并到一次迭代中处理完所有的调用方式.换句话说就是解决了上述的两个缺点.大概思路是记录下每一步的操作,然后终端操作时对其迭代依次执行每一步的操作,最后再一次循环中处理.</p>\n<p><strong>问题</strong>:</p>\n<ol>\n<li>操作是如何记录下来的?</li>\n<li>操作是如何叠加的?</li>\n<li>叠加完如何执行的?</li>\n<li>执行完如何收集结果的?</li>\n</ol>\n<hr>\n<p>Stream结构示意图:</p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497146463.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>示例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">data.add(<span class=\"string\">\"张三\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"李四\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"王三\"</span>);</div><div class=\"line\">data.add(<span class=\"string\">\"马六\"</span>);</div><div class=\"line\"></div><div class=\"line\">data.stream()</div><div class=\"line\">    .filter(x -&gt; x.length() == <span class=\"number\">2</span>)</div><div class=\"line\">    .map(x -&gt; x.replace(<span class=\"string\">\"三\"</span>,<span class=\"string\">\"五\"</span>))</div><div class=\"line\">    .sorted()</div><div class=\"line\">    .filter(x -&gt; x.contains(<span class=\"string\">\"五\"</span>))</div><div class=\"line\">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-操作是如何记录下来的\"><a href=\"#1-操作是如何记录下来的\" class=\"headerlink\" title=\"1. 操作是如何记录下来的?\"></a>1. 操作是如何记录下来的?</h4><ol>\n<li>Head记录Stream起始操作</li>\n<li>StatelessOp记录中间操作</li>\n<li>StatefulOp记录终端操作<br>这三个操作实例化会指向其父类<code>AbstractPipeline</code>,也就是在<code>AbstractPipeline</code>中建立了双向链表</li>\n</ol>\n<p>对于Head<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbstractPipeline(Spliterator&lt;?&gt; source,</div><div class=\"line\">                 <span class=\"keyword\">int</span> sourceFlags, <span class=\"keyword\">boolean</span> parallel) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.previousStage = <span class=\"keyword\">null</span>; <span class=\"comment\">//首操作上一步为null    </span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceSpliterator = source; <span class=\"comment\">//数据</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceStage = <span class=\"keyword\">this</span>; <span class=\"comment\">//Head操作</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceOrOpFlags = sourceFlags &amp; StreamOpFlag.STREAM_MASK;</div><div class=\"line\">    <span class=\"keyword\">this</span>.combinedFlags = (~(sourceOrOpFlags &lt;&lt; <span class=\"number\">1</span>)) &amp; StreamOpFlag.INITIAL_OPS_VALUE;</div><div class=\"line\">    <span class=\"keyword\">this</span>.depth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.parallel = parallel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于其他Stage:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">AbstractPipeline(AbstractPipeline&lt;?, E_IN, ?&gt; previousStage, <span class=\"keyword\">int</span> opFlags) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (previousStage.linkedOrConsumed)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(MSG_STREAM_LINKED);</div><div class=\"line\">    previousStage.linkedOrConsumed = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"comment\">//双向链表的建立</span></div><div class=\"line\">    previousStage.nextStage = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.previousStage = previousStage;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceStage = previousStage.sourceStage;        </div><div class=\"line\">    <span class=\"keyword\">this</span>.depth = previousStage.depth + <span class=\"number\">1</span>;        </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">this</span>.sourceOrOpFlags = opFlags &amp; StreamOpFlag.OP_MASK;</div><div class=\"line\">    <span class=\"keyword\">this</span>.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);</div><div class=\"line\">    <span class=\"keyword\">if</span> (opIsStateful())</div><div class=\"line\">        sourceStage.sourceAnyStateful = <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497148591.png?imageMogr2/thumbnail/!60p\" height=500 align=right ><br>调用过程如此用双向链表串联起来,每一步都得知其上一步与下一步的操作.</p>\n<hr>\n<h4 id=\"2-操作是如何叠加的\"><a href=\"#2-操作是如何叠加的\" class=\"headerlink\" title=\"2.操作是如何叠加的?\"></a>2.操作是如何叠加的?</h4><p><code>Sink&lt;T&gt;</code>接口:</p>\n<ol>\n<li>void begin(long size),循环开始前调用,通知每个Stage做好准备</li>\n<li>void end(),循环结束时调用,依次调用每个Stage的end方法,处理结果</li>\n<li>boolean cancellationRequested(),判断是否可以提前结束循环</li>\n<li>void accept(T value),每一步的处理</li>\n</ol>\n<p>例Filter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Stream&lt;P_OUT&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> P_OUT&gt; predicate)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(predicate);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StatelessOp&lt;P_OUT, P_OUT&gt;(<span class=\"keyword\">this</span>, StreamShape.REFERENCE,</div><div class=\"line\">                                 StreamOpFlag.NOT_SIZED) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\">Sink&lt;P_OUT&gt; <span class=\"title\">opWrapSink</span><span class=\"params\">(<span class=\"keyword\">int</span> flags, Sink&lt;P_OUT&gt; sink)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Sink.ChainedReference&lt;P_OUT, P_OUT&gt;(sink) &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;</div><div class=\"line\">                    downstream.begin(-<span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(P_OUT u)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">//条件成立则传递给下一个操作,也因为如此所以有状态的操作必须放到</span></div><div class=\"line\">                    <span class=\"comment\">//end方法里面</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (predicate.test(u))</div><div class=\"line\">                        downstream.accept(u);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再例如sorted():<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(<span class=\"keyword\">long</span> size)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= Nodes.MAX_ARRAY_SIZE)</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(Nodes.BAD_SIZE);</div><div class=\"line\">    list = (size &gt;= <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> ArrayList&lt;T&gt;((<span class=\"keyword\">int</span>) size) : <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    list.sort(comparator);</div><div class=\"line\">    downstream.begin(list.size());</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cancellationWasRequested) &#123;</div><div class=\"line\">        list.forEach(downstream::accept);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (T t : list) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (downstream.cancellationRequested()) <span class=\"keyword\">break</span>;</div><div class=\"line\">            downstream.accept(t);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    downstream.end();</div><div class=\"line\">    list = <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">    list.add(t);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497157056.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"叠加后如何执行\"><a href=\"#叠加后如何执行\" class=\"headerlink\" title=\"叠加后如何执行?\"></a>叠加后如何执行?</h4><p>执行操作是由终端操作来触发的,例如foreach操作<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> P_OUT&gt; action)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//evaluate就是开关,一旦调用就立即执行整个Stream    </span></div><div class=\"line\">    evaluate(ForEachOps.makeRef(action, <span class=\"keyword\">false</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行前会对操作从末尾到起始反向包裹起来,得到调用链<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这个Sink是终端操作所对应的Sink</span></div><div class=\"line\"><span class=\"keyword\">final</span> &lt;P_IN&gt; <span class=\"function\">Sink&lt;P_IN&gt; <span class=\"title\">wrapSink</span><span class=\"params\">(Sink&lt;E_OUT&gt; sink)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(sink);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> ( AbstractPipeline p=AbstractPipeline.<span class=\"keyword\">this</span>; p.depth &gt; <span class=\"number\">0</span>; p=p.previousStage) &#123;</div><div class=\"line\">        sink = p.opWrapSink(p.previousStage.combinedFlags, sink);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (Sink&lt;P_IN&gt;) sink;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497156134.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">final</span> &lt;P_IN&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">copyInto</span><span class=\"params\">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</div><div class=\"line\">    Objects.requireNonNull(wrappedSink);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) &#123;</div><div class=\"line\">        <span class=\"comment\">//依次执行调用链</span></div><div class=\"line\">        wrappedSink.begin(spliterator.getExactSizeIfKnown());</div><div class=\"line\">        spliterator.forEachRemaining(wrappedSink);</div><div class=\"line\">        wrappedSink.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        copyIntoWithCancel(wrappedSink, spliterator);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"有状态的中间操作何时执行\"><a href=\"#有状态的中间操作何时执行\" class=\"headerlink\" title=\"有状态的中间操作何时执行?\"></a>有状态的中间操作何时执行?</h4><p>例如sorted()操作,其依赖上一次操作的结果集,按照调用链来说结果集必须在accept()调用完才会产生.那也就说明sorted操作需要在end中,然后再重新开启调用链.</p>\n<p><strong>sorted的end方法</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     list.sort(comparator);</div><div class=\"line\">     downstream.begin(list.size());</div><div class=\"line\">     <span class=\"keyword\">if</span> (!cancellationWasRequested) &#123;</div><div class=\"line\">         list.forEach(downstream::accept);</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">for</span> (T t : list) &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (downstream.cancellationRequested()) <span class=\"keyword\">break</span>;</div><div class=\"line\">             downstream.accept(t);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     downstream.end();</div><div class=\"line\">     list = <span class=\"keyword\">null</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>那么就相当于sorted给原有操作断路了一次,然后又重新接上,再次遍历.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497158292.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"如何收集到结果\"><a href=\"#如何收集到结果\" class=\"headerlink\" title=\"如何收集到结果?\"></a>如何收集到结果?</h4><p>foreach是不需要收集到结果的,但是对于collect这样的操作是需要拿到最终end产生的结果.end产生的结果在最后一个Sink中,这样的操作最终都会提供一个取出数据的get方法.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateSequential</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</div><div class=\"line\">                                    Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> helper.wrapAndCopyInto(makeSink(), spliterator).get();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>如此拿到数据返回</p>\n"},{"title":"redis学习记录(三)-redis中的数据结构","date":"2017-03-26T13:50:00.000Z","_content":"\n# redis学习记录(三)-redis中的数据结构\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]o\n[Redis学习记录(二)--使用Jedis连接][2]\n\nredis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.\n\n### string\nstring是的key->value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.\n\n![](http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg)\n\n\n### list\nlist是列表,也就是一个key->多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.\n\n![](http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg)\n\n\n### set\nset为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg)\n\n\n### hash\nhash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:\n\n![](http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg)\n\n\n### sort set\n可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.\n\n![](http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg)\n\n\n### 应用场景\n\n#### string\n计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.\n\n#### List\nlist的优势的有序性,两端插入复杂度为O(1),那么对于**最近文章列表**等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.\n\n#### Set\nset的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.\n\n#### hash\nhash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.\n\n#### sort set\nsort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43","source":"_posts/linux/redis学习记录(三)-redis中的数据结构.md","raw":"---\ntitle: redis学习记录(三)-redis中的数据结构\ntags:\n  - redis\ncategories: redis\ndate: 2017-03-26 21:50:00\n---\n\n# redis学习记录(三)-redis中的数据结构\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]o\n[Redis学习记录(二)--使用Jedis连接][2]\n\nredis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.\n\n### string\nstring是的key->value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.\n\n![](http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg)\n\n\n### list\nlist是列表,也就是一个key->多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.\n\n![](http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg)\n\n\n### set\nset为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg)\n\n\n### hash\nhash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:\n\n![](http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg)\n\n\n### sort set\n可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.\n\n![](http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg)\n\n\n### 应用场景\n\n#### string\n计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.\n\n#### List\nlist的优势的有序性,两端插入复杂度为O(1),那么对于**最近文章列表**等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.\n\n#### Set\nset的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.\n\n#### hash\nhash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.\n\n#### sort set\nsort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43","slug":"linux/redis学习记录(三)-redis中的数据结构","published":1,"updated":"2017-03-27T14:34:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7x4000i6wz5yarvcuok","content":"<h1 id=\"redis学习记录-三-redis中的数据结构\"><a href=\"#redis学习记录-三-redis中的数据结构\" class=\"headerlink\" title=\"redis学习记录(三)-redis中的数据结构\"></a>redis学习记录(三)-redis中的数据结构</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(一)–入门知识</a>o<br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(二)–使用Jedis连接</a></p>\n<p>redis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是的key-&gt;value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg\" alt=\"\"></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list是列表,也就是一个key-&gt;多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg\" alt=\"\"></p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg\" alt=\"\"></p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>hash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg\" alt=\"\"></p>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort set\"></a>sort set</h3><p>可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg\" alt=\"\"></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"string-1\"><a href=\"#string-1\" class=\"headerlink\" title=\"string\"></a>string</h4><p>计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>list的优势的有序性,两端插入复杂度为O(1),那么对于<strong>最近文章列表</strong>等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.</p>\n<h4 id=\"hash-1\"><a href=\"#hash-1\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>hash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.</p>\n<h4 id=\"sort-set-1\"><a href=\"#sort-set-1\" class=\"headerlink\" title=\"sort set\"></a>sort set</h4><p>sort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.</p>\n","excerpt":"","more":"<h1 id=\"redis学习记录-三-redis中的数据结构\"><a href=\"#redis学习记录-三-redis中的数据结构\" class=\"headerlink\" title=\"redis学习记录(三)-redis中的数据结构\"></a>redis学习记录(三)-redis中的数据结构</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\">Redis学习记录(一)–入门知识</a>o<br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\">Redis学习记录(二)–使用Jedis连接</a></p>\n<p>redis有五种数据类型,string,list,set,hash,sort set,不同场景使用不同数据结构的前提是了解每一种数据结构.那么结构图片是最佳的了解方式,图片来自慕课网.</p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string是的key-&gt;value类型的存储,可以存储字符串类型和数值类型,可对数值类型是可以增加减少,对string类型可以追加内容.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/FLiCD6qvq5cgURt9pK4GsmHAfikXMkTaTk0jH42D.jpg\" alt=\"\"></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>list是列表,也就是一个key-&gt;多个value,可以支持双端队列,栈来操作,因此越靠近两端其查找速度越快,端点的复杂度查找为O(1),同时队列有阻塞操作,也就是可以当成阻塞队列使用.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/C66VGUQUQU36HG1VirdktiwGCsuch427TKeM9Mx8.jpg\" alt=\"\"></p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set为无序,且不重复的集合,且提供O(1)复杂度度的快速查找.set集合支持集合的并,交,差操作,因为无序性,因此也提供迭代方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/eYnj2QzNgnS3IxzfR74ODXYREXCAwLrFAqmNCvDD.jpg\" alt=\"\"></p>\n<h3 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h3><p>hash类型适合存储对象,相比前面的string,所带来的优势是可以使用一个key查出该下面所有的键值对,并且可以单独对某一属性更改,如图所示:</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/9EqPsIkU1iQeoMzRBYGGIEIPYvpQarWbgyADBehR.jpg\" alt=\"\"></p>\n<h3 id=\"sort-set\"><a href=\"#sort-set\" class=\"headerlink\" title=\"sort set\"></a>sort set</h3><p>可排序的集合,如图所示存在score排名分数,隐藏属性rank排名,0为最小.注意对sort set来说value是唯一性的,而不是score,如果两个score相同,则按照value的字典序排序.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/3TBmsR4b8tGDoUvX3tlo1pHMuTTDnJOXAT5H0S9g.jpg\" alt=\"\"></p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"string-1\"><a href=\"#string-1\" class=\"headerlink\" title=\"string\"></a>string</h4><p>计数器:redis的incr操作是原子性的,因此可以应对高并发,如网站要求每个用户获取验证码后60秒内不得再次获取,那么第一次获取的时候用incr给该用户设置key,过期时间为60秒,如果结果等于1则为第一次请求,那么第二次获取时比较决定是否操作频繁.</p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>list的优势的有序性,两端插入复杂度为O(1),那么对于<strong>最近文章列表</strong>等类似需求是最佳解决方案,维护一个定长的列表,每次插入后执行trim操作.</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set的优势是唯一性,O(1)的查找查找复杂度,并且支持差并集,那么二度好友问题就迎刃而解了.</p>\n<h4 id=\"hash-1\"><a href=\"#hash-1\" class=\"headerlink\" title=\"hash\"></a>hash</h4><p>hash非常适合存储对象,不同的键为对象的特征,值为特征值,那么比string好的就是修改不需要每次都修改一个整串,而可以选择修改某一指定键值.</p>\n<h4 id=\"sort-set-1\"><a href=\"#sort-set-1\" class=\"headerlink\" title=\"sort set\"></a>sort set</h4><p>sort set可排序特性使其很容易解决排行榜类应用,但是要注意值需要存储不变的属性,因为值要求唯一性,score可不唯一.</p>\n"},{"title":"Spring Cloud学习记录(一)--为什么需要Spring Cloud?","date":"2017-06-03T00:30:24.000Z","_content":"最近看了周立大大关于Spring Cloud的分享`itmuch.com`,自己做了一些总结,加深自己的理解.\n\n 理解有误,占坑","source":"_posts/spring/Spring Cloud学习记录(一)--为什么需要微服务.md","raw":"---\ntitle: Spring Cloud学习记录(一)--为什么需要Spring Cloud?\ntags:\n  - Spring    \ncategories: Spring\ndate: 2017-06-03 08:30:24\n---\n最近看了周立大大关于Spring Cloud的分享`itmuch.com`,自己做了一些总结,加深自己的理解.\n\n 理解有误,占坑","slug":"spring/Spring Cloud学习记录(一)--为什么需要微服务","published":1,"updated":"2017-06-09T14:18:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7x7000k6wz5vr97l76t","content":"<p>最近看了周立大大关于Spring Cloud的分享<code>itmuch.com</code>,自己做了一些总结,加深自己的理解.</p>\n<p> 理解有误,占坑</p>\n","excerpt":"","more":"<p>最近看了周立大大关于Spring Cloud的分享<code>itmuch.com</code>,自己做了一些总结,加深自己的理解.</p>\n<p> 理解有误,占坑</p>\n"},{"title":"redis学习记录(四)-SpringDataRedis分析","date":"2017-03-29T10:50:00.000Z","_content":"\n\n# redis学习记录(四)-SpringDataRedis分析\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]\n[Redis学习记录(二)--使用Jedis连接][2]\n[redis学习记录(三)-redis中的数据结构][3]\n\n### 1.简介\nSpring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.\n\n本文是在Spring boot 1.5.2版本下测试.\n\n需要引入架包\n```xml\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--spring boot start-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n### 2.配置\n在Spring Boot下默认使用jedis作为客户端,并在包`org.springframework.boot.autoconfigure.data.redis`下,提供自动配置类`RedisProperties`,`RedisAutoConfiguration`等.\n\n根据`RedisProperties`可以定位到可配置的属性,如:\n``` properties\n# Redis数据库索引（默认为0）\nspring.redis.database=0\n# Redis服务器地址\nspring.redis.host=115.159.185.14\n# Redis服务器连接端口\nspring.redis.port=6379\n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n# 连接超时时间（毫秒）\nspring.redis.timeout=2000\n```\n在application.properties中配置即可,另外还有`Sentinel`和`Cluster`说明支持分布式和集群,博主研究不多就不瞎说这个了.\n\n自动配置主要在`RedisAutoConfiguration`中,该类会提供三个bean:\n1. JedisConnectionFactory : jedis连接控制工厂\n2. RedisTemplate<Object, Object> : redis操作入口\n3. StringRedisTemplate : redis操作入口\n\n那么就开始入口学习.\n\n----------\n### 3.RedisTemplate<K, V>\n\nRedisTemplate是操作的入口.该类继承了`RedisAccessor`,可以通过其拿到redis连接,实现了`RedisOperations`接口,获得了操作redis的能力,如下图所示:\n![](http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg)\n\n#### 3.1 Test case\n那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Application.class)\npublic class RedisConnectTest {\n  @Resource\n  private RedisTemplate<String,String> redisTemplate;\n\n  @Test\n  public void testSetAndGet() {\n    redisTemplate.opsForValue().set(\"ping\",\"pong\");\n    System.out.println(redisTemplate.opsForValue().get(\"ping\"));\n  }\n}\n```\n运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.\n![](http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg)\n\n#### 3.2 XXXOperations<K, V>\n上述代码的第一步先获取到了`ValueOperations`,在`RedisTemplate`中同样还有其他`XXXOperations`,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:\n\n | 接口 | 操作 | \n|:-----|:-----|\n| ValueOperations | Redis string (or value) operations  |\n| ListOperations | Redis list operations  |\n| SetOperations | Redis set operations  |\n| ZSetOperations | Redis zset (or sorted set) operations  |\n| HashOperations | Redis hash operations  |\n| HyperLogLogOperations | Redis HyperLogLog operations like (pfadd, pfcount,…​) |\n| GeoOperations | Redis geospatial operations like GEOADD, GEORADIUS,…​) |\n| BoundValueOperations | Redis string (or value) key bound operations |\n| BoundListOperations | Redis list key bound operations |\n| BoundSetOperations | Redis set key bound operations |\n| BoundZSetOperations | Redis zset (or sorted set) key bound operations |\n| BoundHashOperations | Redis hash key bound operations |\n| BoundGeoOperations | Redis key bound geospatial operations. |\n\n其中`BoundXXXOperations`是在key已知的情况下使用,其所有操作都是建立在有一个`certain key`的前提.可以看下源码就能明白了.\n\n#### 3.3 XXXSerializer\n那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.\n\n```java\n\tpublic void set(K key, V value) {\n\t\tfinal byte[] rawValue = rawValue(value);\n\t\texecute(new ValueDeserializingRedisCallback(key) {\n\n\t\t\tprotected byte[] inRedis(byte[] rawKey, RedisConnection connection) {\n\t\t\t\tconnection.set(rawKey, rawValue);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}, true);\n\t}\n```\n可以发现`rawKey()`方法和`rawValue()`方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的`XXXSerializer`,那么回到RedisTemplate,在`afterPropertiesSet()`方法中有以下初始化方法,默认使用的序列化方式为`JdkSerializationRedisSerializer`,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过\"ping\"访问不到的原因.\n```java\nif (defaultSerializer == null) {\n\n\t\t\tdefaultSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\t\tclassLoader != null ? classLoader : this.getClass().getClassLoader());\n\t\t}\n\t\tif (enableDefaultSerializer) {\n\t\t\tif (keySerializer == null) {\n\t\t\t\tkeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (valueSerializer == null) {\n\t\t\t\tvalueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashKeySerializer == null) {\n\t\t\t\thashKeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashValueSerializer == null) {\n\t\t\t\thashValueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t}\n\n```\n那么SpringDataRedis支持哪些序列化呢?从官网可以看到:\nStringRedisSerializer: string类型序列化,也是最常用的类型\nJdkSerializationRedisSerializer: jdk默认序列化\nOxmSerializer : xml格式\nJacksonJsonRedisSerializer : json格式\n\n通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的`StringRedisTemplate`,实现了`StringRedisSerializer`序列化方式.\n```java\n\tpublic StringRedisTemplate() {\n\t\tRedisSerializer<String> stringSerializer = new StringRedisSerializer();\n\t\tsetKeySerializer(stringSerializer);\n\t\tsetValueSerializer(stringSerializer);\n\t\tsetHashKeySerializer(stringSerializer);\n\t\tsetHashValueSerializer(stringSerializer);\n\t}\n```\n\n更改成`StringRedisTemplate`,再次执行,正常了.\n![](http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg)\n\n#### 3.4 总结过程\n1. 获取RedisTemplate\n2. 获取操作入口XXXOperations\n3. 使用RedisSerializer序列化key和value\n4. 获取conn连接\n4. 执行命令\n\n### 4.发布与订阅\n发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?\n订阅者:里面有一个处理方法即可.\n```java\n@Component\npublic class Listen {\n\n  private static Logger logger = LoggerFactory.getLogger(Listen.class);\n\n  private CountDownLatch latch = new CountDownLatch(1);\n\n  public void handleMsg(String message) {\n    logger.info(\"reciver msg :\" + message);\n    latch.countDown();\n  }\n  \n  public CountDownLatch getLatch() {\n    return latch;\n  }\n}\n```\n发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.\n\n连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为\n\n```java\n@Configuration\npublic class PublishConfig {\n  /**\n   * 注入消息容器\n   * @param jedisConnectionFactory jedis连接池\n   * @param listenerAdapter 监听适配器\n   * @return bean\n   */\n  @Bean\n  public RedisMessageListenerContainer container(RedisConnectionFactory jedisConnectionFactory,\n      MessageListenerAdapter listenerAdapter){\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    container.setConnectionFactory(jedisConnectionFactory);\n    //绑定监听者与信道的管理\n    container.addMessageListener(listenerAdapter,new PatternTopic(\"java\"));\n    return container;\n  }\n\n  @Bean\n  public MessageListenerAdapter adapter(Listen listen){\n    //指定监听者和监听方法\n    return new MessageListenerAdapter(listen,\"handleMsg\");\n  }\n}\n```\n\n测试:\n```java\n  @Test\n  public void testPublish() throws InterruptedException {\n    stringRedisTemplate.convertAndSend(\"java\",\"hello world\");\n    listen.getLatch().await();\n  }\n```\n![](http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg)\n\n### 5.事务\n对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下\n```java\n    RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);\n    execute(this)\n```\n```java\n @Test\n  public void testMulti() {\n    boolean isThrow = false;\n    List<Object> result = null;\n    try {\n      result = stringRedisTemplate.execute(new SessionCallback<List<Object>>() {\n        @Override\n        public List<Object> execute(RedisOperations operations) throws\n            DataAccessException {\n          operations.multi();\n          ValueOperations<String,String> ops = operations.opsForValue();\n          ops.set(\"ping1\",\"pong1\");\n          ops.set(\"ping2\",\"pong2\");\n          if (isThrow){\n            throw new IllegalArgumentException(\"测试异常\");\n          }\n          return operations.exec();\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(result);\n  }\n```\n\n### 6.管道\n直接引用官方案例\n```java\n//pop a specified number of items from a queue\nList<Object> results = stringRedisTemplate.executePipelined(\n  new RedisCallback<Object>() {\n    public Object doInRedis(RedisConnection connection) throws DataAccessException {\n      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;\n      for(int i=0; i< batchSize; i++) {\n        stringRedisConn.rPop(\"myqueue\");\n      }\n    return null;\n  }\n});\n```\n\n还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.\n\n\n参考文档:\n\nhttp://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\n\ngithub:\n\nhttps://github.com/nl101531/JavaWEB\n\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\n  [3]: http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","source":"_posts/linux/redis学习记录(四)-SpringDataRedis分析.md","raw":"---\ntitle: redis学习记录(四)-SpringDataRedis分析\ntags:\n  - redis\ncategories: redis\ndate: 2017-03-29 18:50:00\n\n---\n\n\n# redis学习记录(四)-SpringDataRedis分析\n\n标签（空格分隔）： redis\n\n---\n\n[Redis学习记录(一)--入门知识][1]\n[Redis学习记录(二)--使用Jedis连接][2]\n[redis学习记录(三)-redis中的数据结构][3]\n\n### 1.简介\nSpring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.\n\n本文是在Spring boot 1.5.2版本下测试.\n\n需要引入架包\n```xml\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <!--spring boot start-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\n### 2.配置\n在Spring Boot下默认使用jedis作为客户端,并在包`org.springframework.boot.autoconfigure.data.redis`下,提供自动配置类`RedisProperties`,`RedisAutoConfiguration`等.\n\n根据`RedisProperties`可以定位到可配置的属性,如:\n``` properties\n# Redis数据库索引（默认为0）\nspring.redis.database=0\n# Redis服务器地址\nspring.redis.host=115.159.185.14\n# Redis服务器连接端口\nspring.redis.port=6379\n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n# 连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8\n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1\n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8\n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0\n# 连接超时时间（毫秒）\nspring.redis.timeout=2000\n```\n在application.properties中配置即可,另外还有`Sentinel`和`Cluster`说明支持分布式和集群,博主研究不多就不瞎说这个了.\n\n自动配置主要在`RedisAutoConfiguration`中,该类会提供三个bean:\n1. JedisConnectionFactory : jedis连接控制工厂\n2. RedisTemplate<Object, Object> : redis操作入口\n3. StringRedisTemplate : redis操作入口\n\n那么就开始入口学习.\n\n----------\n### 3.RedisTemplate<K, V>\n\nRedisTemplate是操作的入口.该类继承了`RedisAccessor`,可以通过其拿到redis连接,实现了`RedisOperations`接口,获得了操作redis的能力,如下图所示:\n![](http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg)\n\n#### 3.1 Test case\n那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = Application.class)\npublic class RedisConnectTest {\n  @Resource\n  private RedisTemplate<String,String> redisTemplate;\n\n  @Test\n  public void testSetAndGet() {\n    redisTemplate.opsForValue().set(\"ping\",\"pong\");\n    System.out.println(redisTemplate.opsForValue().get(\"ping\"));\n  }\n}\n```\n运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.\n![](http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg)\n\n#### 3.2 XXXOperations<K, V>\n上述代码的第一步先获取到了`ValueOperations`,在`RedisTemplate`中同样还有其他`XXXOperations`,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:\n\n | 接口 | 操作 | \n|:-----|:-----|\n| ValueOperations | Redis string (or value) operations  |\n| ListOperations | Redis list operations  |\n| SetOperations | Redis set operations  |\n| ZSetOperations | Redis zset (or sorted set) operations  |\n| HashOperations | Redis hash operations  |\n| HyperLogLogOperations | Redis HyperLogLog operations like (pfadd, pfcount,…​) |\n| GeoOperations | Redis geospatial operations like GEOADD, GEORADIUS,…​) |\n| BoundValueOperations | Redis string (or value) key bound operations |\n| BoundListOperations | Redis list key bound operations |\n| BoundSetOperations | Redis set key bound operations |\n| BoundZSetOperations | Redis zset (or sorted set) key bound operations |\n| BoundHashOperations | Redis hash key bound operations |\n| BoundGeoOperations | Redis key bound geospatial operations. |\n\n其中`BoundXXXOperations`是在key已知的情况下使用,其所有操作都是建立在有一个`certain key`的前提.可以看下源码就能明白了.\n\n#### 3.3 XXXSerializer\n那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.\n\n```java\n\tpublic void set(K key, V value) {\n\t\tfinal byte[] rawValue = rawValue(value);\n\t\texecute(new ValueDeserializingRedisCallback(key) {\n\n\t\t\tprotected byte[] inRedis(byte[] rawKey, RedisConnection connection) {\n\t\t\t\tconnection.set(rawKey, rawValue);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}, true);\n\t}\n```\n可以发现`rawKey()`方法和`rawValue()`方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的`XXXSerializer`,那么回到RedisTemplate,在`afterPropertiesSet()`方法中有以下初始化方法,默认使用的序列化方式为`JdkSerializationRedisSerializer`,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过\"ping\"访问不到的原因.\n```java\nif (defaultSerializer == null) {\n\n\t\t\tdefaultSerializer = new JdkSerializationRedisSerializer(\n\t\t\t\t\tclassLoader != null ? classLoader : this.getClass().getClassLoader());\n\t\t}\n\t\tif (enableDefaultSerializer) {\n\t\t\tif (keySerializer == null) {\n\t\t\t\tkeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (valueSerializer == null) {\n\t\t\t\tvalueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashKeySerializer == null) {\n\t\t\t\thashKeySerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t\tif (hashValueSerializer == null) {\n\t\t\t\thashValueSerializer = defaultSerializer;\n\t\t\t\tdefaultUsed = true;\n\t\t\t}\n\t\t}\n\n```\n那么SpringDataRedis支持哪些序列化呢?从官网可以看到:\nStringRedisSerializer: string类型序列化,也是最常用的类型\nJdkSerializationRedisSerializer: jdk默认序列化\nOxmSerializer : xml格式\nJacksonJsonRedisSerializer : json格式\n\n通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的`StringRedisTemplate`,实现了`StringRedisSerializer`序列化方式.\n```java\n\tpublic StringRedisTemplate() {\n\t\tRedisSerializer<String> stringSerializer = new StringRedisSerializer();\n\t\tsetKeySerializer(stringSerializer);\n\t\tsetValueSerializer(stringSerializer);\n\t\tsetHashKeySerializer(stringSerializer);\n\t\tsetHashValueSerializer(stringSerializer);\n\t}\n```\n\n更改成`StringRedisTemplate`,再次执行,正常了.\n![](http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg)\n\n#### 3.4 总结过程\n1. 获取RedisTemplate\n2. 获取操作入口XXXOperations\n3. 使用RedisSerializer序列化key和value\n4. 获取conn连接\n4. 执行命令\n\n### 4.发布与订阅\n发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?\n订阅者:里面有一个处理方法即可.\n```java\n@Component\npublic class Listen {\n\n  private static Logger logger = LoggerFactory.getLogger(Listen.class);\n\n  private CountDownLatch latch = new CountDownLatch(1);\n\n  public void handleMsg(String message) {\n    logger.info(\"reciver msg :\" + message);\n    latch.countDown();\n  }\n  \n  public CountDownLatch getLatch() {\n    return latch;\n  }\n}\n```\n发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.\n\n连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为\n\n```java\n@Configuration\npublic class PublishConfig {\n  /**\n   * 注入消息容器\n   * @param jedisConnectionFactory jedis连接池\n   * @param listenerAdapter 监听适配器\n   * @return bean\n   */\n  @Bean\n  public RedisMessageListenerContainer container(RedisConnectionFactory jedisConnectionFactory,\n      MessageListenerAdapter listenerAdapter){\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    container.setConnectionFactory(jedisConnectionFactory);\n    //绑定监听者与信道的管理\n    container.addMessageListener(listenerAdapter,new PatternTopic(\"java\"));\n    return container;\n  }\n\n  @Bean\n  public MessageListenerAdapter adapter(Listen listen){\n    //指定监听者和监听方法\n    return new MessageListenerAdapter(listen,\"handleMsg\");\n  }\n}\n```\n\n测试:\n```java\n  @Test\n  public void testPublish() throws InterruptedException {\n    stringRedisTemplate.convertAndSend(\"java\",\"hello world\");\n    listen.getLatch().await();\n  }\n```\n![](http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg)\n\n### 5.事务\n对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下\n```java\n    RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);\n    execute(this)\n```\n```java\n @Test\n  public void testMulti() {\n    boolean isThrow = false;\n    List<Object> result = null;\n    try {\n      result = stringRedisTemplate.execute(new SessionCallback<List<Object>>() {\n        @Override\n        public List<Object> execute(RedisOperations operations) throws\n            DataAccessException {\n          operations.multi();\n          ValueOperations<String,String> ops = operations.opsForValue();\n          ops.set(\"ping1\",\"pong1\");\n          ops.set(\"ping2\",\"pong2\");\n          if (isThrow){\n            throw new IllegalArgumentException(\"测试异常\");\n          }\n          return operations.exec();\n        }\n      });\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    System.out.println(result);\n  }\n```\n\n### 6.管道\n直接引用官方案例\n```java\n//pop a specified number of items from a queue\nList<Object> results = stringRedisTemplate.executePipelined(\n  new RedisCallback<Object>() {\n    public Object doInRedis(RedisConnection connection) throws DataAccessException {\n      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;\n      for(int i=0; i< batchSize; i++) {\n        stringRedisConn.rPop(\"myqueue\");\n      }\n    return null;\n  }\n});\n```\n\n还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.\n\n\n参考文档:\n\nhttp://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\n\ngithub:\n\nhttps://github.com/nl101531/JavaWEB\n\n\n  [1]: http://www.jianshu.com/p/da69edda2a43\n  [2]: http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\n  [3]: http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","slug":"linux/redis学习记录(四)-SpringDataRedis分析","published":1,"updated":"2017-03-30T01:41:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7x9000o6wz5i6l5b4ww","content":"<h1 id=\"redis学习记录-四-SpringDataRedis分析\"><a href=\"#redis学习记录-四-SpringDataRedis分析\" class=\"headerlink\" title=\"redis学习记录(四)-SpringDataRedis分析\"></a>redis学习记录(四)-SpringDataRedis分析</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(一)–入门知识</a><br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\" target=\"_blank\" rel=\"external\">Redis学习记录(二)–使用Jedis连接</a><br><a href=\"http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/\">redis学习记录(三)-redis中的数据结构</a></p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>Spring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.</p>\n<p>本文是在Spring boot 1.5.2版本下测试.</p>\n<p>需要引入架包<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring boot start--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>在Spring Boot下默认使用jedis作为客户端,并在包<code>org.springframework.boot.autoconfigure.data.redis</code>下,提供自动配置类<code>RedisProperties</code>,<code>RedisAutoConfiguration</code>等.</p>\n<p>根据<code>RedisProperties</code>可以定位到可配置的属性,如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Redis数据库索引（默认为0）</div><div class=\"line\">spring.redis.database=0</div><div class=\"line\"># Redis服务器地址</div><div class=\"line\">spring.redis.host=115.159.185.14</div><div class=\"line\"># Redis服务器连接端口</div><div class=\"line\">spring.redis.port=6379</div><div class=\"line\"># Redis服务器连接密码（默认为空）</div><div class=\"line\">spring.redis.password=</div><div class=\"line\"># 连接池最大连接数（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-active=8</div><div class=\"line\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-wait=-1</div><div class=\"line\"># 连接池中的最大空闲连接</div><div class=\"line\">spring.redis.pool.max-idle=8</div><div class=\"line\"># 连接池中的最小空闲连接</div><div class=\"line\">spring.redis.pool.min-idle=0</div><div class=\"line\"># 连接超时时间（毫秒）</div><div class=\"line\">spring.redis.timeout=2000</div></pre></td></tr></table></figure></p>\n<p>在application.properties中配置即可,另外还有<code>Sentinel</code>和<code>Cluster</code>说明支持分布式和集群,博主研究不多就不瞎说这个了.</p>\n<p>自动配置主要在<code>RedisAutoConfiguration</code>中,该类会提供三个bean:</p>\n<ol>\n<li>JedisConnectionFactory : jedis连接控制工厂</li>\n<li>RedisTemplate<object, object=\"\"> : redis操作入口</object,></li>\n<li>StringRedisTemplate : redis操作入口</li>\n</ol>\n<p>那么就开始入口学习.</p>\n<hr>\n<h3 id=\"3-RedisTemplate\"><a href=\"#3-RedisTemplate\" class=\"headerlink\" title=\"3.RedisTemplate\"></a>3.RedisTemplate<k, v=\"\"></k,></h3><p>RedisTemplate是操作的入口.该类继承了<code>RedisAccessor</code>,可以通过其拿到redis连接,实现了<code>RedisOperations</code>接口,获得了操作redis的能力,如下图所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg\" alt=\"\"></p>\n<h4 id=\"3-1-Test-case\"><a href=\"#3-1-Test-case\" class=\"headerlink\" title=\"3.1 Test case\"></a>3.1 Test case</h4><p>那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(classes = Application.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConnectTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Resource</span></div><div class=\"line\">  <span class=\"keyword\">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSetAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">\"ping\"</span>,<span class=\"string\">\"pong\"</span>);</div><div class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"ping\"</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg\" alt=\"\"></p>\n<h4 id=\"3-2-XXXOperations\"><a href=\"#3-2-XXXOperations\" class=\"headerlink\" title=\"3.2 XXXOperations\"></a>3.2 XXXOperations<k, v=\"\"></k,></h4><p>上述代码的第一步先获取到了<code>ValueOperations</code>,在<code>RedisTemplate</code>中同样还有其他<code>XXXOperations</code>,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">接口</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ListOperations</td>\n<td style=\"text-align:left\">Redis list operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetOperations</td>\n<td style=\"text-align:left\">Redis set operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashOperations</td>\n<td style=\"text-align:left\">Redis hash operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HyperLogLogOperations</td>\n<td style=\"text-align:left\">Redis HyperLogLog operations like (pfadd, pfcount,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GeoOperations</td>\n<td style=\"text-align:left\">Redis geospatial operations like GEOADD, GEORADIUS,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundListOperations</td>\n<td style=\"text-align:left\">Redis list key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundSetOperations</td>\n<td style=\"text-align:left\">Redis set key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundHashOperations</td>\n<td style=\"text-align:left\">Redis hash key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundGeoOperations</td>\n<td style=\"text-align:left\">Redis key bound geospatial operations.</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>BoundXXXOperations</code>是在key已知的情况下使用,其所有操作都是建立在有一个<code>certain key</code>的前提.可以看下源码就能明白了.</p>\n<h4 id=\"3-3-XXXSerializer\"><a href=\"#3-3-XXXSerializer\" class=\"headerlink\" title=\"3.3 XXXSerializer\"></a>3.3 XXXSerializer</h4><p>那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] rawValue = rawValue(value);</div><div class=\"line\">\texecute(<span class=\"keyword\">new</span> ValueDeserializingRedisCallback(key) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"keyword\">byte</span>[] inRedis(<span class=\"keyword\">byte</span>[] rawKey, RedisConnection connection) &#123;</div><div class=\"line\">\t\t\tconnection.set(rawKey, rawValue);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现<code>rawKey()</code>方法和<code>rawValue()</code>方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的<code>XXXSerializer</code>,那么回到RedisTemplate,在<code>afterPropertiesSet()</code>方法中有以下初始化方法,默认使用的序列化方式为<code>JdkSerializationRedisSerializer</code>,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过”ping”访问不到的原因.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (defaultSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdefaultSerializer = <span class=\"keyword\">new</span> JdkSerializationRedisSerializer(</div><div class=\"line\">\t\t\t\t\tclassLoader != <span class=\"keyword\">null</span> ? classLoader : <span class=\"keyword\">this</span>.getClass().getClassLoader());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (enableDefaultSerializer) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tkeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (valueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tvalueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashKeySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashKeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashValueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashValueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>那么SpringDataRedis支持哪些序列化呢?从官网可以看到:<br>StringRedisSerializer: string类型序列化,也是最常用的类型<br>JdkSerializationRedisSerializer: jdk默认序列化<br>OxmSerializer : xml格式<br>JacksonJsonRedisSerializer : json格式</p>\n<p>通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的<code>StringRedisTemplate</code>,实现了<code>StringRedisSerializer</code>序列化方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tRedisSerializer&lt;String&gt; stringSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</div><div class=\"line\">\tsetKeySerializer(stringSerializer);</div><div class=\"line\">\tsetValueSerializer(stringSerializer);</div><div class=\"line\">\tsetHashKeySerializer(stringSerializer);</div><div class=\"line\">\tsetHashValueSerializer(stringSerializer);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更改成<code>StringRedisTemplate</code>,再次执行,正常了.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg\" alt=\"\"></p>\n<h4 id=\"3-4-总结过程\"><a href=\"#3-4-总结过程\" class=\"headerlink\" title=\"3.4 总结过程\"></a>3.4 总结过程</h4><ol>\n<li>获取RedisTemplate</li>\n<li>获取操作入口XXXOperations</li>\n<li>使用RedisSerializer序列化key和value</li>\n<li>获取conn连接</li>\n<li>执行命令</li>\n</ol>\n<h3 id=\"4-发布与订阅\"><a href=\"#4-发布与订阅\" class=\"headerlink\" title=\"4.发布与订阅\"></a>4.发布与订阅</h3><p>发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?<br>订阅者:里面有一个处理方法即可.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Listen.class);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMsg</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"reciver msg :\"</span> + message);</div><div class=\"line\">    latch.countDown();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CountDownLatch <span class=\"title\">getLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> latch;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.</p>\n<p>连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PublishConfig</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * 注入消息容器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> jedisConnectionFactory jedis连接池</div><div class=\"line\">   * <span class=\"doctag\">@param</span> listenerAdapter 监听适配器</div><div class=\"line\">   * <span class=\"doctag\">@return</span> bean</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RedisMessageListenerContainer <span class=\"title\">container</span><span class=\"params\">(RedisConnectionFactory jedisConnectionFactory,</span></span></div><div class=\"line\">      MessageListenerAdapter listenerAdapter)&#123;</div><div class=\"line\">    RedisMessageListenerContainer container = <span class=\"keyword\">new</span> RedisMessageListenerContainer();</div><div class=\"line\">    container.setConnectionFactory(jedisConnectionFactory);</div><div class=\"line\">    <span class=\"comment\">//绑定监听者与信道的管理</span></div><div class=\"line\">    container.addMessageListener(listenerAdapter,<span class=\"keyword\">new</span> PatternTopic(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> container;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> MessageListenerAdapter <span class=\"title\">adapter</span><span class=\"params\">(Listen listen)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定监听者和监听方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MessageListenerAdapter(listen,<span class=\"string\">\"handleMsg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublish</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">  stringRedisTemplate.convertAndSend(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\">  listen.getLatch().await();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg\" alt=\"\"></p>\n<h3 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5.事务\"></a>5.事务</h3><p>对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);</div><div class=\"line\">execute(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMulti</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">boolean</span> isThrow = <span class=\"keyword\">false</span>;</div><div class=\"line\">   List&lt;Object&gt; result = <span class=\"keyword\">null</span>;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     result = stringRedisTemplate.execute(<span class=\"keyword\">new</span> SessionCallback&lt;List&lt;Object&gt;&gt;() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">execute</span><span class=\"params\">(RedisOperations operations)</span> <span class=\"keyword\">throws</span></span></div><div class=\"line\">           DataAccessException &#123;</div><div class=\"line\">         operations.multi();</div><div class=\"line\">         ValueOperations&lt;String,String&gt; ops = operations.opsForValue();</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping1\"</span>,<span class=\"string\">\"pong1\"</span>);</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping2\"</span>,<span class=\"string\">\"pong2\"</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (isThrow)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"测试异常\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> operations.exec();</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">     e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   System.out.println(result);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6.管道\"></a>6.管道</h3><p>直接引用官方案例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pop a specified number of items from a queue</span></div><div class=\"line\">List&lt;Object&gt; results = stringRedisTemplate.executePipelined(</div><div class=\"line\">  <span class=\"keyword\">new</span> RedisCallback&lt;Object&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</div><div class=\"line\">      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; batchSize; i++) &#123;</div><div class=\"line\">        stringRedisConn.rPop(<span class=\"string\">\"myqueue\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.</p>\n<p>参考文档:</p>\n<p><a href=\"http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\" target=\"_blank\" rel=\"external\">http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template</a></p>\n<p>github:</p>\n<p><a href=\"https://github.com/nl101531/JavaWEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/JavaWEB</a></p>\n","excerpt":"","more":"<h1 id=\"redis学习记录-四-SpringDataRedis分析\"><a href=\"#redis学习记录-四-SpringDataRedis分析\" class=\"headerlink\" title=\"redis学习记录(四)-SpringDataRedis分析\"></a>redis学习记录(四)-SpringDataRedis分析</h1><p>标签（空格分隔）： redis</p>\n<hr>\n<p><a href=\"http://www.jianshu.com/p/da69edda2a43\">Redis学习记录(一)–入门知识</a><br><a href=\"http://www.jianshu.com/p/c3b8180af944p/da69edda2a43\">Redis学习记录(二)–使用Jedis连接</a><br><a href=\"http://mrdear.cn/2017/03/26/linux/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%28%E4%B8%89%29-redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/\">redis学习记录(三)-redis中的数据结构</a></p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>Spring Data Redis是对redis客户端(如jedis)的高度封装,支持多种客户端,因其高抽象,所以在某一个客户端不支持更新的时候可以容易切换到其他客户端.</p>\n<p>本文是在Spring boot 1.5.2版本下测试.</p>\n<p>需要引入架包<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--spring boot start--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h3><p>在Spring Boot下默认使用jedis作为客户端,并在包<code>org.springframework.boot.autoconfigure.data.redis</code>下,提供自动配置类<code>RedisProperties</code>,<code>RedisAutoConfiguration</code>等.</p>\n<p>根据<code>RedisProperties</code>可以定位到可配置的属性,如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Redis数据库索引（默认为0）</div><div class=\"line\">spring.redis.database=0</div><div class=\"line\"># Redis服务器地址</div><div class=\"line\">spring.redis.host=115.159.185.14</div><div class=\"line\"># Redis服务器连接端口</div><div class=\"line\">spring.redis.port=6379</div><div class=\"line\"># Redis服务器连接密码（默认为空）</div><div class=\"line\">spring.redis.password=</div><div class=\"line\"># 连接池最大连接数（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-active=8</div><div class=\"line\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class=\"line\">spring.redis.pool.max-wait=-1</div><div class=\"line\"># 连接池中的最大空闲连接</div><div class=\"line\">spring.redis.pool.max-idle=8</div><div class=\"line\"># 连接池中的最小空闲连接</div><div class=\"line\">spring.redis.pool.min-idle=0</div><div class=\"line\"># 连接超时时间（毫秒）</div><div class=\"line\">spring.redis.timeout=2000</div></pre></td></tr></table></figure></p>\n<p>在application.properties中配置即可,另外还有<code>Sentinel</code>和<code>Cluster</code>说明支持分布式和集群,博主研究不多就不瞎说这个了.</p>\n<p>自动配置主要在<code>RedisAutoConfiguration</code>中,该类会提供三个bean:</p>\n<ol>\n<li>JedisConnectionFactory : jedis连接控制工厂</li>\n<li>RedisTemplate<Object, Object> : redis操作入口</li>\n<li>StringRedisTemplate : redis操作入口</li>\n</ol>\n<p>那么就开始入口学习.</p>\n<hr>\n<h3 id=\"3-RedisTemplate\"><a href=\"#3-RedisTemplate\" class=\"headerlink\" title=\"3.RedisTemplate\"></a>3.RedisTemplate<K, V></h3><p>RedisTemplate是操作的入口.该类继承了<code>RedisAccessor</code>,可以通过其拿到redis连接,实现了<code>RedisOperations</code>接口,获得了操作redis的能力,如下图所示:<br><img src=\"http://ac-HSNl7zbI.clouddn.com/rUB5pG7qryosXsqkMNQ1u52FgHMVMwAX7OeVM3jy.jpg\" alt=\"\"></p>\n<h4 id=\"3-1-Test-case\"><a href=\"#3-1-Test-case\" class=\"headerlink\" title=\"3.1 Test case\"></a>3.1 Test case</h4><p>那么具体操作过程是怎么样子的呢?写一个简单的测试去跟踪代码,如下代码,往redis中设置key为ping的字串.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(classes = Application.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConnectTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Resource</span></div><div class=\"line\">  <span class=\"keyword\">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSetAndGet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">\"ping\"</span>,<span class=\"string\">\"pong\"</span>);</div><div class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">\"ping\"</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行之后查看redis数据库,你会发现很奇怪的事情,如下图,代码中存入的是ping,但是到redis中后却是一堆字符+ping,这个原因是什么呢?接着跟踪代码.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/9O9oRCxhlph8oRYL6YirrY192jaYIOHAlGXAUemJ.jpg\" alt=\"\"></p>\n<h4 id=\"3-2-XXXOperations\"><a href=\"#3-2-XXXOperations\" class=\"headerlink\" title=\"3.2 XXXOperations\"></a>3.2 XXXOperations<K, V></h4><p>上述代码的第一步先获取到了<code>ValueOperations</code>,在<code>RedisTemplate</code>中同样还有其他<code>XXXOperations</code>,根据官方文档,这些接口是针对redis的每一种命令的操作.如下表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">接口</th>\n<th style=\"text-align:left\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ListOperations</td>\n<td style=\"text-align:left\">Redis list operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetOperations</td>\n<td style=\"text-align:left\">Redis set operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashOperations</td>\n<td style=\"text-align:left\">Redis hash operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HyperLogLogOperations</td>\n<td style=\"text-align:left\">Redis HyperLogLog operations like (pfadd, pfcount,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GeoOperations</td>\n<td style=\"text-align:left\">Redis geospatial operations like GEOADD, GEORADIUS,…​)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundValueOperations</td>\n<td style=\"text-align:left\">Redis string (or value) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundListOperations</td>\n<td style=\"text-align:left\">Redis list key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundSetOperations</td>\n<td style=\"text-align:left\">Redis set key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundZSetOperations</td>\n<td style=\"text-align:left\">Redis zset (or sorted set) key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundHashOperations</td>\n<td style=\"text-align:left\">Redis hash key bound operations</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BoundGeoOperations</td>\n<td style=\"text-align:left\">Redis key bound geospatial operations.</td>\n</tr>\n</tbody>\n</table>\n<p>其中<code>BoundXXXOperations</code>是在key已知的情况下使用,其所有操作都是建立在有一个<code>certain key</code>的前提.可以看下源码就能明白了.</p>\n<h4 id=\"3-3-XXXSerializer\"><a href=\"#3-3-XXXSerializer\" class=\"headerlink\" title=\"3.3 XXXSerializer\"></a>3.3 XXXSerializer</h4><p>那测试代码中第一步是获取了string类型的redis操作入口,然后执行set方法设置键和值,接着分析set方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] rawValue = rawValue(value);</div><div class=\"line\">\texecute(<span class=\"keyword\">new</span> ValueDeserializingRedisCallback(key) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"keyword\">byte</span>[] inRedis(<span class=\"keyword\">byte</span>[] rawKey, RedisConnection connection) &#123;</div><div class=\"line\">\t\t\tconnection.set(rawKey, rawValue);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现<code>rawKey()</code>方法和<code>rawValue()</code>方法对key和value进行了一次序列化操作.该序列化使用的类为RedisTemplate中的<code>XXXSerializer</code>,那么回到RedisTemplate,在<code>afterPropertiesSet()</code>方法中有以下初始化方法,默认使用的序列化方式为<code>JdkSerializationRedisSerializer</code>,也就是ObjectInputStream和ObjectOutputStream写入和读取.这也是写入到redis中却在redis数据库通过”ping”访问不到的原因.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (defaultSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tdefaultSerializer = <span class=\"keyword\">new</span> JdkSerializationRedisSerializer(</div><div class=\"line\">\t\t\t\t\tclassLoader != <span class=\"keyword\">null</span> ? classLoader : <span class=\"keyword\">this</span>.getClass().getClassLoader());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (enableDefaultSerializer) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (keySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tkeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (valueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tvalueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashKeySerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashKeySerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hashValueSerializer == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\thashValueSerializer = defaultSerializer;</div><div class=\"line\">\t\t\t\tdefaultUsed = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div></pre></td></tr></table></figure></p>\n<p>那么SpringDataRedis支持哪些序列化呢?从官网可以看到:<br>StringRedisSerializer: string类型序列化,也是最常用的类型<br>JdkSerializationRedisSerializer: jdk默认序列化<br>OxmSerializer : xml格式<br>JacksonJsonRedisSerializer : json格式</p>\n<p>通过手动注入RedisTemplate,更改所选择的序列化方式.另外Spring提供了最常使用的<code>StringRedisTemplate</code>,实现了<code>StringRedisSerializer</code>序列化方式.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringRedisTemplate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tRedisSerializer&lt;String&gt; stringSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</div><div class=\"line\">\tsetKeySerializer(stringSerializer);</div><div class=\"line\">\tsetValueSerializer(stringSerializer);</div><div class=\"line\">\tsetHashKeySerializer(stringSerializer);</div><div class=\"line\">\tsetHashValueSerializer(stringSerializer);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更改成<code>StringRedisTemplate</code>,再次执行,正常了.<br><img src=\"http://ac-HSNl7zbI.clouddn.com/3PAtzJjJHXquNpAVgWJI0OVh8pJWDhVEl3FbD571.jpg\" alt=\"\"></p>\n<h4 id=\"3-4-总结过程\"><a href=\"#3-4-总结过程\" class=\"headerlink\" title=\"3.4 总结过程\"></a>3.4 总结过程</h4><ol>\n<li>获取RedisTemplate</li>\n<li>获取操作入口XXXOperations</li>\n<li>使用RedisSerializer序列化key和value</li>\n<li>获取conn连接</li>\n<li>执行命令</li>\n</ol>\n<h3 id=\"4-发布与订阅\"><a href=\"#4-发布与订阅\" class=\"headerlink\" title=\"4.发布与订阅\"></a>4.发布与订阅</h3><p>发布与订阅过程需要发布者,订阅者,以及把两者连在一起的桥梁.那么在SpringRedis中怎么实现呢?<br>订阅者:里面有一个处理方法即可.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listen</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Listen.class);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMsg</span><span class=\"params\">(String message)</span> </span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"reciver msg :\"</span> + message);</div><div class=\"line\">    latch.countDown();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CountDownLatch <span class=\"title\">getLatch</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> latch;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>发布者:XXXRedisTemplate.convertAndSend(chanel,msg)即作为发布者存在.</p>\n<p>连接桥梁:RedisMessageListenerContainer,该container监听Redis的消息,分发给各自的监听者.关键代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PublishConfig</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * 注入消息容器</div><div class=\"line\">   * <span class=\"doctag\">@param</span> jedisConnectionFactory jedis连接池</div><div class=\"line\">   * <span class=\"doctag\">@param</span> listenerAdapter 监听适配器</div><div class=\"line\">   * <span class=\"doctag\">@return</span> bean</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RedisMessageListenerContainer <span class=\"title\">container</span><span class=\"params\">(RedisConnectionFactory jedisConnectionFactory,</div><div class=\"line\">      MessageListenerAdapter listenerAdapter)</span></span>&#123;</div><div class=\"line\">    RedisMessageListenerContainer container = <span class=\"keyword\">new</span> RedisMessageListenerContainer();</div><div class=\"line\">    container.setConnectionFactory(jedisConnectionFactory);</div><div class=\"line\">    <span class=\"comment\">//绑定监听者与信道的管理</span></div><div class=\"line\">    container.addMessageListener(listenerAdapter,<span class=\"keyword\">new</span> PatternTopic(<span class=\"string\">\"java\"</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> container;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Bean</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> MessageListenerAdapter <span class=\"title\">adapter</span><span class=\"params\">(Listen listen)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//指定监听者和监听方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MessageListenerAdapter(listen,<span class=\"string\">\"handleMsg\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPublish</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">  stringRedisTemplate.convertAndSend(<span class=\"string\">\"java\"</span>,<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\">  listen.getLatch().await();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/yhidqhoWBD7Un7XLH6WQYjIEl82Ve0R2jzCEzMrn.jpg\" alt=\"\"></p>\n<h3 id=\"5-事务\"><a href=\"#5-事务\" class=\"headerlink\" title=\"5.事务\"></a>5.事务</h3><p>对于事务的操作是通过SessionCallback实现,该接口保证其内部所有操作都是在同一个Session中的,在最后exec的时候执行全部操作.关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisConnectionUtils.bindConnection(factory, enableTransactionSupport);</div><div class=\"line\">execute(<span class=\"keyword\">this</span>)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testMulti</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">boolean</span> isThrow = <span class=\"keyword\">false</span>;</div><div class=\"line\">   List&lt;Object&gt; result = <span class=\"keyword\">null</span>;</div><div class=\"line\">   <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">     result = stringRedisTemplate.execute(<span class=\"keyword\">new</span> SessionCallback&lt;List&lt;Object&gt;&gt;() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">execute</span><span class=\"params\">(RedisOperations operations)</span> <span class=\"keyword\">throws</span></div><div class=\"line\">           DataAccessException </span>&#123;</div><div class=\"line\">         operations.multi();</div><div class=\"line\">         ValueOperations&lt;String,String&gt; ops = operations.opsForValue();</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping1\"</span>,<span class=\"string\">\"pong1\"</span>);</div><div class=\"line\">         ops.set(<span class=\"string\">\"ping2\"</span>,<span class=\"string\">\"pong2\"</span>);</div><div class=\"line\">         <span class=\"keyword\">if</span> (isThrow)&#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"测试异常\"</span>);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> operations.exec();</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">     e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   System.out.println(result);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6.管道\"></a>6.管道</h3><p>直接引用官方案例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pop a specified number of items from a queue</span></div><div class=\"line\">List&lt;Object&gt; results = stringRedisTemplate.executePipelined(</div><div class=\"line\">  <span class=\"keyword\">new</span> RedisCallback&lt;Object&gt;() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInRedis</span><span class=\"params\">(RedisConnection connection)</span> <span class=\"keyword\">throws</span> DataAccessException </span>&#123;</div><div class=\"line\">      StringRedisConnection stringRedisConn = (StringRedisConnection)connection;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; batchSize; i++) &#123;</div><div class=\"line\">        stringRedisConn.rPop(<span class=\"string\">\"myqueue\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>还有脚本执行等,在官方文档中都有案例,这里就不复制粘贴了,如有错误请指出,不胜感激.</p>\n<p>参考文档:</p>\n<p><a href=\"http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template\">http://docs.spring.io/spring-data/redis/docs/1.8.1.RELEASE/reference/html/#redis:template</a></p>\n<p>github:</p>\n<p><a href=\"https://github.com/nl101531/JavaWEB\">https://github.com/nl101531/JavaWEB</a></p>\n"},{"title":"Spring Cloud学习记录(二)--服务治理","date":"2017-06-03T22:44:44.000Z","_content":"看到了`网易乐得团队`的一篇服务治理文章,很全面,直接贴地址了\n\n[Spring Cloud技术分析（1）——服务治理](http://tech.lede.com/2017/03/15/rd/server/SpringCloud1/)\n[Spring Cloud技术分析（2）—— 服务治理实践](http://tech.lede.com/2017/03/29/rd/server/SpringCloud1C/)\n- - - - -\n下面会更新一些实战中遇到的问题\n### 关于配置\n配置主要是查看官方文档,其次再看代码,而代码大多都是AUTOCONFIG等类似的配置类,其本质大多都是注入为Spring Bean,比如我想配置feign所使用的的Httpclient,那么我会发现`FeignRibbonClientAutoConfiguration`这个类,在其中有如下的代码\n```java\n\t@Configuration\n\t@ConditionalOnClass(ApacheHttpClient.class)\n\t@ConditionalOnProperty(value = \"feign.httpclient.enabled\", matchIfMissing = true)\n\tprotected static class HttpClientFeignLoadBalancedConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate HttpClient httpClient;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(Client.class)\n\t\tpublic Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n\t\t\t\tSpringClientFactory clientFactory) {\n\t\t\tApacheHttpClient delegate;\n\t\t\tif (this.httpClient != null) {\n\t\t\t\tdelegate = new ApacheHttpClient(this.httpClient);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelegate = new ApacheHttpClient();\n\t\t\t}\n\t\t\treturn new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n\t\t}\n\t}\n```\n那么就可以得知首先我需要引入`ApacheHttpClient`所在的架包,其次配置文件配置`feign.httpclient.enabled=true`,另外我还可以对`httpClient`自定义,然后注入到Spring中,那么就会默认使用我注入的这个HTTPClient了,然后打个断点,debug看下是否自动配置成功.\n\n### Feign与Ribbon\nFeign中默认开启的负载均衡,至于算法则使用的是Ribbon轮询算法,在`LoadBalancerFeignClient`中有`CachingSpringLoadBalancerFactory`则会缓存每一个server-name对应的负载均衡算法实例,这些实例都来自于`SpringClientFactory`中,根据server-name从中获取,那么意味着要更改对应服务的负载均衡算法只需要在Spring中注入服务名对应的负载均衡实例即可.\n最好的方式是在配置文件中声明,如下方式指定负载均衡使用随机规则\n```yml\nserver-name:\n  ribbon:\n    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule\n```\n- - - - -\n> Demo地址:\n> Spring Cloud Demo :  [https://github.com/nl101531/JavaWEB](https://github.com/nl101531/JavaWEB)\n\n","source":"_posts/spring/Spring Cloud学习记录(二)--服务治理.md","raw":"---\ntitle: Spring Cloud学习记录(二)--服务治理\ntags:\n  - Spring\ncategories: Spring\ndate: 2017-06-04 06:44:44\n---\n看到了`网易乐得团队`的一篇服务治理文章,很全面,直接贴地址了\n\n[Spring Cloud技术分析（1）——服务治理](http://tech.lede.com/2017/03/15/rd/server/SpringCloud1/)\n[Spring Cloud技术分析（2）—— 服务治理实践](http://tech.lede.com/2017/03/29/rd/server/SpringCloud1C/)\n- - - - -\n下面会更新一些实战中遇到的问题\n### 关于配置\n配置主要是查看官方文档,其次再看代码,而代码大多都是AUTOCONFIG等类似的配置类,其本质大多都是注入为Spring Bean,比如我想配置feign所使用的的Httpclient,那么我会发现`FeignRibbonClientAutoConfiguration`这个类,在其中有如下的代码\n```java\n\t@Configuration\n\t@ConditionalOnClass(ApacheHttpClient.class)\n\t@ConditionalOnProperty(value = \"feign.httpclient.enabled\", matchIfMissing = true)\n\tprotected static class HttpClientFeignLoadBalancedConfiguration {\n\n\t\t@Autowired(required = false)\n\t\tprivate HttpClient httpClient;\n\n\t\t@Bean\n\t\t@ConditionalOnMissingBean(Client.class)\n\t\tpublic Client feignClient(CachingSpringLoadBalancerFactory cachingFactory,\n\t\t\t\tSpringClientFactory clientFactory) {\n\t\t\tApacheHttpClient delegate;\n\t\t\tif (this.httpClient != null) {\n\t\t\t\tdelegate = new ApacheHttpClient(this.httpClient);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelegate = new ApacheHttpClient();\n\t\t\t}\n\t\t\treturn new LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);\n\t\t}\n\t}\n```\n那么就可以得知首先我需要引入`ApacheHttpClient`所在的架包,其次配置文件配置`feign.httpclient.enabled=true`,另外我还可以对`httpClient`自定义,然后注入到Spring中,那么就会默认使用我注入的这个HTTPClient了,然后打个断点,debug看下是否自动配置成功.\n\n### Feign与Ribbon\nFeign中默认开启的负载均衡,至于算法则使用的是Ribbon轮询算法,在`LoadBalancerFeignClient`中有`CachingSpringLoadBalancerFactory`则会缓存每一个server-name对应的负载均衡算法实例,这些实例都来自于`SpringClientFactory`中,根据server-name从中获取,那么意味着要更改对应服务的负载均衡算法只需要在Spring中注入服务名对应的负载均衡实例即可.\n最好的方式是在配置文件中声明,如下方式指定负载均衡使用随机规则\n```yml\nserver-name:\n  ribbon:\n    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule\n```\n- - - - -\n> Demo地址:\n> Spring Cloud Demo :  [https://github.com/nl101531/JavaWEB](https://github.com/nl101531/JavaWEB)\n\n","slug":"spring/Spring Cloud学习记录(二)--服务治理","published":1,"updated":"2017-06-04T03:30:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xc000u6wz5pdwmh1gq","content":"<p>看到了<code>网易乐得团队</code>的一篇服务治理文章,很全面,直接贴地址了</p>\n<p><a href=\"http://tech.lede.com/2017/03/15/rd/server/SpringCloud1/\" target=\"_blank\" rel=\"external\">Spring Cloud技术分析（1）——服务治理</a><br><a href=\"http://tech.lede.com/2017/03/29/rd/server/SpringCloud1C/\" target=\"_blank\" rel=\"external\">Spring Cloud技术分析（2）—— 服务治理实践</a></p>\n<hr>\n<p>下面会更新一些实战中遇到的问题</p>\n<h3 id=\"关于配置\"><a href=\"#关于配置\" class=\"headerlink\" title=\"关于配置\"></a>关于配置</h3><p>配置主要是查看官方文档,其次再看代码,而代码大多都是AUTOCONFIG等类似的配置类,其本质大多都是注入为Spring Bean,比如我想配置feign所使用的的Httpclient,那么我会发现<code>FeignRibbonClientAutoConfiguration</code>这个类,在其中有如下的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(ApacheHttpClient.class)</div><div class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"feign.httpclient.enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientFeignLoadBalancedConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> HttpClient httpClient;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(Client.class)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Client <span class=\"title\">feignClient</span><span class=\"params\">(CachingSpringLoadBalancerFactory cachingFactory,</span></span></div><div class=\"line\">\t\t\tSpringClientFactory clientFactory) &#123;</div><div class=\"line\">\t\tApacheHttpClient delegate;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.httpClient != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tdelegate = <span class=\"keyword\">new</span> ApacheHttpClient(<span class=\"keyword\">this</span>.httpClient);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tdelegate = <span class=\"keyword\">new</span> ApacheHttpClient();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么就可以得知首先我需要引入<code>ApacheHttpClient</code>所在的架包,其次配置文件配置<code>feign.httpclient.enabled=true</code>,另外我还可以对<code>httpClient</code>自定义,然后注入到Spring中,那么就会默认使用我注入的这个HTTPClient了,然后打个断点,debug看下是否自动配置成功.</p>\n<h3 id=\"Feign与Ribbon\"><a href=\"#Feign与Ribbon\" class=\"headerlink\" title=\"Feign与Ribbon\"></a>Feign与Ribbon</h3><p>Feign中默认开启的负载均衡,至于算法则使用的是Ribbon轮询算法,在<code>LoadBalancerFeignClient</code>中有<code>CachingSpringLoadBalancerFactory</code>则会缓存每一个server-name对应的负载均衡算法实例,这些实例都来自于<code>SpringClientFactory</code>中,根据server-name从中获取,那么意味着要更改对应服务的负载均衡算法只需要在Spring中注入服务名对应的负载均衡实例即可.<br>最好的方式是在配置文件中声明,如下方式指定负载均衡使用随机规则<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server-name:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.WeightedResponseTimeRule</span></div></pre></td></tr></table></figure></p>\n<hr>\n<blockquote>\n<p>Demo地址:<br>Spring Cloud Demo :  <a href=\"https://github.com/nl101531/JavaWEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/JavaWEB</a></p>\n</blockquote>\n","excerpt":"","more":"<p>看到了<code>网易乐得团队</code>的一篇服务治理文章,很全面,直接贴地址了</p>\n<p><a href=\"http://tech.lede.com/2017/03/15/rd/server/SpringCloud1/\">Spring Cloud技术分析（1）——服务治理</a><br><a href=\"http://tech.lede.com/2017/03/29/rd/server/SpringCloud1C/\">Spring Cloud技术分析（2）—— 服务治理实践</a></p>\n<hr>\n<p>下面会更新一些实战中遇到的问题</p>\n<h3 id=\"关于配置\"><a href=\"#关于配置\" class=\"headerlink\" title=\"关于配置\"></a>关于配置</h3><p>配置主要是查看官方文档,其次再看代码,而代码大多都是AUTOCONFIG等类似的配置类,其本质大多都是注入为Spring Bean,比如我想配置feign所使用的的Httpclient,那么我会发现<code>FeignRibbonClientAutoConfiguration</code>这个类,在其中有如下的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(ApacheHttpClient.class)</div><div class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(value = <span class=\"string\">\"feign.httpclient.enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientFeignLoadBalancedConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> HttpClient httpClient;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(Client.class)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Client <span class=\"title\">feignClient</span><span class=\"params\">(CachingSpringLoadBalancerFactory cachingFactory,</div><div class=\"line\">\t\t\tSpringClientFactory clientFactory)</span> </span>&#123;</div><div class=\"line\">\t\tApacheHttpClient delegate;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.httpClient != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tdelegate = <span class=\"keyword\">new</span> ApacheHttpClient(<span class=\"keyword\">this</span>.httpClient);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tdelegate = <span class=\"keyword\">new</span> ApacheHttpClient();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadBalancerFeignClient(delegate, cachingFactory, clientFactory);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么就可以得知首先我需要引入<code>ApacheHttpClient</code>所在的架包,其次配置文件配置<code>feign.httpclient.enabled=true</code>,另外我还可以对<code>httpClient</code>自定义,然后注入到Spring中,那么就会默认使用我注入的这个HTTPClient了,然后打个断点,debug看下是否自动配置成功.</p>\n<h3 id=\"Feign与Ribbon\"><a href=\"#Feign与Ribbon\" class=\"headerlink\" title=\"Feign与Ribbon\"></a>Feign与Ribbon</h3><p>Feign中默认开启的负载均衡,至于算法则使用的是Ribbon轮询算法,在<code>LoadBalancerFeignClient</code>中有<code>CachingSpringLoadBalancerFactory</code>则会缓存每一个server-name对应的负载均衡算法实例,这些实例都来自于<code>SpringClientFactory</code>中,根据server-name从中获取,那么意味着要更改对应服务的负载均衡算法只需要在Spring中注入服务名对应的负载均衡实例即可.<br>最好的方式是在配置文件中声明,如下方式指定负载均衡使用随机规则<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server-name:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.WeightedResponseTimeRule</span></div></pre></td></tr></table></figure></p>\n<hr>\n<blockquote>\n<p>Demo地址:<br>Spring Cloud Demo :  <a href=\"https://github.com/nl101531/JavaWEB\">https://github.com/nl101531/JavaWEB</a></p>\n</blockquote>\n"},{"title":"Spring Security学习记录(一) -- 初识Spring Security","date":"2017-06-19T06:08:25.000Z","_content":"\n###  Spring Security是什么?\nSpring Security是一套认证授权框架,支持认证模式如`HTTP BASIC 认证头 (基于 IETF RFC-based 标准)`,`HTTP Digest 认证头 ( IETF RFC-based 标准)`,`Form-based authentication (用于简单的用户界面)`,`OpenID 认证`等,Spring Security使得当前系统可以快速集成这些验证机制亦或是实现自己的一套验证机制.\n\n### 使用Spring Security\nSpring Security3之后提供了Java Config的配置方式,但是我觉得xml方式比较容易理解其整体结构,所以本文都是基于xml配置的,在github上该项目会提供Java Config方式作为对比.\n\n#### pom依赖\n```java\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.4.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n由于使用了Spring Boot,所以需要使用`@EnableWebSecurity`注解启用Spring Security,并指明其配置文件为classpath下的`spring-security.xml`\n```java\n@Configuration\n@EnableWebSecurity\n@ImportResource(locations = \"classpath:spring-security.xml\")\npublic class SecurityConfig {\n}\n```\n\n#### xml配置\n在`spring-security.xml`中引入官方提供的命名空间,然后简单配置下,该配置大概意思是对所有请求的url拦截,必须有User权限的用户才能访问.\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:security=\"http://www.springframework.org/schema/security\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n\t\thttp://www.springframework.org/schema/security\n\t\thttp://www.springframework.org/schema/security/spring-security.xsd\">\n\t\n\t<security:http >\n        <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\"/>\n        <security:form-login/>\n        <security:http-basic/>\n        <security:logout/>\n    </security:http>\n\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n\n</beans>\n```\n#### 访问测试\n该页面为Spring Security自动生成的登录页面,当我们访问任何连接都会被重定向到该登录页面,输入`user:123456`登录后才能有权限访问.\n![](http://oobu4m7ko.bkt.clouddn.com/1497854910.png?imageMogr2/thumbnail/!70p)\n\n#### 分析\n上述是一个简单的Demo,分析则是从这个Demo深入浅出.\n**1.Spring Security是如何拦截请求的?**\n传统的xml配置都会在web.xml里面配置如下过滤器.\n```xml\n   <filter>\n      <filter-name>springSecurityFilterChain</filter-name>\n     <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n   </filter>\n   <filter-mapping>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <url-pattern>/*</url-pattern>\n   </filter-mapping>\n```\n可以看出入口点就是该类,该类会从Spring容器中读取名称为`springSecurityFilterChain`的一个Filter实例,从而获取到对应代理的Filter.\n```java\n\tprotected Filter initDelegate(WebApplicationContext wac) throws ServletException {\n\t\tFilter delegate = wac.getBean(getTargetBeanName(), Filter.class);\n\t\tif (isTargetFilterLifecycle()) {\n\t\t\tdelegate.init(getFilterConfig());\n\t\t}\n\t\treturn delegate;\n\t}\n```\n然后在doFilter方法中调用该委托的filter,也就实现的拦截请求.\n```java\n\tprotected void invokeDelegate(\n\t\t\tFilter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tdelegate.doFilter(request, response, filterChain);\n\t}\n```\n**2. Spring Security拦截请求后是如何处理的?**\n打断点可以发现`DelegatingFilterProxy`实际上代理的是`FilterChainProxy`这个类,该类中有`\tprivate List<SecurityFilterChain> filterChains;`全局变量,那么`SecurityFilterChain`为何物?\n```java\npublic interface SecurityFilterChain {\n\n\tboolean matches(HttpServletRequest request);\n\n\tList<Filter> getFilters();\n}\n```\n从源码可以判断SecurityFilterChain是一套规则所对应的Filter链集合.再看源码`getFilters`,该方法会根据规则(也就是配置中的`security:http`标签)获取一个SecurityFilterChain中的一套对应规则的filter链.\n```java\n\tprivate List<Filter> getFilters(HttpServletRequest request) {\n\t\tfor (SecurityFilterChain chain : filterChains) {\n\t\t\tif (chain.matches(request)) {\n\t\t\t\treturn chain.getFilters();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n最后在`doFilterInternal`方法中创建一个`VirtualFilterChain`类,调用其`doFilter`方法.`VirtualFilterChain`这个类很有意思,该类继承了`FilterChain`类,那么其就拥有了转交请求到指定filter的能力,另外其还拥有一套filter链`List<Filter> additionalFilters;`,那么这个类就控制了整个Spring Security的执行流程,那么它是怎么实现的呢?\n开始我以为是一个循环,然而看了源码才发现自己太low了.\n```java\n        currentPosition++;\n\t\tFilter nextFilter = additionalFilters.get(currentPosition - 1);\n\t\tnextFilter.doFilter(request, response, this);\n```\n`currentPosition`与`additionalFilters`都是全局变量,其在调用filter链的时候每次都把自己本身在`doFilter`传值过去,每一个Filter链节点执行完毕后再返回`VirtualFilterChain`的`doFilter`方法,开启下一个节点执行.其结构如下面代码所示:\n```java    \ninterface IA{\n    void doSomeThing(IAChain chain);\n  }\n  static class IAClass implements IA{\n\n    @Override\n    public void doSomeThing(IAChain chain) {\n      System.out.println(\"i am IAClass\");\n      chain.doSomeThing();\n    }\n  }\n\n  interface IAChain{\n    void doSomeThing();\n  }\n\n  static class IAChainClass implements IAChain{\n\n    List<IA> IAChains = new ArrayList<IA>();\n\n    public IAChainClass() {\n      IAChains.add(new IAClass());\n      IAChains.add(new IAClass());\n      IAChains.add(new IAClass());\n    }\n\n    int position = 0;\n\n    @Override\n    public void doSomeThing() {\n      if (position == IAChains.size()) {\n        System.out.println(\"end\");\n        return;\n      }\n      IA ia = IAChains.get(position++);\n      ia.doSomeThing(this);\n    }\n  }\n```\n当调用`iaChainClass.doSomeThing()`输出\n```java\ni am IAClass\ni am IAClass\ni am IAClass\nend\n```\n- - - - -\n调用链的实现还可以使用继承来实现,每次执行前先执行super()方法.\n\nok,下一章分析具体的Filter链中的节点,探究下Spring Security是如何进行用户认证与权限控制的.\n","source":"_posts/spring/Spring Security学习记录(一) -- Spring Security学习记录(一) -- 初识Spring Security.md","raw":"---\ntitle: Spring Security学习记录(一) -- 初识Spring Security\ntags:\n  - Spring   \ncategories: Spring\ndate: 2017-06-19 14:08:25 \n\n---\n\n###  Spring Security是什么?\nSpring Security是一套认证授权框架,支持认证模式如`HTTP BASIC 认证头 (基于 IETF RFC-based 标准)`,`HTTP Digest 认证头 ( IETF RFC-based 标准)`,`Form-based authentication (用于简单的用户界面)`,`OpenID 认证`等,Spring Security使得当前系统可以快速集成这些验证机制亦或是实现自己的一套验证机制.\n\n### 使用Spring Security\nSpring Security3之后提供了Java Config的配置方式,但是我觉得xml方式比较容易理解其整体结构,所以本文都是基于xml配置的,在github上该项目会提供Java Config方式作为对比.\n\n#### pom依赖\n```java\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.4.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n由于使用了Spring Boot,所以需要使用`@EnableWebSecurity`注解启用Spring Security,并指明其配置文件为classpath下的`spring-security.xml`\n```java\n@Configuration\n@EnableWebSecurity\n@ImportResource(locations = \"classpath:spring-security.xml\")\npublic class SecurityConfig {\n}\n```\n\n#### xml配置\n在`spring-security.xml`中引入官方提供的命名空间,然后简单配置下,该配置大概意思是对所有请求的url拦截,必须有User权限的用户才能访问.\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:security=\"http://www.springframework.org/schema/security\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n\t\thttp://www.springframework.org/schema/security\n\t\thttp://www.springframework.org/schema/security/spring-security.xsd\">\n\t\n\t<security:http >\n        <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\"/>\n        <security:form-login/>\n        <security:http-basic/>\n        <security:logout/>\n    </security:http>\n\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n\n</beans>\n```\n#### 访问测试\n该页面为Spring Security自动生成的登录页面,当我们访问任何连接都会被重定向到该登录页面,输入`user:123456`登录后才能有权限访问.\n![](http://oobu4m7ko.bkt.clouddn.com/1497854910.png?imageMogr2/thumbnail/!70p)\n\n#### 分析\n上述是一个简单的Demo,分析则是从这个Demo深入浅出.\n**1.Spring Security是如何拦截请求的?**\n传统的xml配置都会在web.xml里面配置如下过滤器.\n```xml\n   <filter>\n      <filter-name>springSecurityFilterChain</filter-name>\n     <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n   </filter>\n   <filter-mapping>\n      <filter-name>springSecurityFilterChain</filter-name>\n      <url-pattern>/*</url-pattern>\n   </filter-mapping>\n```\n可以看出入口点就是该类,该类会从Spring容器中读取名称为`springSecurityFilterChain`的一个Filter实例,从而获取到对应代理的Filter.\n```java\n\tprotected Filter initDelegate(WebApplicationContext wac) throws ServletException {\n\t\tFilter delegate = wac.getBean(getTargetBeanName(), Filter.class);\n\t\tif (isTargetFilterLifecycle()) {\n\t\t\tdelegate.init(getFilterConfig());\n\t\t}\n\t\treturn delegate;\n\t}\n```\n然后在doFilter方法中调用该委托的filter,也就实现的拦截请求.\n```java\n\tprotected void invokeDelegate(\n\t\t\tFilter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tdelegate.doFilter(request, response, filterChain);\n\t}\n```\n**2. Spring Security拦截请求后是如何处理的?**\n打断点可以发现`DelegatingFilterProxy`实际上代理的是`FilterChainProxy`这个类,该类中有`\tprivate List<SecurityFilterChain> filterChains;`全局变量,那么`SecurityFilterChain`为何物?\n```java\npublic interface SecurityFilterChain {\n\n\tboolean matches(HttpServletRequest request);\n\n\tList<Filter> getFilters();\n}\n```\n从源码可以判断SecurityFilterChain是一套规则所对应的Filter链集合.再看源码`getFilters`,该方法会根据规则(也就是配置中的`security:http`标签)获取一个SecurityFilterChain中的一套对应规则的filter链.\n```java\n\tprivate List<Filter> getFilters(HttpServletRequest request) {\n\t\tfor (SecurityFilterChain chain : filterChains) {\n\t\t\tif (chain.matches(request)) {\n\t\t\t\treturn chain.getFilters();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n最后在`doFilterInternal`方法中创建一个`VirtualFilterChain`类,调用其`doFilter`方法.`VirtualFilterChain`这个类很有意思,该类继承了`FilterChain`类,那么其就拥有了转交请求到指定filter的能力,另外其还拥有一套filter链`List<Filter> additionalFilters;`,那么这个类就控制了整个Spring Security的执行流程,那么它是怎么实现的呢?\n开始我以为是一个循环,然而看了源码才发现自己太low了.\n```java\n        currentPosition++;\n\t\tFilter nextFilter = additionalFilters.get(currentPosition - 1);\n\t\tnextFilter.doFilter(request, response, this);\n```\n`currentPosition`与`additionalFilters`都是全局变量,其在调用filter链的时候每次都把自己本身在`doFilter`传值过去,每一个Filter链节点执行完毕后再返回`VirtualFilterChain`的`doFilter`方法,开启下一个节点执行.其结构如下面代码所示:\n```java    \ninterface IA{\n    void doSomeThing(IAChain chain);\n  }\n  static class IAClass implements IA{\n\n    @Override\n    public void doSomeThing(IAChain chain) {\n      System.out.println(\"i am IAClass\");\n      chain.doSomeThing();\n    }\n  }\n\n  interface IAChain{\n    void doSomeThing();\n  }\n\n  static class IAChainClass implements IAChain{\n\n    List<IA> IAChains = new ArrayList<IA>();\n\n    public IAChainClass() {\n      IAChains.add(new IAClass());\n      IAChains.add(new IAClass());\n      IAChains.add(new IAClass());\n    }\n\n    int position = 0;\n\n    @Override\n    public void doSomeThing() {\n      if (position == IAChains.size()) {\n        System.out.println(\"end\");\n        return;\n      }\n      IA ia = IAChains.get(position++);\n      ia.doSomeThing(this);\n    }\n  }\n```\n当调用`iaChainClass.doSomeThing()`输出\n```java\ni am IAClass\ni am IAClass\ni am IAClass\nend\n```\n- - - - -\n调用链的实现还可以使用继承来实现,每次执行前先执行super()方法.\n\nok,下一章分析具体的Filter链中的节点,探究下Spring Security是如何进行用户认证与权限控制的.\n","slug":"spring/Spring Security学习记录(一) -- Spring Security学习记录(一) -- 初识Spring Security","published":1,"updated":"2017-06-22T13:55:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xd000w6wz5udloy6it","content":"<h3 id=\"Spring-Security是什么\"><a href=\"#Spring-Security是什么\" class=\"headerlink\" title=\"Spring Security是什么?\"></a>Spring Security是什么?</h3><p>Spring Security是一套认证授权框架,支持认证模式如<code>HTTP BASIC 认证头 (基于 IETF RFC-based 标准)</code>,<code>HTTP Digest 认证头 ( IETF RFC-based 标准)</code>,<code>Form-based authentication (用于简单的用户界面)</code>,<code>OpenID 认证</code>等,Spring Security使得当前系统可以快速集成这些验证机制亦或是实现自己的一套验证机制.</p>\n<h3 id=\"使用Spring-Security\"><a href=\"#使用Spring-Security\" class=\"headerlink\" title=\"使用Spring Security\"></a>使用Spring Security</h3><p>Spring Security3之后提供了Java Config的配置方式,但是我觉得xml方式比较容易理解其整体结构,所以本文都是基于xml配置的,在github上该项目会提供Java Config方式作为对比.</p>\n<h4 id=\"pom依赖\"><a href=\"#pom依赖\" class=\"headerlink\" title=\"pom依赖\"></a>pom依赖</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>由于使用了Spring Boot,所以需要使用<code>@EnableWebSecurity</code>注解启用Spring Security,并指明其配置文件为classpath下的<code>spring-security.xml</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"meta\">@ImportResource</span>(locations = <span class=\"string\">\"classpath:spring-security.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h4><p>在<code>spring-security.xml</code>中引入官方提供的命名空间,然后简单配置下,该配置大概意思是对所有请求的url拦截,必须有User权限的用户才能访问.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/security</div><div class=\"line\">\t\thttp://www.springframework.org/schema/security/spring-security.xsd\"&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:http-basic</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:logout</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h4><p>该页面为Spring Security自动生成的登录页面,当我们访问任何连接都会被重定向到该登录页面,输入<code>user:123456</code>登录后才能有权限访问.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497854910.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>上述是一个简单的Demo,分析则是从这个Demo深入浅出.<br><strong>1.Spring Security是如何拦截请求的?</strong><br>传统的xml配置都会在web.xml里面配置如下过滤器.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以看出入口点就是该类,该类会从Spring容器中读取名称为<code>springSecurityFilterChain</code>的一个Filter实例,从而获取到对应代理的Filter.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Filter <span class=\"title\">initDelegate</span><span class=\"params\">(WebApplicationContext wac)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\tFilter delegate = wac.getBean(getTargetBeanName(), Filter.class);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (isTargetFilterLifecycle()) &#123;</div><div class=\"line\">\t\tdelegate.init(getFilterConfig());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> delegate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在doFilter方法中调用该委托的filter,也就实现的拦截请求.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeDelegate</span><span class=\"params\">(</span></span></div><div class=\"line\">\t\tFilter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)</div><div class=\"line\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException &#123;</div><div class=\"line\"></div><div class=\"line\">\tdelegate.doFilter(request, response, filterChain);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2. Spring Security拦截请求后是如何处理的?</strong><br>打断点可以发现<code>DelegatingFilterProxy</code>实际上代理的是<code>FilterChainProxy</code>这个类,该类中有<code>private List&lt;SecurityFilterChain&gt; filterChains;</code>全局变量,那么<code>SecurityFilterChain</code>为何物?<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SecurityFilterChain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(HttpServletRequest request)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">List&lt;Filter&gt; <span class=\"title\">getFilters</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码可以判断SecurityFilterChain是一套规则所对应的Filter链集合.再看源码<code>getFilters</code>,该方法会根据规则(也就是配置中的<code>security:http</code>标签)获取一个SecurityFilterChain中的一套对应规则的filter链.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;Filter&gt; <span class=\"title\">getFilters</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (SecurityFilterChain chain : filterChains) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (chain.matches(request)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> chain.getFilters();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后在<code>doFilterInternal</code>方法中创建一个<code>VirtualFilterChain</code>类,调用其<code>doFilter</code>方法.<code>VirtualFilterChain</code>这个类很有意思,该类继承了<code>FilterChain</code>类,那么其就拥有了转交请求到指定filter的能力,另外其还拥有一套filter链<code>List&lt;Filter&gt; additionalFilters;</code>,那么这个类就控制了整个Spring Security的执行流程,那么它是怎么实现的呢?<br>开始我以为是一个循环,然而看了源码才发现自己太low了.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">      currentPosition++;</div><div class=\"line\">Filter nextFilter = additionalFilters.get(currentPosition - <span class=\"number\">1</span>);</div><div class=\"line\">nextFilter.doFilter(request, response, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p><code>currentPosition</code>与<code>additionalFilters</code>都是全局变量,其在调用filter链的时候每次都把自己本身在<code>doFilter</code>传值过去,每一个Filter链节点执行完毕后再返回<code>VirtualFilterChain</code>的<code>doFilter</code>方法,开启下一个节点执行.其结构如下面代码所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IA</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(IAChain chain)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IAClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">IA</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(IAChain chain)</span> </span>&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"i am IAClass\"</span>);</div><div class=\"line\">      chain.doSomeThing();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAChain</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IAChainClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAChain</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;IA&gt; IAChains = <span class=\"keyword\">new</span> ArrayList&lt;IA&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IAChainClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> position = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (position == IAChains.size()) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      IA ia = IAChains.get(position++);</div><div class=\"line\">      ia.doSomeThing(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>当调用<code>iaChainClass.doSomeThing()</code>输出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">i am IAClass</div><div class=\"line\">i am IAClass</div><div class=\"line\">i am IAClass</div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<hr>\n<p>调用链的实现还可以使用继承来实现,每次执行前先执行super()方法.</p>\n<p>ok,下一章分析具体的Filter链中的节点,探究下Spring Security是如何进行用户认证与权限控制的.</p>\n","excerpt":"","more":"<h3 id=\"Spring-Security是什么\"><a href=\"#Spring-Security是什么\" class=\"headerlink\" title=\"Spring Security是什么?\"></a>Spring Security是什么?</h3><p>Spring Security是一套认证授权框架,支持认证模式如<code>HTTP BASIC 认证头 (基于 IETF RFC-based 标准)</code>,<code>HTTP Digest 认证头 ( IETF RFC-based 标准)</code>,<code>Form-based authentication (用于简单的用户界面)</code>,<code>OpenID 认证</code>等,Spring Security使得当前系统可以快速集成这些验证机制亦或是实现自己的一套验证机制.</p>\n<h3 id=\"使用Spring-Security\"><a href=\"#使用Spring-Security\" class=\"headerlink\" title=\"使用Spring Security\"></a>使用Spring Security</h3><p>Spring Security3之后提供了Java Config的配置方式,但是我觉得xml方式比较容易理解其整体结构,所以本文都是基于xml配置的,在github上该项目会提供Java Config方式作为对比.</p>\n<h4 id=\"pom依赖\"><a href=\"#pom依赖\" class=\"headerlink\" title=\"pom依赖\"></a>pom依赖</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;parent&gt;</div><div class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">     &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class=\"line\"> &lt;/parent&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;dependencies&gt;</div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\">     &lt;dependency&gt;</div><div class=\"line\">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">     &lt;/dependency&gt;</div><div class=\"line\"> &lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<p>由于使用了Spring Boot,所以需要使用<code>@EnableWebSecurity</code>注解启用Spring Security,并指明其配置文件为classpath下的<code>spring-security.xml</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"meta\">@ImportResource</span>(locations = <span class=\"string\">\"classpath:spring-security.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"xml配置\"><a href=\"#xml配置\" class=\"headerlink\" title=\"xml配置\"></a>xml配置</h4><p>在<code>spring-security.xml</code>中引入官方提供的命名空间,然后简单配置下,该配置大概意思是对所有请求的url拦截,必须有User权限的用户才能访问.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/security</div><div class=\"line\">\t\thttp://www.springframework.org/schema/security/spring-security.xsd\"</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:http-basic</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:logout</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h4><p>该页面为Spring Security自动生成的登录页面,当我们访问任何连接都会被重定向到该登录页面,输入<code>user:123456</code>登录后才能有权限访问.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1497854910.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>上述是一个简单的Demo,分析则是从这个Demo深入浅出.<br><strong>1.Spring Security是如何拦截请求的?</strong><br>传统的xml配置都会在web.xml里面配置如下过滤器.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以看出入口点就是该类,该类会从Spring容器中读取名称为<code>springSecurityFilterChain</code>的一个Filter实例,从而获取到对应代理的Filter.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Filter <span class=\"title\">initDelegate</span><span class=\"params\">(WebApplicationContext wac)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</div><div class=\"line\">\tFilter delegate = wac.getBean(getTargetBeanName(), Filter.class);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (isTargetFilterLifecycle()) &#123;</div><div class=\"line\">\t\tdelegate.init(getFilterConfig());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> delegate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在doFilter方法中调用该委托的filter,也就实现的拦截请求.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeDelegate</span><span class=\"params\">(</div><div class=\"line\">\t\tFilter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)</span></div><div class=\"line\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tdelegate.doFilter(request, response, filterChain);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>2. Spring Security拦截请求后是如何处理的?</strong><br>打断点可以发现<code>DelegatingFilterProxy</code>实际上代理的是<code>FilterChainProxy</code>这个类,该类中有<code>private List&lt;SecurityFilterChain&gt; filterChains;</code>全局变量,那么<code>SecurityFilterChain</code>为何物?<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SecurityFilterChain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(HttpServletRequest request)</span></span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">List&lt;Filter&gt; <span class=\"title\">getFilters</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码可以判断SecurityFilterChain是一套规则所对应的Filter链集合.再看源码<code>getFilters</code>,该方法会根据规则(也就是配置中的<code>security:http</code>标签)获取一个SecurityFilterChain中的一套对应规则的filter链.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> List&lt;Filter&gt; <span class=\"title\">getFilters</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (SecurityFilterChain chain : filterChains) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (chain.matches(request)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> chain.getFilters();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后在<code>doFilterInternal</code>方法中创建一个<code>VirtualFilterChain</code>类,调用其<code>doFilter</code>方法.<code>VirtualFilterChain</code>这个类很有意思,该类继承了<code>FilterChain</code>类,那么其就拥有了转交请求到指定filter的能力,另外其还拥有一套filter链<code>List&lt;Filter&gt; additionalFilters;</code>,那么这个类就控制了整个Spring Security的执行流程,那么它是怎么实现的呢?<br>开始我以为是一个循环,然而看了源码才发现自己太low了.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">      currentPosition++;</div><div class=\"line\">Filter nextFilter = additionalFilters.get(currentPosition - <span class=\"number\">1</span>);</div><div class=\"line\">nextFilter.doFilter(request, response, <span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p><code>currentPosition</code>与<code>additionalFilters</code>都是全局变量,其在调用filter链的时候每次都把自己本身在<code>doFilter</code>传值过去,每一个Filter链节点执行完毕后再返回<code>VirtualFilterChain</code>的<code>doFilter</code>方法,开启下一个节点执行.其结构如下面代码所示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IA</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(IAChain chain)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IAClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">IA</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">(IAChain chain)</span> </span>&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"i am IAClass\"</span>);</div><div class=\"line\">      chain.doSomeThing();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAChain</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IAChainClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAChain</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;IA&gt; IAChains = <span class=\"keyword\">new</span> ArrayList&lt;IA&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IAChainClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">      IAChains.add(<span class=\"keyword\">new</span> IAClass());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> position = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (position == IAChains.size()) &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      IA ia = IAChains.get(position++);</div><div class=\"line\">      ia.doSomeThing(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>当调用<code>iaChainClass.doSomeThing()</code>输出<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">i am IAClass</div><div class=\"line\">i am IAClass</div><div class=\"line\">i am IAClass</div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<hr>\n<p>调用链的实现还可以使用继承来实现,每次执行前先执行super()方法.</p>\n<p>ok,下一章分析具体的Filter链中的节点,探究下Spring Security是如何进行用户认证与权限控制的.</p>\n"},{"title":"Spring Security学习记录(三) -- JSON Web Token实践","date":"2017-06-26T08:36:33.000Z","_content":"JWT实际上与Spring Security没多大关系,本文打算使用Spring Security配合JWT这种方式完成用户的认证和授权.\n- - - - -\nJSON Web Token(JWT),是一个开放安全的行业标准,用于多个系统之间传递安全可靠的信息.关于其解释可以参考博文:\n[JSON Web Token - 在Web应用间安全地传递信息](http://blog.leapoahead.com/2015/09/06/understanding-jwt/)\n因为原作者写的很详细,这里就只说下个人认为比较重要的问题.\n\n### JWT是什么样子的结构?\nJSON Web Token说到底也是一串token,其形式分三段,看下图,**红色**的为Header,指定token类型与签名类型,**紫色**的为请求体,存储用户id等关键信息,最后**蓝色**的为签名,保证整个信息的完整性,可靠性.\n![](http://oobu4m7ko.bkt.clouddn.com/1498469217.png?imageMogr2/thumbnail/!70p)\n其中playload中可以\n- iss: 该JWT的签发者\n- sub: 该JWT所面向的用户\n- aud: 接收该JWT的一方\n- exp(expires): 什么时候过期，这里是一个Unix时间戳\n- iat(issued at): 在什么时候签发的\n- nbf: 定义在什么时间之前，该jwt都是不可用的.\n- jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n### JWT是一个怎样的流程?\n1. 客户端使用账户密码请求登录接口\n2. 登录成功后返回JWT\n3. 客户端再次请求其他接口时带上JWT\n4. 服务端接收到JWT后验证签名的有效性.\n\n### JWT解决了什么问题?\n**token被劫持**\n一开始理解很容易陷入一个误区,比如有人会问对于JWT来说,jwt被劫持了的话,那么对方就可以伪造请求,这东西怎么能保证安全呢?\n这里问题是没理解好JWT,JWT解决的是认证与授权的问题,上述劫持或者类似的中间人攻击是JWT不可避免的,也是其他认证与授权方式不可避免的,想避免可以使用HTTPS,或者签发jwt的时候记录下Client的ip地址,这些就和JWT没关系了.\n\n**与Session的区别**\nsession实际上是基于cookie来传输的,最重要的session信息是存储在服务器的,所以服务器每次可以通过cookie中的sessionId获取到当前会话的用户,对于单台服务器这样做没问题,但是对于多台就涉及到共享session的问题了,而且认证用户的增多,session会占用大量的服务器内存.\n那么jwt是存储在客户端的,服务器不需要存储jwt,jwt里面有用户id,服务器拿到jwt验证后可以获得用户信息.也就实现了session的功能,但是相比session,jwt是无状态的,其不与任何机器绑定,只要签名秘钥足够的安全就能保证jwt的可靠性.\n\n### JWT下服务端认为什么样子的请求是可信的?\n对于服务端来说,无法确定下一个请求是哪一个用户,哪一个终端发出,所以其需要一些信息定位到该用户或者该机器,对于JWT来说其Playload里面存储着UserId,那么服务端接收到Token后对其进行签名验证,验证成功,则认为其是**可信的**,然后通过UserId从DB或者Cache中查询出来用户信息.\n\n### 为什么JWT能保证信息传输的安全可靠?\n比如现在有token\n```text\neyJhbGciOiJIUzI1NiJ9.\neyJleHAiOjE0OTg0ODIxNTQsInN1YiI6InF1ZGluZyIsInVzZXJJZCI6IjEwMzc5NDAxIiwicm9sZSI6ImFkbWluIn0.\n-YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY\n\n```\n```json\nHeader\n{\n  \"alg\": \"HS256\"\n}\nPlayload\n{\n  \"exp\": 1498482154,\n  \"sub\": \"quding\",\n  \"userId\": \"10379401\",\n  \"role\": \"admin\"\n}\nSign\nYFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY\n```\n假设我的playload被其他人劫持了,其他人把userId修改为他自己的,比如123456,但是其没有签名的秘钥,所以他就没法生成签名.\n服务端收到该Token后,会用先Base64解码出来相应的信息,然后重新生成sign,使用该sign与客户端传来的Sign进行对比,一样则证明没被修改,也就是可信的请求,否则拒绝该请求.\n\n\n","source":"_posts/spring/Spring Security学习记录(三) -- JSON Web Token实践.md","raw":"---\ntitle: Spring Security学习记录(三) -- JSON Web Token实践\ntags:\n  - Spring    \ncategories: Spring\ndate: 2017-06-26 16:36:33\n---\nJWT实际上与Spring Security没多大关系,本文打算使用Spring Security配合JWT这种方式完成用户的认证和授权.\n- - - - -\nJSON Web Token(JWT),是一个开放安全的行业标准,用于多个系统之间传递安全可靠的信息.关于其解释可以参考博文:\n[JSON Web Token - 在Web应用间安全地传递信息](http://blog.leapoahead.com/2015/09/06/understanding-jwt/)\n因为原作者写的很详细,这里就只说下个人认为比较重要的问题.\n\n### JWT是什么样子的结构?\nJSON Web Token说到底也是一串token,其形式分三段,看下图,**红色**的为Header,指定token类型与签名类型,**紫色**的为请求体,存储用户id等关键信息,最后**蓝色**的为签名,保证整个信息的完整性,可靠性.\n![](http://oobu4m7ko.bkt.clouddn.com/1498469217.png?imageMogr2/thumbnail/!70p)\n其中playload中可以\n- iss: 该JWT的签发者\n- sub: 该JWT所面向的用户\n- aud: 接收该JWT的一方\n- exp(expires): 什么时候过期，这里是一个Unix时间戳\n- iat(issued at): 在什么时候签发的\n- nbf: 定义在什么时间之前，该jwt都是不可用的.\n- jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n### JWT是一个怎样的流程?\n1. 客户端使用账户密码请求登录接口\n2. 登录成功后返回JWT\n3. 客户端再次请求其他接口时带上JWT\n4. 服务端接收到JWT后验证签名的有效性.\n\n### JWT解决了什么问题?\n**token被劫持**\n一开始理解很容易陷入一个误区,比如有人会问对于JWT来说,jwt被劫持了的话,那么对方就可以伪造请求,这东西怎么能保证安全呢?\n这里问题是没理解好JWT,JWT解决的是认证与授权的问题,上述劫持或者类似的中间人攻击是JWT不可避免的,也是其他认证与授权方式不可避免的,想避免可以使用HTTPS,或者签发jwt的时候记录下Client的ip地址,这些就和JWT没关系了.\n\n**与Session的区别**\nsession实际上是基于cookie来传输的,最重要的session信息是存储在服务器的,所以服务器每次可以通过cookie中的sessionId获取到当前会话的用户,对于单台服务器这样做没问题,但是对于多台就涉及到共享session的问题了,而且认证用户的增多,session会占用大量的服务器内存.\n那么jwt是存储在客户端的,服务器不需要存储jwt,jwt里面有用户id,服务器拿到jwt验证后可以获得用户信息.也就实现了session的功能,但是相比session,jwt是无状态的,其不与任何机器绑定,只要签名秘钥足够的安全就能保证jwt的可靠性.\n\n### JWT下服务端认为什么样子的请求是可信的?\n对于服务端来说,无法确定下一个请求是哪一个用户,哪一个终端发出,所以其需要一些信息定位到该用户或者该机器,对于JWT来说其Playload里面存储着UserId,那么服务端接收到Token后对其进行签名验证,验证成功,则认为其是**可信的**,然后通过UserId从DB或者Cache中查询出来用户信息.\n\n### 为什么JWT能保证信息传输的安全可靠?\n比如现在有token\n```text\neyJhbGciOiJIUzI1NiJ9.\neyJleHAiOjE0OTg0ODIxNTQsInN1YiI6InF1ZGluZyIsInVzZXJJZCI6IjEwMzc5NDAxIiwicm9sZSI6ImFkbWluIn0.\n-YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY\n\n```\n```json\nHeader\n{\n  \"alg\": \"HS256\"\n}\nPlayload\n{\n  \"exp\": 1498482154,\n  \"sub\": \"quding\",\n  \"userId\": \"10379401\",\n  \"role\": \"admin\"\n}\nSign\nYFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY\n```\n假设我的playload被其他人劫持了,其他人把userId修改为他自己的,比如123456,但是其没有签名的秘钥,所以他就没法生成签名.\n服务端收到该Token后,会用先Base64解码出来相应的信息,然后重新生成sign,使用该sign与客户端传来的Sign进行对比,一样则证明没被修改,也就是可信的请求,否则拒绝该请求.\n\n\n","slug":"spring/Spring Security学习记录(三) -- JSON Web Token实践","published":1,"updated":"2017-06-26T11:11:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xh000z6wz5ny2ad6w6","content":"<p>JWT实际上与Spring Security没多大关系,本文打算使用Spring Security配合JWT这种方式完成用户的认证和授权.</p>\n<hr>\n<p>JSON Web Token(JWT),是一个开放安全的行业标准,用于多个系统之间传递安全可靠的信息.关于其解释可以参考博文:<br><a href=\"http://blog.leapoahead.com/2015/09/06/understanding-jwt/\" target=\"_blank\" rel=\"external\">JSON Web Token - 在Web应用间安全地传递信息</a><br>因为原作者写的很详细,这里就只说下个人认为比较重要的问题.</p>\n<h3 id=\"JWT是什么样子的结构\"><a href=\"#JWT是什么样子的结构\" class=\"headerlink\" title=\"JWT是什么样子的结构?\"></a>JWT是什么样子的结构?</h3><p>JSON Web Token说到底也是一串token,其形式分三段,看下图,<strong>红色</strong>的为Header,指定token类型与签名类型,<strong>紫色</strong>的为请求体,存储用户id等关键信息,最后<strong>蓝色</strong>的为签名,保证整个信息的完整性,可靠性.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498469217.png?imageMogr2/thumbnail/!70p\" alt=\"\"><br>其中playload中可以</p>\n<ul>\n<li>iss: 该JWT的签发者</li>\n<li>sub: 该JWT所面向的用户</li>\n<li>aud: 接收该JWT的一方</li>\n<li>exp(expires): 什么时候过期，这里是一个Unix时间戳</li>\n<li>iat(issued at): 在什么时候签发的</li>\n<li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li>\n<li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>\n</ul>\n<h3 id=\"JWT是一个怎样的流程\"><a href=\"#JWT是一个怎样的流程\" class=\"headerlink\" title=\"JWT是一个怎样的流程?\"></a>JWT是一个怎样的流程?</h3><ol>\n<li>客户端使用账户密码请求登录接口</li>\n<li>登录成功后返回JWT</li>\n<li>客户端再次请求其他接口时带上JWT</li>\n<li>服务端接收到JWT后验证签名的有效性.</li>\n</ol>\n<h3 id=\"JWT解决了什么问题\"><a href=\"#JWT解决了什么问题\" class=\"headerlink\" title=\"JWT解决了什么问题?\"></a>JWT解决了什么问题?</h3><p><strong>token被劫持</strong><br>一开始理解很容易陷入一个误区,比如有人会问对于JWT来说,jwt被劫持了的话,那么对方就可以伪造请求,这东西怎么能保证安全呢?<br>这里问题是没理解好JWT,JWT解决的是认证与授权的问题,上述劫持或者类似的中间人攻击是JWT不可避免的,也是其他认证与授权方式不可避免的,想避免可以使用HTTPS,或者签发jwt的时候记录下Client的ip地址,这些就和JWT没关系了.</p>\n<p><strong>与Session的区别</strong><br>session实际上是基于cookie来传输的,最重要的session信息是存储在服务器的,所以服务器每次可以通过cookie中的sessionId获取到当前会话的用户,对于单台服务器这样做没问题,但是对于多台就涉及到共享session的问题了,而且认证用户的增多,session会占用大量的服务器内存.<br>那么jwt是存储在客户端的,服务器不需要存储jwt,jwt里面有用户id,服务器拿到jwt验证后可以获得用户信息.也就实现了session的功能,但是相比session,jwt是无状态的,其不与任何机器绑定,只要签名秘钥足够的安全就能保证jwt的可靠性.</p>\n<h3 id=\"JWT下服务端认为什么样子的请求是可信的\"><a href=\"#JWT下服务端认为什么样子的请求是可信的\" class=\"headerlink\" title=\"JWT下服务端认为什么样子的请求是可信的?\"></a>JWT下服务端认为什么样子的请求是可信的?</h3><p>对于服务端来说,无法确定下一个请求是哪一个用户,哪一个终端发出,所以其需要一些信息定位到该用户或者该机器,对于JWT来说其Playload里面存储着UserId,那么服务端接收到Token后对其进行签名验证,验证成功,则认为其是<strong>可信的</strong>,然后通过UserId从DB或者Cache中查询出来用户信息.</p>\n<h3 id=\"为什么JWT能保证信息传输的安全可靠\"><a href=\"#为什么JWT能保证信息传输的安全可靠\" class=\"headerlink\" title=\"为什么JWT能保证信息传输的安全可靠?\"></a>为什么JWT能保证信息传输的安全可靠?</h3><p>比如现在有token<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eyJhbGciOiJIUzI1NiJ9.</div><div class=\"line\">eyJleHAiOjE0OTg0ODIxNTQsInN1YiI6InF1ZGluZyIsInVzZXJJZCI6IjEwMzc5NDAxIiwicm9sZSI6ImFkbWluIn0.</div><div class=\"line\">-YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Header</div><div class=\"line\">&#123;</div><div class=\"line\">  \"alg\": \"HS256\"</div><div class=\"line\">&#125;</div><div class=\"line\">Playload</div><div class=\"line\">&#123;</div><div class=\"line\">  \"exp\": 1498482154,</div><div class=\"line\">  \"sub\": \"quding\",</div><div class=\"line\">  \"userId\": \"10379401\",</div><div class=\"line\">  \"role\": \"admin\"</div><div class=\"line\">&#125;</div><div class=\"line\">Sign</div><div class=\"line\">YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY</div></pre></td></tr></table></figure>\n<p>假设我的playload被其他人劫持了,其他人把userId修改为他自己的,比如123456,但是其没有签名的秘钥,所以他就没法生成签名.<br>服务端收到该Token后,会用先Base64解码出来相应的信息,然后重新生成sign,使用该sign与客户端传来的Sign进行对比,一样则证明没被修改,也就是可信的请求,否则拒绝该请求.</p>\n","excerpt":"","more":"<p>JWT实际上与Spring Security没多大关系,本文打算使用Spring Security配合JWT这种方式完成用户的认证和授权.</p>\n<hr>\n<p>JSON Web Token(JWT),是一个开放安全的行业标准,用于多个系统之间传递安全可靠的信息.关于其解释可以参考博文:<br><a href=\"http://blog.leapoahead.com/2015/09/06/understanding-jwt/\">JSON Web Token - 在Web应用间安全地传递信息</a><br>因为原作者写的很详细,这里就只说下个人认为比较重要的问题.</p>\n<h3 id=\"JWT是什么样子的结构\"><a href=\"#JWT是什么样子的结构\" class=\"headerlink\" title=\"JWT是什么样子的结构?\"></a>JWT是什么样子的结构?</h3><p>JSON Web Token说到底也是一串token,其形式分三段,看下图,<strong>红色</strong>的为Header,指定token类型与签名类型,<strong>紫色</strong>的为请求体,存储用户id等关键信息,最后<strong>蓝色</strong>的为签名,保证整个信息的完整性,可靠性.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498469217.png?imageMogr2/thumbnail/!70p\" alt=\"\"><br>其中playload中可以</p>\n<ul>\n<li>iss: 该JWT的签发者</li>\n<li>sub: 该JWT所面向的用户</li>\n<li>aud: 接收该JWT的一方</li>\n<li>exp(expires): 什么时候过期，这里是一个Unix时间戳</li>\n<li>iat(issued at): 在什么时候签发的</li>\n<li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li>\n<li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>\n</ul>\n<h3 id=\"JWT是一个怎样的流程\"><a href=\"#JWT是一个怎样的流程\" class=\"headerlink\" title=\"JWT是一个怎样的流程?\"></a>JWT是一个怎样的流程?</h3><ol>\n<li>客户端使用账户密码请求登录接口</li>\n<li>登录成功后返回JWT</li>\n<li>客户端再次请求其他接口时带上JWT</li>\n<li>服务端接收到JWT后验证签名的有效性.</li>\n</ol>\n<h3 id=\"JWT解决了什么问题\"><a href=\"#JWT解决了什么问题\" class=\"headerlink\" title=\"JWT解决了什么问题?\"></a>JWT解决了什么问题?</h3><p><strong>token被劫持</strong><br>一开始理解很容易陷入一个误区,比如有人会问对于JWT来说,jwt被劫持了的话,那么对方就可以伪造请求,这东西怎么能保证安全呢?<br>这里问题是没理解好JWT,JWT解决的是认证与授权的问题,上述劫持或者类似的中间人攻击是JWT不可避免的,也是其他认证与授权方式不可避免的,想避免可以使用HTTPS,或者签发jwt的时候记录下Client的ip地址,这些就和JWT没关系了.</p>\n<p><strong>与Session的区别</strong><br>session实际上是基于cookie来传输的,最重要的session信息是存储在服务器的,所以服务器每次可以通过cookie中的sessionId获取到当前会话的用户,对于单台服务器这样做没问题,但是对于多台就涉及到共享session的问题了,而且认证用户的增多,session会占用大量的服务器内存.<br>那么jwt是存储在客户端的,服务器不需要存储jwt,jwt里面有用户id,服务器拿到jwt验证后可以获得用户信息.也就实现了session的功能,但是相比session,jwt是无状态的,其不与任何机器绑定,只要签名秘钥足够的安全就能保证jwt的可靠性.</p>\n<h3 id=\"JWT下服务端认为什么样子的请求是可信的\"><a href=\"#JWT下服务端认为什么样子的请求是可信的\" class=\"headerlink\" title=\"JWT下服务端认为什么样子的请求是可信的?\"></a>JWT下服务端认为什么样子的请求是可信的?</h3><p>对于服务端来说,无法确定下一个请求是哪一个用户,哪一个终端发出,所以其需要一些信息定位到该用户或者该机器,对于JWT来说其Playload里面存储着UserId,那么服务端接收到Token后对其进行签名验证,验证成功,则认为其是<strong>可信的</strong>,然后通过UserId从DB或者Cache中查询出来用户信息.</p>\n<h3 id=\"为什么JWT能保证信息传输的安全可靠\"><a href=\"#为什么JWT能保证信息传输的安全可靠\" class=\"headerlink\" title=\"为什么JWT能保证信息传输的安全可靠?\"></a>为什么JWT能保证信息传输的安全可靠?</h3><p>比如现在有token<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">eyJhbGciOiJIUzI1NiJ9.</div><div class=\"line\">eyJleHAiOjE0OTg0ODIxNTQsInN1YiI6InF1ZGluZyIsInVzZXJJZCI6IjEwMzc5NDAxIiwicm9sZSI6ImFkbWluIn0.</div><div class=\"line\">-YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Header</div><div class=\"line\">&#123;</div><div class=\"line\">  \"alg\": \"HS256\"</div><div class=\"line\">&#125;</div><div class=\"line\">Playload</div><div class=\"line\">&#123;</div><div class=\"line\">  \"exp\": 1498482154,</div><div class=\"line\">  \"sub\": \"quding\",</div><div class=\"line\">  \"userId\": \"10379401\",</div><div class=\"line\">  \"role\": \"admin\"</div><div class=\"line\">&#125;</div><div class=\"line\">Sign</div><div class=\"line\">YFTYJ6FLlIQqD4G3hYcWvYlYE8H9eAA2369WEcJFVY</div></pre></td></tr></table></figure>\n<p>假设我的playload被其他人劫持了,其他人把userId修改为他自己的,比如123456,但是其没有签名的秘钥,所以他就没法生成签名.<br>服务端收到该Token后,会用先Base64解码出来相应的信息,然后重新生成sign,使用该sign与客户端传来的Sign进行对比,一样则证明没被修改,也就是可信的请求,否则拒绝该请求.</p>\n"},{"title":"Spring Security学习记录(二) -- Spring Security的Filter","date":"2017-06-22T14:03:37.000Z","_content":"上一篇学习了Spring Security是如何拦截请求,并把请求转向到Filter链的,该篇就主要学习下这些Filter链的节点的作用.\n- - - - -\n下面是之前配置的内容,本文也是对这些内容 的执行分析.\n```xml\n<security:http >\n        <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\"/>\n        <security:form-login/>\n        <security:http-basic/>\n        <security:logout/>\n    </security:http>\n\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n### 1.Filter链的由来\n由上文可知每一个`security:http`标签实际上对应的是一个`SecurityFilterChain`的类,也就是一条Filter链,可以通过其http属性指明其作用的URL,否则作用域全部的URL,如下配置,该security:http会产生一个对/login下的所有请求Filter链.\n```xml\n    <security:http pattern=\"/login/**\">\n        ******\n    </security:http>\n```\n打个断点可以很清楚的看到该Filter链\n![](http://oobu4m7ko.bkt.clouddn.com/1498283386.png?imageMogr2/thumbnail/!70p)\n\n### 2.SecurityContextPersistenceFilter\n该类在所有的Filter之前,是从`SecurityContextRepository`中取出用户认证信息,默认实现类为`HttpSessionSecurityContextRepository`,其会从Session中取出已认证用户的信息,提高效率,避免每一次请求都要查询用户认证信息.\n取出之后会放入`SecurityContextHolder`中,以便其他filter使用,该类使用ThreadLocal存储用户认证信息,保证了线程之间的信息隔离,最后再finally中清除该信息.\n可以配置http的`security-context-repository-ref`属性来自己控制获取到已认证用户信息的方式,比如使用redis存储session等.\n\n### 3.WebAsyncManagerIntegrationFilter\n提供了对securityContext和WebAsyncManager的集成,其会把SecurityContext设置到异步线程中,使其也能获取到用户上下文认证信息.\n\n### 4.HeaderWriterFilter\n其会往该请求的Header中添加相应的信息,在http标签内部使用`security:headers`来控制.\n\n### 5.CsrfFilter\nCsrf,跨站请求伪造,了解不是很深,只知道B网站使用A网站的可信Cookie发起请求,从而完成认证,伪造出正当请求.\n验证方式是通过客户端传来的token与服务端存储的token进行对比,来判断是否为伪造请求,有兴趣的可以查看源代码研究下.\n\n### 6.LogoutFilter\n匹配URL,默认为`/logout`,匹配成功后则用户退出,清除认证信息.\n\n### 7.UsernamePasswordAuthenticationFilter\n登录认证过滤器,默认是对`/login`的POST请求进行认证,首先该方法会先调用`attemptAuthentication`尝试认证获取一个`Authentication`的认证对象,然后通过`sessionStrategy.onAuthentication`执行持久化,也就是保存认证信息,转向下一个Filter,最后调用`successfulAuthentication`执行认证后事件.\n\n**attemptAuthentication**\n该方法是认证的主要方法,认证是委托配置的`authentication-manager`->`authentication-provider`进行.\n比如对于该Demo配置的为如下,则默认使用的manager为`ProviderManager`,使用的provider为`DaoAuthenticationProvider`,userDetailService为`InMemoryUserDetailsManager`也就是从内存中获取用户认证信息,也就是下面xml配置的user与admin信息.\n```xml\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n认证基本流程为`UserDeatilService`根据用户名获取到认证用户的信息,然后通过`UserDetailsChecker.check`对用户进行状态校验,最后通过`additionalAuthenticationChecks`方法对用户进行密码校验成功后完成认证.返回一个认证对象.\n\n都是面向接口编程,所以用户可以很轻松的扩展自己的验证方式.\n### 8.DefaultLoginPageGeneratingFilter\n当请求为登录请求时,生成简单的登录页面返回\n\n### 9.BasicAuthenticationFilter\nHttp Basci认证的支持,该认证会把用户名密码使用base64编码后放入header中传输,如下所示,认证成功后会把用户信息放入`SecurityContextHolder`中.\n```xml\n * Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n```\n### 10.RequestCacheAwareFilter\n恢复被打断的请求,具体未研究\n\n### 11.SecurityContextHolderAwareRequestFilter\n针对Servlet api不同版本做的一些包装\n\n### 12.AnonymousAuthenticationFilter\n当`SecurityContextHolder`中认证信息为空,则会创建一个匿名用户存入到`SecurityContextHolder`中\n\n### 13.SessionManagementFilter\n与登录认证拦截时作用一样,持久化用户登录信息,可以保存到session中,也可以保存到cookie或者redis中.\n\n### 14.ExceptionTranslationFilter\n异常拦截,其处在Filter链后部分,只能拦截其后面的节点并且着重处理`AuthenticationException`与`AccessDeniedException`两个异常.\n\n### 15.FilterSecurityInterceptor\n主要是授权验证,方法为`beforeInvocation`,在其中调用\n```java\nCollection<ConfigAttribute> attributes = this.obtainSecurityMetadataSource()\n\t\t\t\t.getAttributes(object);\n```\n获取到所配置资源访问的授权信息,对于上述配置,获取到的则为`hasRole('ROLE_USER')`,然后根据`SecurityContextHolder`中存储的用户信息来决定其是否有权限,没权限则返回403\n\n### 总结\n整个认证授权流程如下图所示,图是网上盗的\n![](http://oobu4m7ko.bkt.clouddn.com/1498318805.png?imageMogr2/thumbnail/!70p)\n\n因为是学习方面,使用的不是很多,如有错误请指出,以防误人子弟.\n简单来说,作为用户需要关心的地方是\n1. 登录验证`UsernamePasswordAuthenticationFilter`\n2. 访问验证`BasicAuthenticationFilter`\n3. 权限验证`FilterSecurityInterceptor`\n下一篇则讲述利用这三个验证实现JWT验证.\n\n关于这些过滤器更详细的内容可参考博客: [http://www.iteye.com/blogs/subjects/spring_security](http://www.iteye.com/blogs/subjects/spring_security)\n\n\n","source":"_posts/spring/Spring Security学习记录(二) -- Spring Security的Filter.md","raw":"---\ntitle: Spring Security学习记录(二) -- Spring Security的Filter\ntags:\n  - Spring    \ncategories: Spring\ndate: 2017-06-22 22:03:37\n---\n上一篇学习了Spring Security是如何拦截请求,并把请求转向到Filter链的,该篇就主要学习下这些Filter链的节点的作用.\n- - - - -\n下面是之前配置的内容,本文也是对这些内容 的执行分析.\n```xml\n<security:http >\n        <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\"/>\n        <security:form-login/>\n        <security:http-basic/>\n        <security:logout/>\n    </security:http>\n\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n### 1.Filter链的由来\n由上文可知每一个`security:http`标签实际上对应的是一个`SecurityFilterChain`的类,也就是一条Filter链,可以通过其http属性指明其作用的URL,否则作用域全部的URL,如下配置,该security:http会产生一个对/login下的所有请求Filter链.\n```xml\n    <security:http pattern=\"/login/**\">\n        ******\n    </security:http>\n```\n打个断点可以很清楚的看到该Filter链\n![](http://oobu4m7ko.bkt.clouddn.com/1498283386.png?imageMogr2/thumbnail/!70p)\n\n### 2.SecurityContextPersistenceFilter\n该类在所有的Filter之前,是从`SecurityContextRepository`中取出用户认证信息,默认实现类为`HttpSessionSecurityContextRepository`,其会从Session中取出已认证用户的信息,提高效率,避免每一次请求都要查询用户认证信息.\n取出之后会放入`SecurityContextHolder`中,以便其他filter使用,该类使用ThreadLocal存储用户认证信息,保证了线程之间的信息隔离,最后再finally中清除该信息.\n可以配置http的`security-context-repository-ref`属性来自己控制获取到已认证用户信息的方式,比如使用redis存储session等.\n\n### 3.WebAsyncManagerIntegrationFilter\n提供了对securityContext和WebAsyncManager的集成,其会把SecurityContext设置到异步线程中,使其也能获取到用户上下文认证信息.\n\n### 4.HeaderWriterFilter\n其会往该请求的Header中添加相应的信息,在http标签内部使用`security:headers`来控制.\n\n### 5.CsrfFilter\nCsrf,跨站请求伪造,了解不是很深,只知道B网站使用A网站的可信Cookie发起请求,从而完成认证,伪造出正当请求.\n验证方式是通过客户端传来的token与服务端存储的token进行对比,来判断是否为伪造请求,有兴趣的可以查看源代码研究下.\n\n### 6.LogoutFilter\n匹配URL,默认为`/logout`,匹配成功后则用户退出,清除认证信息.\n\n### 7.UsernamePasswordAuthenticationFilter\n登录认证过滤器,默认是对`/login`的POST请求进行认证,首先该方法会先调用`attemptAuthentication`尝试认证获取一个`Authentication`的认证对象,然后通过`sessionStrategy.onAuthentication`执行持久化,也就是保存认证信息,转向下一个Filter,最后调用`successfulAuthentication`执行认证后事件.\n\n**attemptAuthentication**\n该方法是认证的主要方法,认证是委托配置的`authentication-manager`->`authentication-provider`进行.\n比如对于该Demo配置的为如下,则默认使用的manager为`ProviderManager`,使用的provider为`DaoAuthenticationProvider`,userDetailService为`InMemoryUserDetailsManager`也就是从内存中获取用户认证信息,也就是下面xml配置的user与admin信息.\n```xml\n    <security:authentication-manager>\n        <security:authentication-provider>\n            <security:user-service>\n                <security:user name=\"user\" password=\"123456\" authorities=\"ROLE_USER\"/>\n                <security:user name=\"admin\" password=\"123456\" authorities=\"ROLE_USER, ROLE_ADMIN\"/>\n            </security:user-service>\n        </security:authentication-provider>\n    </security:authentication-manager>\n```\n认证基本流程为`UserDeatilService`根据用户名获取到认证用户的信息,然后通过`UserDetailsChecker.check`对用户进行状态校验,最后通过`additionalAuthenticationChecks`方法对用户进行密码校验成功后完成认证.返回一个认证对象.\n\n都是面向接口编程,所以用户可以很轻松的扩展自己的验证方式.\n### 8.DefaultLoginPageGeneratingFilter\n当请求为登录请求时,生成简单的登录页面返回\n\n### 9.BasicAuthenticationFilter\nHttp Basci认证的支持,该认证会把用户名密码使用base64编码后放入header中传输,如下所示,认证成功后会把用户信息放入`SecurityContextHolder`中.\n```xml\n * Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n```\n### 10.RequestCacheAwareFilter\n恢复被打断的请求,具体未研究\n\n### 11.SecurityContextHolderAwareRequestFilter\n针对Servlet api不同版本做的一些包装\n\n### 12.AnonymousAuthenticationFilter\n当`SecurityContextHolder`中认证信息为空,则会创建一个匿名用户存入到`SecurityContextHolder`中\n\n### 13.SessionManagementFilter\n与登录认证拦截时作用一样,持久化用户登录信息,可以保存到session中,也可以保存到cookie或者redis中.\n\n### 14.ExceptionTranslationFilter\n异常拦截,其处在Filter链后部分,只能拦截其后面的节点并且着重处理`AuthenticationException`与`AccessDeniedException`两个异常.\n\n### 15.FilterSecurityInterceptor\n主要是授权验证,方法为`beforeInvocation`,在其中调用\n```java\nCollection<ConfigAttribute> attributes = this.obtainSecurityMetadataSource()\n\t\t\t\t.getAttributes(object);\n```\n获取到所配置资源访问的授权信息,对于上述配置,获取到的则为`hasRole('ROLE_USER')`,然后根据`SecurityContextHolder`中存储的用户信息来决定其是否有权限,没权限则返回403\n\n### 总结\n整个认证授权流程如下图所示,图是网上盗的\n![](http://oobu4m7ko.bkt.clouddn.com/1498318805.png?imageMogr2/thumbnail/!70p)\n\n因为是学习方面,使用的不是很多,如有错误请指出,以防误人子弟.\n简单来说,作为用户需要关心的地方是\n1. 登录验证`UsernamePasswordAuthenticationFilter`\n2. 访问验证`BasicAuthenticationFilter`\n3. 权限验证`FilterSecurityInterceptor`\n下一篇则讲述利用这三个验证实现JWT验证.\n\n关于这些过滤器更详细的内容可参考博客: [http://www.iteye.com/blogs/subjects/spring_security](http://www.iteye.com/blogs/subjects/spring_security)\n\n\n","slug":"spring/Spring Security学习记录(二) -- Spring Security的Filter","published":1,"updated":"2017-06-25T08:55:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xi00116wz577g83jn3","content":"<p>上一篇学习了Spring Security是如何拦截请求,并把请求转向到Filter链的,该篇就主要学习下这些Filter链的节点的作用.</p>\n<hr>\n<p>下面是之前配置的内容,本文也是对这些内容 的执行分析.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:http-basic</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:logout</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"1-Filter链的由来\"><a href=\"#1-Filter链的由来\" class=\"headerlink\" title=\"1.Filter链的由来\"></a>1.Filter链的由来</h3><p>由上文可知每一个<code>security:http</code>标签实际上对应的是一个<code>SecurityFilterChain</code>的类,也就是一条Filter链,可以通过其http属性指明其作用的URL,否则作用域全部的URL,如下配置,该security:http会产生一个对/login下的所有请求Filter链.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/login/**\"</span>&gt;</span></div><div class=\"line\">    ******</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>打个断点可以很清楚的看到该Filter链<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498283386.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h3 id=\"2-SecurityContextPersistenceFilter\"><a href=\"#2-SecurityContextPersistenceFilter\" class=\"headerlink\" title=\"2.SecurityContextPersistenceFilter\"></a>2.SecurityContextPersistenceFilter</h3><p>该类在所有的Filter之前,是从<code>SecurityContextRepository</code>中取出用户认证信息,默认实现类为<code>HttpSessionSecurityContextRepository</code>,其会从Session中取出已认证用户的信息,提高效率,避免每一次请求都要查询用户认证信息.<br>取出之后会放入<code>SecurityContextHolder</code>中,以便其他filter使用,该类使用ThreadLocal存储用户认证信息,保证了线程之间的信息隔离,最后再finally中清除该信息.<br>可以配置http的<code>security-context-repository-ref</code>属性来自己控制获取到已认证用户信息的方式,比如使用redis存储session等.</p>\n<h3 id=\"3-WebAsyncManagerIntegrationFilter\"><a href=\"#3-WebAsyncManagerIntegrationFilter\" class=\"headerlink\" title=\"3.WebAsyncManagerIntegrationFilter\"></a>3.WebAsyncManagerIntegrationFilter</h3><p>提供了对securityContext和WebAsyncManager的集成,其会把SecurityContext设置到异步线程中,使其也能获取到用户上下文认证信息.</p>\n<h3 id=\"4-HeaderWriterFilter\"><a href=\"#4-HeaderWriterFilter\" class=\"headerlink\" title=\"4.HeaderWriterFilter\"></a>4.HeaderWriterFilter</h3><p>其会往该请求的Header中添加相应的信息,在http标签内部使用<code>security:headers</code>来控制.</p>\n<h3 id=\"5-CsrfFilter\"><a href=\"#5-CsrfFilter\" class=\"headerlink\" title=\"5.CsrfFilter\"></a>5.CsrfFilter</h3><p>Csrf,跨站请求伪造,了解不是很深,只知道B网站使用A网站的可信Cookie发起请求,从而完成认证,伪造出正当请求.<br>验证方式是通过客户端传来的token与服务端存储的token进行对比,来判断是否为伪造请求,有兴趣的可以查看源代码研究下.</p>\n<h3 id=\"6-LogoutFilter\"><a href=\"#6-LogoutFilter\" class=\"headerlink\" title=\"6.LogoutFilter\"></a>6.LogoutFilter</h3><p>匹配URL,默认为<code>/logout</code>,匹配成功后则用户退出,清除认证信息.</p>\n<h3 id=\"7-UsernamePasswordAuthenticationFilter\"><a href=\"#7-UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"7.UsernamePasswordAuthenticationFilter\"></a>7.UsernamePasswordAuthenticationFilter</h3><p>登录认证过滤器,默认是对<code>/login</code>的POST请求进行认证,首先该方法会先调用<code>attemptAuthentication</code>尝试认证获取一个<code>Authentication</code>的认证对象,然后通过<code>sessionStrategy.onAuthentication</code>执行持久化,也就是保存认证信息,转向下一个Filter,最后调用<code>successfulAuthentication</code>执行认证后事件.</p>\n<p><strong>attemptAuthentication</strong><br>该方法是认证的主要方法,认证是委托配置的<code>authentication-manager</code>-&gt;<code>authentication-provider</code>进行.<br>比如对于该Demo配置的为如下,则默认使用的manager为<code>ProviderManager</code>,使用的provider为<code>DaoAuthenticationProvider</code>,userDetailService为<code>InMemoryUserDetailsManager</code>也就是从内存中获取用户认证信息,也就是下面xml配置的user与admin信息.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>认证基本流程为<code>UserDeatilService</code>根据用户名获取到认证用户的信息,然后通过<code>UserDetailsChecker.check</code>对用户进行状态校验,最后通过<code>additionalAuthenticationChecks</code>方法对用户进行密码校验成功后完成认证.返回一个认证对象.</p>\n<p>都是面向接口编程,所以用户可以很轻松的扩展自己的验证方式.</p>\n<h3 id=\"8-DefaultLoginPageGeneratingFilter\"><a href=\"#8-DefaultLoginPageGeneratingFilter\" class=\"headerlink\" title=\"8.DefaultLoginPageGeneratingFilter\"></a>8.DefaultLoginPageGeneratingFilter</h3><p>当请求为登录请求时,生成简单的登录页面返回</p>\n<h3 id=\"9-BasicAuthenticationFilter\"><a href=\"#9-BasicAuthenticationFilter\" class=\"headerlink\" title=\"9.BasicAuthenticationFilter\"></a>9.BasicAuthenticationFilter</h3><p>Http Basci认证的支持,该认证会把用户名密码使用base64编码后放入header中传输,如下所示,认证成功后会把用户信息放入<code>SecurityContextHolder</code>中.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-RequestCacheAwareFilter\"><a href=\"#10-RequestCacheAwareFilter\" class=\"headerlink\" title=\"10.RequestCacheAwareFilter\"></a>10.RequestCacheAwareFilter</h3><p>恢复被打断的请求,具体未研究</p>\n<h3 id=\"11-SecurityContextHolderAwareRequestFilter\"><a href=\"#11-SecurityContextHolderAwareRequestFilter\" class=\"headerlink\" title=\"11.SecurityContextHolderAwareRequestFilter\"></a>11.SecurityContextHolderAwareRequestFilter</h3><p>针对Servlet api不同版本做的一些包装</p>\n<h3 id=\"12-AnonymousAuthenticationFilter\"><a href=\"#12-AnonymousAuthenticationFilter\" class=\"headerlink\" title=\"12.AnonymousAuthenticationFilter\"></a>12.AnonymousAuthenticationFilter</h3><p>当<code>SecurityContextHolder</code>中认证信息为空,则会创建一个匿名用户存入到<code>SecurityContextHolder</code>中</p>\n<h3 id=\"13-SessionManagementFilter\"><a href=\"#13-SessionManagementFilter\" class=\"headerlink\" title=\"13.SessionManagementFilter\"></a>13.SessionManagementFilter</h3><p>与登录认证拦截时作用一样,持久化用户登录信息,可以保存到session中,也可以保存到cookie或者redis中.</p>\n<h3 id=\"14-ExceptionTranslationFilter\"><a href=\"#14-ExceptionTranslationFilter\" class=\"headerlink\" title=\"14.ExceptionTranslationFilter\"></a>14.ExceptionTranslationFilter</h3><p>异常拦截,其处在Filter链后部分,只能拦截其后面的节点并且着重处理<code>AuthenticationException</code>与<code>AccessDeniedException</code>两个异常.</p>\n<h3 id=\"15-FilterSecurityInterceptor\"><a href=\"#15-FilterSecurityInterceptor\" class=\"headerlink\" title=\"15.FilterSecurityInterceptor\"></a>15.FilterSecurityInterceptor</h3><p>主要是授权验证,方法为<code>beforeInvocation</code>,在其中调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collection&lt;ConfigAttribute&gt; attributes = <span class=\"keyword\">this</span>.obtainSecurityMetadataSource()</div><div class=\"line\">\t\t\t\t.getAttributes(object);</div></pre></td></tr></table></figure></p>\n<p>获取到所配置资源访问的授权信息,对于上述配置,获取到的则为<code>hasRole(&#39;ROLE_USER&#39;)</code>,然后根据<code>SecurityContextHolder</code>中存储的用户信息来决定其是否有权限,没权限则返回403</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整个认证授权流程如下图所示,图是网上盗的<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498318805.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>因为是学习方面,使用的不是很多,如有错误请指出,以防误人子弟.<br>简单来说,作为用户需要关心的地方是</p>\n<ol>\n<li>登录验证<code>UsernamePasswordAuthenticationFilter</code></li>\n<li>访问验证<code>BasicAuthenticationFilter</code></li>\n<li>权限验证<code>FilterSecurityInterceptor</code><br>下一篇则讲述利用这三个验证实现JWT验证.</li>\n</ol>\n<p>关于这些过滤器更详细的内容可参考博客: <a href=\"http://www.iteye.com/blogs/subjects/spring_security\" target=\"_blank\" rel=\"external\">http://www.iteye.com/blogs/subjects/spring_security</a></p>\n","excerpt":"","more":"<p>上一篇学习了Spring Security是如何拦截请求,并把请求转向到Filter链的,该篇就主要学习下这些Filter链的节点的作用.</p>\n<hr>\n<p>下面是之前配置的内容,本文也是对这些内容 的执行分析.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/**\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"hasRole('ROLE_USER')\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:form-login</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:http-basic</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:logout</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"1-Filter链的由来\"><a href=\"#1-Filter链的由来\" class=\"headerlink\" title=\"1.Filter链的由来\"></a>1.Filter链的由来</h3><p>由上文可知每一个<code>security:http</code>标签实际上对应的是一个<code>SecurityFilterChain</code>的类,也就是一条Filter链,可以通过其http属性指明其作用的URL,否则作用域全部的URL,如下配置,该security:http会产生一个对/login下的所有请求Filter链.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/login/**\"</span>&gt;</span></div><div class=\"line\">    ******</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>打个断点可以很清楚的看到该Filter链<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498283386.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<h3 id=\"2-SecurityContextPersistenceFilter\"><a href=\"#2-SecurityContextPersistenceFilter\" class=\"headerlink\" title=\"2.SecurityContextPersistenceFilter\"></a>2.SecurityContextPersistenceFilter</h3><p>该类在所有的Filter之前,是从<code>SecurityContextRepository</code>中取出用户认证信息,默认实现类为<code>HttpSessionSecurityContextRepository</code>,其会从Session中取出已认证用户的信息,提高效率,避免每一次请求都要查询用户认证信息.<br>取出之后会放入<code>SecurityContextHolder</code>中,以便其他filter使用,该类使用ThreadLocal存储用户认证信息,保证了线程之间的信息隔离,最后再finally中清除该信息.<br>可以配置http的<code>security-context-repository-ref</code>属性来自己控制获取到已认证用户信息的方式,比如使用redis存储session等.</p>\n<h3 id=\"3-WebAsyncManagerIntegrationFilter\"><a href=\"#3-WebAsyncManagerIntegrationFilter\" class=\"headerlink\" title=\"3.WebAsyncManagerIntegrationFilter\"></a>3.WebAsyncManagerIntegrationFilter</h3><p>提供了对securityContext和WebAsyncManager的集成,其会把SecurityContext设置到异步线程中,使其也能获取到用户上下文认证信息.</p>\n<h3 id=\"4-HeaderWriterFilter\"><a href=\"#4-HeaderWriterFilter\" class=\"headerlink\" title=\"4.HeaderWriterFilter\"></a>4.HeaderWriterFilter</h3><p>其会往该请求的Header中添加相应的信息,在http标签内部使用<code>security:headers</code>来控制.</p>\n<h3 id=\"5-CsrfFilter\"><a href=\"#5-CsrfFilter\" class=\"headerlink\" title=\"5.CsrfFilter\"></a>5.CsrfFilter</h3><p>Csrf,跨站请求伪造,了解不是很深,只知道B网站使用A网站的可信Cookie发起请求,从而完成认证,伪造出正当请求.<br>验证方式是通过客户端传来的token与服务端存储的token进行对比,来判断是否为伪造请求,有兴趣的可以查看源代码研究下.</p>\n<h3 id=\"6-LogoutFilter\"><a href=\"#6-LogoutFilter\" class=\"headerlink\" title=\"6.LogoutFilter\"></a>6.LogoutFilter</h3><p>匹配URL,默认为<code>/logout</code>,匹配成功后则用户退出,清除认证信息.</p>\n<h3 id=\"7-UsernamePasswordAuthenticationFilter\"><a href=\"#7-UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"7.UsernamePasswordAuthenticationFilter\"></a>7.UsernamePasswordAuthenticationFilter</h3><p>登录认证过滤器,默认是对<code>/login</code>的POST请求进行认证,首先该方法会先调用<code>attemptAuthentication</code>尝试认证获取一个<code>Authentication</code>的认证对象,然后通过<code>sessionStrategy.onAuthentication</code>执行持久化,也就是保存认证信息,转向下一个Filter,最后调用<code>successfulAuthentication</code>执行认证后事件.</p>\n<p><strong>attemptAuthentication</strong><br>该方法是认证的主要方法,认证是委托配置的<code>authentication-manager</code>-&gt;<code>authentication-provider</code>进行.<br>比如对于该Demo配置的为如下,则默认使用的manager为<code>ProviderManager</code>,使用的provider为<code>DaoAuthenticationProvider</code>,userDetailService为<code>InMemoryUserDetailsManager</code>也就是从内存中获取用户认证信息,也就是下面xml配置的user与admin信息.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"admin\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER, ROLE_ADMIN\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>认证基本流程为<code>UserDeatilService</code>根据用户名获取到认证用户的信息,然后通过<code>UserDetailsChecker.check</code>对用户进行状态校验,最后通过<code>additionalAuthenticationChecks</code>方法对用户进行密码校验成功后完成认证.返回一个认证对象.</p>\n<p>都是面向接口编程,所以用户可以很轻松的扩展自己的验证方式.</p>\n<h3 id=\"8-DefaultLoginPageGeneratingFilter\"><a href=\"#8-DefaultLoginPageGeneratingFilter\" class=\"headerlink\" title=\"8.DefaultLoginPageGeneratingFilter\"></a>8.DefaultLoginPageGeneratingFilter</h3><p>当请求为登录请求时,生成简单的登录页面返回</p>\n<h3 id=\"9-BasicAuthenticationFilter\"><a href=\"#9-BasicAuthenticationFilter\" class=\"headerlink\" title=\"9.BasicAuthenticationFilter\"></a>9.BasicAuthenticationFilter</h3><p>Http Basci认证的支持,该认证会把用户名密码使用base64编码后放入header中传输,如下所示,认证成功后会把用户信息放入<code>SecurityContextHolder</code>中.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-RequestCacheAwareFilter\"><a href=\"#10-RequestCacheAwareFilter\" class=\"headerlink\" title=\"10.RequestCacheAwareFilter\"></a>10.RequestCacheAwareFilter</h3><p>恢复被打断的请求,具体未研究</p>\n<h3 id=\"11-SecurityContextHolderAwareRequestFilter\"><a href=\"#11-SecurityContextHolderAwareRequestFilter\" class=\"headerlink\" title=\"11.SecurityContextHolderAwareRequestFilter\"></a>11.SecurityContextHolderAwareRequestFilter</h3><p>针对Servlet api不同版本做的一些包装</p>\n<h3 id=\"12-AnonymousAuthenticationFilter\"><a href=\"#12-AnonymousAuthenticationFilter\" class=\"headerlink\" title=\"12.AnonymousAuthenticationFilter\"></a>12.AnonymousAuthenticationFilter</h3><p>当<code>SecurityContextHolder</code>中认证信息为空,则会创建一个匿名用户存入到<code>SecurityContextHolder</code>中</p>\n<h3 id=\"13-SessionManagementFilter\"><a href=\"#13-SessionManagementFilter\" class=\"headerlink\" title=\"13.SessionManagementFilter\"></a>13.SessionManagementFilter</h3><p>与登录认证拦截时作用一样,持久化用户登录信息,可以保存到session中,也可以保存到cookie或者redis中.</p>\n<h3 id=\"14-ExceptionTranslationFilter\"><a href=\"#14-ExceptionTranslationFilter\" class=\"headerlink\" title=\"14.ExceptionTranslationFilter\"></a>14.ExceptionTranslationFilter</h3><p>异常拦截,其处在Filter链后部分,只能拦截其后面的节点并且着重处理<code>AuthenticationException</code>与<code>AccessDeniedException</code>两个异常.</p>\n<h3 id=\"15-FilterSecurityInterceptor\"><a href=\"#15-FilterSecurityInterceptor\" class=\"headerlink\" title=\"15.FilterSecurityInterceptor\"></a>15.FilterSecurityInterceptor</h3><p>主要是授权验证,方法为<code>beforeInvocation</code>,在其中调用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Collection&lt;ConfigAttribute&gt; attributes = <span class=\"keyword\">this</span>.obtainSecurityMetadataSource()</div><div class=\"line\">\t\t\t\t.getAttributes(object);</div></pre></td></tr></table></figure></p>\n<p>获取到所配置资源访问的授权信息,对于上述配置,获取到的则为<code>hasRole(&#39;ROLE_USER&#39;)</code>,然后根据<code>SecurityContextHolder</code>中存储的用户信息来决定其是否有权限,没权限则返回403</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整个认证授权流程如下图所示,图是网上盗的<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1498318805.png?imageMogr2/thumbnail/!70p\" alt=\"\"></p>\n<p>因为是学习方面,使用的不是很多,如有错误请指出,以防误人子弟.<br>简单来说,作为用户需要关心的地方是</p>\n<ol>\n<li>登录验证<code>UsernamePasswordAuthenticationFilter</code></li>\n<li>访问验证<code>BasicAuthenticationFilter</code></li>\n<li>权限验证<code>FilterSecurityInterceptor</code><br>下一篇则讲述利用这三个验证实现JWT验证.</li>\n</ol>\n<p>关于这些过滤器更详细的内容可参考博客: <a href=\"http://www.iteye.com/blogs/subjects/spring_security\">http://www.iteye.com/blogs/subjects/spring_security</a></p>\n"},{"title":"WEB小知识-HTTP请求对+和&的处理","date":"2017-05-22T14:18:00.000Z","_content":"\n### 1.问题\n在HTTP请求中如果传的参数有一些特殊字符则会被编码成空格,导致服务端获取不到响应的信息.\n> 对于`+`号会被编码为空格\n> 对于`&`也会被编码成空格\n\n举个例子,需要向服务端提交如下代码:\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a,b;\n    cin >> a >> b;\n    cout << a+b << endl;\n    return 0;\n}\n```\n编码后的内容如下,可以发现`a+b`被转换成了`a b`导致服务端接收到后编译失败.\n```java    \n#include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std;\n%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a,b;\n%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b;\n%0A%20%20%20%20cout%20%3C%3C%20a b%20%3C%3C%20endl;\n%0A%20%20%20%20return%200;%0A%7D\n```\n### 2.解决方案\n使用函数`encodeURIComponent()`,该函数会把特殊字符都给转义,转义结果如下面所示,可见`a+b`转换成了`a%2Bb`\n```java\n%23include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std%3B\n%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a%2Cb%3B\n%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b%3B\n%0A%20%20%20%20cout%20%3C%3C%20a%2Bb%20%3C%3C%20endl%3B\n%0A%20%20%20%20return%200%3B%0A%7D\n```\n服务端需要使用`URLDecoder`对其进行反转义,该问题到此解决.","source":"_posts/web/WEB小知识-HTTP请求对+和&的处理.md","raw":"---\ntitle: WEB小知识-HTTP请求对+和&的处理\ntags:\n  - bug    \ncategories: web\ndate: 2017-05-22 22:18:00\n---\n\n### 1.问题\n在HTTP请求中如果传的参数有一些特殊字符则会被编码成空格,导致服务端获取不到响应的信息.\n> 对于`+`号会被编码为空格\n> 对于`&`也会被编码成空格\n\n举个例子,需要向服务端提交如下代码:\n```c++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a,b;\n    cin >> a >> b;\n    cout << a+b << endl;\n    return 0;\n}\n```\n编码后的内容如下,可以发现`a+b`被转换成了`a b`导致服务端接收到后编译失败.\n```java    \n#include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std;\n%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a,b;\n%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b;\n%0A%20%20%20%20cout%20%3C%3C%20a b%20%3C%3C%20endl;\n%0A%20%20%20%20return%200;%0A%7D\n```\n### 2.解决方案\n使用函数`encodeURIComponent()`,该函数会把特殊字符都给转义,转义结果如下面所示,可见`a+b`转换成了`a%2Bb`\n```java\n%23include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std%3B\n%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a%2Cb%3B\n%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b%3B\n%0A%20%20%20%20cout%20%3C%3C%20a%2Bb%20%3C%3C%20endl%3B\n%0A%20%20%20%20return%200%3B%0A%7D\n```\n服务端需要使用`URLDecoder`对其进行反转义,该问题到此解决.","slug":"web/WEB小知识-HTTP请求对+和&的处理","published":1,"updated":"2017-05-22T15:59:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xk00156wz56f3f488m","content":"<h3 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h3><p>在HTTP请求中如果传的参数有一些特殊字符则会被编码成空格,导致服务端获取不到响应的信息.</p>\n<blockquote>\n<p>对于<code>+</code>号会被编码为空格<br>对于<code>&amp;</code>也会被编码成空格</p>\n</blockquote>\n<p>举个例子,需要向服务端提交如下代码:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a,b;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a+b &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编码后的内容如下,可以发现<code>a+b</code>被转换成了<code>a b</code>导致服务端接收到后编译失败.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std;</div><div class=\"line\">%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a,b;</div><div class=\"line\">%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b;</div><div class=\"line\">%0A%20%20%20%20cout%20%3C%3C%20a b%20%3C%3C%20endl;</div><div class=\"line\">%0A%20%20%20%20return%200;%0A%7D</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h3><p>使用函数<code>encodeURIComponent()</code>,该函数会把特殊字符都给转义,转义结果如下面所示,可见<code>a+b</code>转换成了<code>a%2Bb</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">%<span class=\"number\">23</span>include%<span class=\"number\">20</span>%<span class=\"number\">3</span>Ciostream%<span class=\"number\">3</span>E%<span class=\"number\">0</span>A%<span class=\"number\">0</span>Ausing%<span class=\"number\">20</span>namespace%<span class=\"number\">20</span>std%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">0</span>Aint%<span class=\"number\">20</span>main()%<span class=\"number\">0</span>A%<span class=\"number\">7</span>B%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span><span class=\"keyword\">int</span>%<span class=\"number\">20</span>a%<span class=\"number\">2</span>Cb%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>cin%<span class=\"number\">20</span>%<span class=\"number\">3</span>E%<span class=\"number\">3</span>E%<span class=\"number\">20</span>a%<span class=\"number\">20</span>%<span class=\"number\">3</span>E%<span class=\"number\">3</span>E%<span class=\"number\">20</span>b%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>cout%<span class=\"number\">20</span>%<span class=\"number\">3</span>C%<span class=\"number\">3</span>C%<span class=\"number\">20</span>a%<span class=\"number\">2</span>Bb%<span class=\"number\">20</span>%<span class=\"number\">3</span>C%<span class=\"number\">3</span>C%<span class=\"number\">20</span>endl%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>return%<span class=\"number\">200</span>%<span class=\"number\">3</span>B%<span class=\"number\">0</span>A%<span class=\"number\">7</span>D</div></pre></td></tr></table></figure></p>\n<p>服务端需要使用<code>URLDecoder</code>对其进行反转义,该问题到此解决.</p>\n","excerpt":"","more":"<h3 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h3><p>在HTTP请求中如果传的参数有一些特殊字符则会被编码成空格,导致服务端获取不到响应的信息.</p>\n<blockquote>\n<p>对于<code>+</code>号会被编码为空格<br>对于<code>&amp;</code>也会被编码成空格</p>\n</blockquote>\n<p>举个例子,需要向服务端提交如下代码:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a,b;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; a+b &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编码后的内容如下,可以发现<code>a+b</code>被转换成了<code>a b</code>导致服务端接收到后编译失败.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include%20%3Ciostream%3E%0A%0Ausing%20namespace%20std;</div><div class=\"line\">%0A%0Aint%20main()%0A%7B%0A%20%20%20%20int%20a,b;</div><div class=\"line\">%0A%20%20%20%20cin%20%3E%3E%20a%20%3E%3E%20b;</div><div class=\"line\">%0A%20%20%20%20cout%20%3C%3C%20a b%20%3C%3C%20endl;</div><div class=\"line\">%0A%20%20%20%20return%200;%0A%7D</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-解决方案\"><a href=\"#2-解决方案\" class=\"headerlink\" title=\"2.解决方案\"></a>2.解决方案</h3><p>使用函数<code>encodeURIComponent()</code>,该函数会把特殊字符都给转义,转义结果如下面所示,可见<code>a+b</code>转换成了<code>a%2Bb</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">%<span class=\"number\">23</span>include%<span class=\"number\">20</span>%<span class=\"number\">3</span>Ciostream%<span class=\"number\">3</span>E%<span class=\"number\">0</span>A%<span class=\"number\">0</span>Ausing%<span class=\"number\">20</span>namespace%<span class=\"number\">20</span>std%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">0</span>Aint%<span class=\"number\">20</span>main()%<span class=\"number\">0</span>A%<span class=\"number\">7</span>B%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span><span class=\"keyword\">int</span>%<span class=\"number\">20</span>a%<span class=\"number\">2</span>Cb%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>cin%<span class=\"number\">20</span>%<span class=\"number\">3</span>E%<span class=\"number\">3</span>E%<span class=\"number\">20</span>a%<span class=\"number\">20</span>%<span class=\"number\">3</span>E%<span class=\"number\">3</span>E%<span class=\"number\">20</span>b%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>cout%<span class=\"number\">20</span>%<span class=\"number\">3</span>C%<span class=\"number\">3</span>C%<span class=\"number\">20</span>a%<span class=\"number\">2</span>Bb%<span class=\"number\">20</span>%<span class=\"number\">3</span>C%<span class=\"number\">3</span>C%<span class=\"number\">20</span>endl%<span class=\"number\">3</span>B</div><div class=\"line\">%<span class=\"number\">0</span>A%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>%<span class=\"number\">20</span>return%<span class=\"number\">200</span>%<span class=\"number\">3</span>B%<span class=\"number\">0</span>A%<span class=\"number\">7</span>D</div></pre></td></tr></table></figure></p>\n<p>服务端需要使用<code>URLDecoder</code>对其进行反转义,该问题到此解决.</p>\n"},{"title":"动漫推荐","date":"2017-04-15T00:21:00.000Z","_content":"\n# 动漫推荐\n\n标签（空格分隔）： 动漫\n\n---\n\n从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)\n\n### 异邦人 无皇刃谭\n2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n### 秒速五厘米\n大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 `One more time,One more chance`\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n### 你看起来很好吃\n相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.\n记住:哭闹的孩子 不管在哪里都会被霸王龙叼走\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n### 萤火之森\n无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n### fate stay night\n作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n### 怪物之子\n细田守家族系列电影,复杂成长的环境会造成我们内心的空洞,然而填补这些空洞的方式就是父母的爱,即使在你眼中认为一无是处,半吊子的父亲,在最关键的时候也会奋不顾身的化身为剑去填补你内心的黑暗,细细回想小时候学习父亲的一举一动或许是每个人都无法忘记的时刻.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26352841&auto=0&height=66\"></iframe>\n\n### 斩·赤红之瞳\n有点虐的番剧,几乎每个角色都是主角的设定,所以每个人角色的个性都很鲜明,也导致了每一个人物死去所带来的感染力.尤其看到结局,最初的一群角色就剩一个赤瞳了,其帮助革命军成立了新国家,然而其还要背负革命军为了革命所做的恶.该番剧有点杀红了眼,所以看的话就要做好心理准备.\n\n### 亚人\n这两周把亚人的电影版和TV版都看了一遍,首先电影版绝对是圈钱的作品,还是直接看TV版本吧,剧情一样.整个看下来感觉亚人一部很理性的动漫,无论是主角的处事风格,还是亚人和搜查官的联合,都是利益组建了一个关系网,截止到第二季来说目前还是这样的理性,不知道后期有没有变化.能把不死这一老套的技能演绎出这么多惊心动魄的故事场景的估计也只有亚人了吧.另外这动漫也透漏出政府只是比较大的土匪头子而已.\n\n### 犬夜叉剧场版\n犬夜叉是儿时的回忆,尤其是其四个剧场版,小时候最喜欢看`天下霸道之剑`这一部,犬夜叉相比火影之类动漫的优点是其有一条爱情线,犬夜叉与阿离(我喜欢台版的这个翻译),犬夜叉与桔梗这之间复杂但却互相信任的关系.最喜欢的人物莫过于桔梗,其只是想过上普通的生活,然而命运却让其至死也无法得到想要的生活,悲情人物总能引起观看者的同情.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=463673252&auto=0&height=66\"></iframe>\n\n\n\n\n\n\n\n\n\n","source":"_posts/动漫/动漫推荐.md","raw":"---\ntitle: 动漫推荐\ncategories: 动漫\ntags:\n - 动漫\ndate: 2017-04-15 08:21:00\n\n---\n\n# 动漫推荐\n\n标签（空格分隔）： 动漫\n\n---\n\n从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)\n\n### 异邦人 无皇刃谭\n2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n### 秒速五厘米\n大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 `One more time,One more chance`\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n### 你看起来很好吃\n相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.\n记住:哭闹的孩子 不管在哪里都会被霸王龙叼走\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n### 萤火之森\n无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n### fate stay night\n作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n### 怪物之子\n细田守家族系列电影,复杂成长的环境会造成我们内心的空洞,然而填补这些空洞的方式就是父母的爱,即使在你眼中认为一无是处,半吊子的父亲,在最关键的时候也会奋不顾身的化身为剑去填补你内心的黑暗,细细回想小时候学习父亲的一举一动或许是每个人都无法忘记的时刻.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26352841&auto=0&height=66\"></iframe>\n\n### 斩·赤红之瞳\n有点虐的番剧,几乎每个角色都是主角的设定,所以每个人角色的个性都很鲜明,也导致了每一个人物死去所带来的感染力.尤其看到结局,最初的一群角色就剩一个赤瞳了,其帮助革命军成立了新国家,然而其还要背负革命军为了革命所做的恶.该番剧有点杀红了眼,所以看的话就要做好心理准备.\n\n### 亚人\n这两周把亚人的电影版和TV版都看了一遍,首先电影版绝对是圈钱的作品,还是直接看TV版本吧,剧情一样.整个看下来感觉亚人一部很理性的动漫,无论是主角的处事风格,还是亚人和搜查官的联合,都是利益组建了一个关系网,截止到第二季来说目前还是这样的理性,不知道后期有没有变化.能把不死这一老套的技能演绎出这么多惊心动魄的故事场景的估计也只有亚人了吧.另外这动漫也透漏出政府只是比较大的土匪头子而已.\n\n### 犬夜叉剧场版\n犬夜叉是儿时的回忆,尤其是其四个剧场版,小时候最喜欢看`天下霸道之剑`这一部,犬夜叉相比火影之类动漫的优点是其有一条爱情线,犬夜叉与阿离(我喜欢台版的这个翻译),犬夜叉与桔梗这之间复杂但却互相信任的关系.最喜欢的人物莫过于桔梗,其只是想过上普通的生活,然而命运却让其至死也无法得到想要的生活,悲情人物总能引起观看者的同情.\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=463673252&auto=0&height=66\"></iframe>\n\n\n\n\n\n\n\n\n\n","slug":"动漫/动漫推荐","published":1,"updated":"2017-05-29T09:23:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xl00176wz5gyvcmm0t","content":"<h1 id=\"动漫推荐\"><a href=\"#动漫推荐\" class=\"headerlink\" title=\"动漫推荐\"></a>动漫推荐</h1><p>标签（空格分隔）： 动漫</p>\n<hr>\n<p>从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)</p>\n<h3 id=\"异邦人-无皇刃谭\"><a href=\"#异邦人-无皇刃谭\" class=\"headerlink\" title=\"异邦人 无皇刃谭\"></a>异邦人 无皇刃谭</h3><p>2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n<h3 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h3><p>大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 <code>One more time,One more chance</code></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n<h3 id=\"你看起来很好吃\"><a href=\"#你看起来很好吃\" class=\"headerlink\" title=\"你看起来很好吃\"></a>你看起来很好吃</h3><p>相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.<br>记住:哭闹的孩子 不管在哪里都会被霸王龙叼走</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n<h3 id=\"萤火之森\"><a href=\"#萤火之森\" class=\"headerlink\" title=\"萤火之森\"></a>萤火之森</h3><p>无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n<h3 id=\"fate-stay-night\"><a href=\"#fate-stay-night\" class=\"headerlink\" title=\"fate stay night\"></a>fate stay night</h3><p>作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n<h3 id=\"怪物之子\"><a href=\"#怪物之子\" class=\"headerlink\" title=\"怪物之子\"></a>怪物之子</h3><p>细田守家族系列电影,复杂成长的环境会造成我们内心的空洞,然而填补这些空洞的方式就是父母的爱,即使在你眼中认为一无是处,半吊子的父亲,在最关键的时候也会奋不顾身的化身为剑去填补你内心的黑暗,细细回想小时候学习父亲的一举一动或许是每个人都无法忘记的时刻.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26352841&auto=0&height=66\"></iframe>\n\n<h3 id=\"斩·赤红之瞳\"><a href=\"#斩·赤红之瞳\" class=\"headerlink\" title=\"斩·赤红之瞳\"></a>斩·赤红之瞳</h3><p>有点虐的番剧,几乎每个角色都是主角的设定,所以每个人角色的个性都很鲜明,也导致了每一个人物死去所带来的感染力.尤其看到结局,最初的一群角色就剩一个赤瞳了,其帮助革命军成立了新国家,然而其还要背负革命军为了革命所做的恶.该番剧有点杀红了眼,所以看的话就要做好心理准备.</p>\n<h3 id=\"亚人\"><a href=\"#亚人\" class=\"headerlink\" title=\"亚人\"></a>亚人</h3><p>这两周把亚人的电影版和TV版都看了一遍,首先电影版绝对是圈钱的作品,还是直接看TV版本吧,剧情一样.整个看下来感觉亚人一部很理性的动漫,无论是主角的处事风格,还是亚人和搜查官的联合,都是利益组建了一个关系网,截止到第二季来说目前还是这样的理性,不知道后期有没有变化.能把不死这一老套的技能演绎出这么多惊心动魄的故事场景的估计也只有亚人了吧.另外这动漫也透漏出政府只是比较大的土匪头子而已.</p>\n<h3 id=\"犬夜叉剧场版\"><a href=\"#犬夜叉剧场版\" class=\"headerlink\" title=\"犬夜叉剧场版\"></a>犬夜叉剧场版</h3><p>犬夜叉是儿时的回忆,尤其是其四个剧场版,小时候最喜欢看<code>天下霸道之剑</code>这一部,犬夜叉相比火影之类动漫的优点是其有一条爱情线,犬夜叉与阿离(我喜欢台版的这个翻译),犬夜叉与桔梗这之间复杂但却互相信任的关系.最喜欢的人物莫过于桔梗,其只是想过上普通的生活,然而命运却让其至死也无法得到想要的生活,悲情人物总能引起观看者的同情.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=463673252&auto=0&height=66\"></iframe>\n\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<h1 id=\"动漫推荐\"><a href=\"#动漫推荐\" class=\"headerlink\" title=\"动漫推荐\"></a>动漫推荐</h1><p>标签（空格分隔）： 动漫</p>\n<hr>\n<p>从小就是个动漫爱好者,年轻时追番,现在老了追不动了,只追动漫电影和一些经典动漫剧场版.我也不知道自己是什么风格的动漫迷,只是觉得好看,有共鸣就认为是好作品.人们总是把自己喜爱的东西推荐给别人,我也不例外,下面推荐我认为很不错的片子.(排名不分先后)</p>\n<h3 id=\"异邦人-无皇刃谭\"><a href=\"#异邦人-无皇刃谭\" class=\"headerlink\" title=\"异邦人 无皇刃谭\"></a>异邦人 无皇刃谭</h3><p>2017年初来在上海实习时看的,故事很温情,对于刚到一个陌生城市打拼的青年来说很容易引起共鸣,也因此我感触颇深,异邦人都是孤独的存在,内心是挣扎的,想要找到自己的归属,然而哪里才是归属?背景音乐很赞,听起来内心有点温暖,但是又会觉得很伤感,充满了无奈</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=508793&auto=0&height=66\"></iframe>\n\n<h3 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h3><p>大概高一的时候第一次看了这个作品,唯美的画面,伤感的故事,再加上年少懵懂的恋爱经历,从此新海诚一生粉.回想以前是不是很多事情都可以 <code>One more time,One more chance</code></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=540968&auto=0&height=66\"></iframe>\n\n<h3 id=\"你看起来很好吃\"><a href=\"#你看起来很好吃\" class=\"headerlink\" title=\"你看起来很好吃\"></a>你看起来很好吃</h3><p>相当有趣的一部动漫,看起来完全没有负重感,从母爱,父爱,独立,自强等方面诠释了一个龙的成长.电影版是温情的结局,萌萌的画面,治愈的故事,给心情带来不一样的体验.<br>记住:哭闹的孩子 不管在哪里都会被霸王龙叼走</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=795251922&auto=0&height=66\"></iframe>\n\n<h3 id=\"萤火之森\"><a href=\"#萤火之森\" class=\"headerlink\" title=\"萤火之森\"></a>萤火之森</h3><p>无法触碰的爱情,只是梦中的憧憬,这样的动漫是提醒你,在你年轻的时候曾经心里也住着一个无法触碰的他/她.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=541381&auto=0&height=66\"></iframe>\n\n<h3 id=\"fate-stay-night\"><a href=\"#fate-stay-night\" class=\"headerlink\" title=\"fate stay night\"></a>fate stay night</h3><p>作为番剧来说最喜欢的一个系列,fate stay night也是最早出来的一部,配乐,战斗,剧情都那么引人入胜,虽然fate zero也非常不错,但是让我来选择的话还是该部更让我难忘.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=448119&auto=0&height=66\"></iframe>\n\n<h3 id=\"怪物之子\"><a href=\"#怪物之子\" class=\"headerlink\" title=\"怪物之子\"></a>怪物之子</h3><p>细田守家族系列电影,复杂成长的环境会造成我们内心的空洞,然而填补这些空洞的方式就是父母的爱,即使在你眼中认为一无是处,半吊子的父亲,在最关键的时候也会奋不顾身的化身为剑去填补你内心的黑暗,细细回想小时候学习父亲的一举一动或许是每个人都无法忘记的时刻.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26352841&auto=0&height=66\"></iframe>\n\n<h3 id=\"斩·赤红之瞳\"><a href=\"#斩·赤红之瞳\" class=\"headerlink\" title=\"斩·赤红之瞳\"></a>斩·赤红之瞳</h3><p>有点虐的番剧,几乎每个角色都是主角的设定,所以每个人角色的个性都很鲜明,也导致了每一个人物死去所带来的感染力.尤其看到结局,最初的一群角色就剩一个赤瞳了,其帮助革命军成立了新国家,然而其还要背负革命军为了革命所做的恶.该番剧有点杀红了眼,所以看的话就要做好心理准备.</p>\n<h3 id=\"亚人\"><a href=\"#亚人\" class=\"headerlink\" title=\"亚人\"></a>亚人</h3><p>这两周把亚人的电影版和TV版都看了一遍,首先电影版绝对是圈钱的作品,还是直接看TV版本吧,剧情一样.整个看下来感觉亚人一部很理性的动漫,无论是主角的处事风格,还是亚人和搜查官的联合,都是利益组建了一个关系网,截止到第二季来说目前还是这样的理性,不知道后期有没有变化.能把不死这一老套的技能演绎出这么多惊心动魄的故事场景的估计也只有亚人了吧.另外这动漫也透漏出政府只是比较大的土匪头子而已.</p>\n<h3 id=\"犬夜叉剧场版\"><a href=\"#犬夜叉剧场版\" class=\"headerlink\" title=\"犬夜叉剧场版\"></a>犬夜叉剧场版</h3><p>犬夜叉是儿时的回忆,尤其是其四个剧场版,小时候最喜欢看<code>天下霸道之剑</code>这一部,犬夜叉相比火影之类动漫的优点是其有一条爱情线,犬夜叉与阿离(我喜欢台版的这个翻译),犬夜叉与桔梗这之间复杂但却互相信任的关系.最喜欢的人物莫过于桔梗,其只是想过上普通的生活,然而命运却让其至死也无法得到想要的生活,悲情人物总能引起观看者的同情.</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=463673252&auto=0&height=66\"></iframe>\n\n\n\n\n\n\n\n\n\n"},{"title":"angular2学习记录-给后端程序员的经验分享","date":"2017-04-08T15:00:00.000Z","_content":"\n### 1.前言\n\n前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.\n\n**这里就要说下个人观点了,安利一波**:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.\n\n### 2.angular2简介\n1. angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.\n2. 使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.\n3. google和Microsoft支持\n4. WebStorm对angular2的强大支持.\n5. 一篇安利文章http://www.infoq.com/cn/articles/why-choose-angular2/\n\n>一些学习资料\nECMAScript 6入门  http://es6.ruanyifeng.com/\nTypeScript入门   http://www.imooc.com/learn/763\nTypeScript中文网  https://www.tslang.cn/docs/tutorial.html\n慕课网1小时快速上手视频  http://www.imooc.com/learn/789\n官方文档  https://www.angular.cn/docs/ts/latest/cli-quickstart.html\n\n\n### 3.遇到的问题\n\n#### 3.1滚动监听\n要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)\n![图来自我的csdn博客](http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前使用Jq是\n``` javaScript\n$(window).scroll(function () {\n    indexApp.scrollBar = parseInt(document.body.scrollTop||document.documentElement.scrollTop);\n});\n```\n不打算依赖Jq,搜了点资料发现了下面两种写法.\n``` javaScript\n//下面这种写法在TS下不会有效果.\n  isAddBackColor(){\n    if (this.getIsIndex()){\n       var self = this;\n       //该处使用匿名函数,而不是箭头函数.\n      window.addEventListener('scroll',function () {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        self.isBackColor = marginTop > 20 && self.getIsIndex();\n      });\n    }\n  }\n```\n\n\n``` javaScript\n/**\n   * 判断是否需要加背景色(有效果的)\n   * 使用isBackColor控制结果\n   */\n  isAddBackColor(){\n    if (this.getIsIndex()){\n      //监听事件使用箭头函数,这样ng2才会管理该变量\n      window.addEventListener('scroll',() => {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        this.isBackColor = marginTop > 20 && this.getIsIndex();\n      });\n    }\n  }\n  \n```\n原因不明,猜想是`var self = this;`赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.\n\n#### 3.2http参数传递\n按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入`1111@qq.com`会被转换为`1111%40qq.com`,导致服务端解析失败,找了很多原因才发现是`URLSearchParams`这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,`import {URLSearchParams} from \"@angular/http\";\n`\n``` javaScript\n    let urlParams = new URLSearchParams();\n    urlParams.set('search',search);\n    urlParams.set('order',order);\n    urlParams.set('pageNum',pageNum.toString());\n    urlParams.set('pageSize',pageSize.toString());\n    return this.http.get(Config.url_problem_stage + stage,{params:urlParams}).toPromise()\n              .then(response => response.json())\n              .catch(LogService.handleError)\n```\n\n\n#### 3.3跨域问题\n浏览器要求同源下才可请求,否则就产生跨域问题.\n\n|URL|说明|是否允许通信|\n|-----|-----|-----|\n|http://www.a.com/a.js<br>http://www.a.com/b.js | 同一域名下 | 允许 |\n|http://www.a.com/lab/a.js <br>http://www.a.com/script/b.js\t|同一域名下不同文件夹\t|允许|\n|http://www.a.com:8000/a.js <br>http://www.a.com/b.js | 同一域名，不同端口 |不允许|\n|http://www.a.com/a.js <br>https://www.a.com/b.js | 同一域名，不同协议 | 不允许|\n|http://www.a.com/a.js <br>http://70.32.92.74/b.js |域名和域名对应ip |不允许|\n|http://www.a.com/a.js <br>http://script.a.com/b.js |主域相同，子域不同|不允许|\n|http://www.a.com/a.js <br>http://a.com/b.js |同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js <br>http://www.a.com/b.js |不同域名 |不允许 |\n\n\n解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.\n``` conf\n    server {\n        listen       8888;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /api {\n            proxy_pass   http://127.0.0.1:8080;\n        }\n        location / {\n            proxy_pass   http://127.0.0.1:4200;\n        }\n    }\n```\n\n#### 3.4路由问题\nangular2的路由匹配规则是从根路由也就是`forRoot()`的这个开始.在该处匹配寻找规则.\n\n**根路由:**\n``` javaScript\nexport const appRoutes: Routes = [\n  {\n    path:'',\n    component: IndexComponent,\n    pathMatch:'full'\n  },\n  {\n    path:'aust',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n  {\n    path:'index',\n    component: IndexComponent,\n  },\n  {\n    path:'**',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n];\n\n```\n**子路由:**\n``` javaScript\nexport const childRouter : Routes = [\n  {\n    path: '',\n    component:ContentAndAsideComponent,\n    children:[\n      {path:'',redirectTo:'/index',pathMatch:'full'},\n      {path:'start',component:StartComponent},\n    ]\n  }\n  ];\n```\n**举例:**\n访问`/`,则先在根路由寻找,找到其跳转到IndexComponent,完成任务\n访问`/aust`.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到`/index`,那么回到根路由,找到IndexComponent完成任务.\n访问`/aust/start`,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.\n\n**路由参数**\n路由传参数主要有两种方式,一种是restful风格的,一种是?号参数风格的.两种参数都保存在`ActivatedRoute`对象中,因此下面代码中的`route`为此对象\n--- restful风格\n配置:`{path:'article/:id',component:ArticleComponent}`\n链接:`http://domain/article/1`\n路由:`[routerLink]=\"['article',article.id]\"`或者直接拼接url\njs获取:`this.route.params`中的一系列方法,或者`this.route.snapshot.params['id']`\n--- 问号参数风格\n配置:`{path:'article',component:ArticleComponent}`\n链接:`http://domain/article?id=1`\n路由:`routerLink=\"article\" [queryParams]=\"{id: article.id}\"`\njs获取:`this.route.queryParams`中的一系列方法,或者`this.route.snapshot.queryParams['id']`,另外可以使用订阅模式queryParamMap.subscribe(),路由参数更新时自动通知\n\n#### 3.5组件通信\n父->子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.\n子->父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.\n任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.\n\n#### 3.6单例?\nagular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.\n\n#### 3.7组件生命周期\n组件生命周期看下面这张图.图中没有`onChanges(changes: SimpleChanges)`方法的调用,该方法检测到组件的**输入属性**发生变化时调用,也就是存在**@inpu**t装饰的属性,该属性每次变化时会调该方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg)\n\n#### 3.8部署问题\n单页应用部署到服务器上可能会出现访问`www.domain.xx`可以访问,并且点击什么的都能成功,但是直接访问其中一个路由`www.domain.xx/aust/start`却报404.\n先分析下问题的原因,我们的单页应用只有一个入口,报404也就是没找到这个入口.看nginx的配置.nginx收到请求后会去root下寻找`aust/start`下的index.html那么自然找不到,所以直接访问就会404.\n那么问题来了为什么访问`www.domain.xx`之后页面内跳转到路由没问题呢?这是因为访问主域名后angular的js都已经全部加载了,这个时候跳转是js来控制的,不经过nginx自然不会出现上面的问题.\n```\n        location / {\n            root /Users/niuli/workspace/web/austoj/dist;\n            index  index.html index.htm;\n        }\n```\n**解决方法:**\n解决方法就是让其对于路由都去加载index.html这个文件.使用try_files指令,该指令会把uri当成一个文件,去根目录下寻找,找不到的话则内部重定向到配置的`/index.html`.这样配置的好处,对于静态资源try_files会直接找到后就返回,对于路由则会定向到`/index.html`.\n```\n        location / {\n            try_files $uri /index.html;\n            root /Users/niuli/workspace/web/austoj/dist;\n            index  index.html index.htm;\n        }\n```\n\n#### 3.9文件上传\n文件上传是通过ajax操作上传,使用FormData形式,主要有以下问题要解决.\n1. 怎么获得input框所选中的文件(为input绑定change事件,然后获取$event,文件就是event.srcElement.files[0])\n2. 怎么上传到服务器?(使用formData对象,调用其append方法添加文件,再使用angular2的http组件post上去)\n```javaScript\nuploadAvatar(file: any): Promise<any>{\n    let formData:FormData = new FormData();\n    formData.append('avatar',file);\n    return this.http.post(Config.url_upload_img,formData).toPromise()\n      .then(response => response.json())\n      .catch(LogService.handleError);\n  }\n```\n\n\n----------\n\nangular2项目:\nhttps://github.com/nl101531/AUSTOJ-WEB","source":"_posts/web/angular2学习记录-给后端程序员的经验分享.md","raw":"---\ntitle: angular2学习记录-给后端程序员的经验分享\ntags:\n  - angular\ncategories: web\ndate: 2017-04-08 23:00:00\n\n---\n\n### 1.前言\n\n前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.\n\n**这里就要说下个人观点了,安利一波**:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.\n\n### 2.angular2简介\n1. angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.\n2. 使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.\n3. google和Microsoft支持\n4. WebStorm对angular2的强大支持.\n5. 一篇安利文章http://www.infoq.com/cn/articles/why-choose-angular2/\n\n>一些学习资料\nECMAScript 6入门  http://es6.ruanyifeng.com/\nTypeScript入门   http://www.imooc.com/learn/763\nTypeScript中文网  https://www.tslang.cn/docs/tutorial.html\n慕课网1小时快速上手视频  http://www.imooc.com/learn/789\n官方文档  https://www.angular.cn/docs/ts/latest/cli-quickstart.html\n\n\n### 3.遇到的问题\n\n#### 3.1滚动监听\n要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)\n![图来自我的csdn博客](http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之前使用Jq是\n``` javaScript\n$(window).scroll(function () {\n    indexApp.scrollBar = parseInt(document.body.scrollTop||document.documentElement.scrollTop);\n});\n```\n不打算依赖Jq,搜了点资料发现了下面两种写法.\n``` javaScript\n//下面这种写法在TS下不会有效果.\n  isAddBackColor(){\n    if (this.getIsIndex()){\n       var self = this;\n       //该处使用匿名函数,而不是箭头函数.\n      window.addEventListener('scroll',function () {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        self.isBackColor = marginTop > 20 && self.getIsIndex();\n      });\n    }\n  }\n```\n\n\n``` javaScript\n/**\n   * 判断是否需要加背景色(有效果的)\n   * 使用isBackColor控制结果\n   */\n  isAddBackColor(){\n    if (this.getIsIndex()){\n      //监听事件使用箭头函数,这样ng2才会管理该变量\n      window.addEventListener('scroll',() => {\n        let marginTop = document.body.scrollTop|| document.documentElement.scrollTop;\n        this.isBackColor = marginTop > 20 && this.getIsIndex();\n      });\n    }\n  }\n  \n```\n原因不明,猜想是`var self = this;`赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.\n\n#### 3.2http参数传递\n按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入`1111@qq.com`会被转换为`1111%40qq.com`,导致服务端解析失败,找了很多原因才发现是`URLSearchParams`这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,`import {URLSearchParams} from \"@angular/http\";\n`\n``` javaScript\n    let urlParams = new URLSearchParams();\n    urlParams.set('search',search);\n    urlParams.set('order',order);\n    urlParams.set('pageNum',pageNum.toString());\n    urlParams.set('pageSize',pageSize.toString());\n    return this.http.get(Config.url_problem_stage + stage,{params:urlParams}).toPromise()\n              .then(response => response.json())\n              .catch(LogService.handleError)\n```\n\n\n#### 3.3跨域问题\n浏览器要求同源下才可请求,否则就产生跨域问题.\n\n|URL|说明|是否允许通信|\n|-----|-----|-----|\n|http://www.a.com/a.js<br>http://www.a.com/b.js | 同一域名下 | 允许 |\n|http://www.a.com/lab/a.js <br>http://www.a.com/script/b.js\t|同一域名下不同文件夹\t|允许|\n|http://www.a.com:8000/a.js <br>http://www.a.com/b.js | 同一域名，不同端口 |不允许|\n|http://www.a.com/a.js <br>https://www.a.com/b.js | 同一域名，不同协议 | 不允许|\n|http://www.a.com/a.js <br>http://70.32.92.74/b.js |域名和域名对应ip |不允许|\n|http://www.a.com/a.js <br>http://script.a.com/b.js |主域相同，子域不同|不允许|\n|http://www.a.com/a.js <br>http://a.com/b.js |同一域名，不同二级域名（同上）| 不允许（cookie这种情况下也不允许访问）|\n|http://www.cnblogs.com/a.js <br>http://www.a.com/b.js |不同域名 |不允许 |\n\n\n解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.\n``` conf\n    server {\n        listen       8888;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /api {\n            proxy_pass   http://127.0.0.1:8080;\n        }\n        location / {\n            proxy_pass   http://127.0.0.1:4200;\n        }\n    }\n```\n\n#### 3.4路由问题\nangular2的路由匹配规则是从根路由也就是`forRoot()`的这个开始.在该处匹配寻找规则.\n\n**根路由:**\n``` javaScript\nexport const appRoutes: Routes = [\n  {\n    path:'',\n    component: IndexComponent,\n    pathMatch:'full'\n  },\n  {\n    path:'aust',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n  {\n    path:'index',\n    component: IndexComponent,\n  },\n  {\n    path:'**',\n    loadChildren:'./content/content.module#ContentAndAsideModule'\n  },\n];\n\n```\n**子路由:**\n``` javaScript\nexport const childRouter : Routes = [\n  {\n    path: '',\n    component:ContentAndAsideComponent,\n    children:[\n      {path:'',redirectTo:'/index',pathMatch:'full'},\n      {path:'start',component:StartComponent},\n    ]\n  }\n  ];\n```\n**举例:**\n访问`/`,则先在根路由寻找,找到其跳转到IndexComponent,完成任务\n访问`/aust`.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到`/index`,那么回到根路由,找到IndexComponent完成任务.\n访问`/aust/start`,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.\n\n**路由参数**\n路由传参数主要有两种方式,一种是restful风格的,一种是?号参数风格的.两种参数都保存在`ActivatedRoute`对象中,因此下面代码中的`route`为此对象\n--- restful风格\n配置:`{path:'article/:id',component:ArticleComponent}`\n链接:`http://domain/article/1`\n路由:`[routerLink]=\"['article',article.id]\"`或者直接拼接url\njs获取:`this.route.params`中的一系列方法,或者`this.route.snapshot.params['id']`\n--- 问号参数风格\n配置:`{path:'article',component:ArticleComponent}`\n链接:`http://domain/article?id=1`\n路由:`routerLink=\"article\" [queryParams]=\"{id: article.id}\"`\njs获取:`this.route.queryParams`中的一系列方法,或者`this.route.snapshot.queryParams['id']`,另外可以使用订阅模式queryParamMap.subscribe(),路由参数更新时自动通知\n\n#### 3.5组件通信\n父->子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.\n子->父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.\n任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.\n\n#### 3.6单例?\nagular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.\n\n#### 3.7组件生命周期\n组件生命周期看下面这张图.图中没有`onChanges(changes: SimpleChanges)`方法的调用,该方法检测到组件的**输入属性**发生变化时调用,也就是存在**@inpu**t装饰的属性,该属性每次变化时会调该方法.\n\n![](http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg)\n\n#### 3.8部署问题\n单页应用部署到服务器上可能会出现访问`www.domain.xx`可以访问,并且点击什么的都能成功,但是直接访问其中一个路由`www.domain.xx/aust/start`却报404.\n先分析下问题的原因,我们的单页应用只有一个入口,报404也就是没找到这个入口.看nginx的配置.nginx收到请求后会去root下寻找`aust/start`下的index.html那么自然找不到,所以直接访问就会404.\n那么问题来了为什么访问`www.domain.xx`之后页面内跳转到路由没问题呢?这是因为访问主域名后angular的js都已经全部加载了,这个时候跳转是js来控制的,不经过nginx自然不会出现上面的问题.\n```\n        location / {\n            root /Users/niuli/workspace/web/austoj/dist;\n            index  index.html index.htm;\n        }\n```\n**解决方法:**\n解决方法就是让其对于路由都去加载index.html这个文件.使用try_files指令,该指令会把uri当成一个文件,去根目录下寻找,找不到的话则内部重定向到配置的`/index.html`.这样配置的好处,对于静态资源try_files会直接找到后就返回,对于路由则会定向到`/index.html`.\n```\n        location / {\n            try_files $uri /index.html;\n            root /Users/niuli/workspace/web/austoj/dist;\n            index  index.html index.htm;\n        }\n```\n\n#### 3.9文件上传\n文件上传是通过ajax操作上传,使用FormData形式,主要有以下问题要解决.\n1. 怎么获得input框所选中的文件(为input绑定change事件,然后获取$event,文件就是event.srcElement.files[0])\n2. 怎么上传到服务器?(使用formData对象,调用其append方法添加文件,再使用angular2的http组件post上去)\n```javaScript\nuploadAvatar(file: any): Promise<any>{\n    let formData:FormData = new FormData();\n    formData.append('avatar',file);\n    return this.http.post(Config.url_upload_img,formData).toPromise()\n      .then(response => response.json())\n      .catch(LogService.handleError);\n  }\n```\n\n\n----------\n\nangular2项目:\nhttps://github.com/nl101531/AUSTOJ-WEB","slug":"web/angular2学习记录-给后端程序员的经验分享","published":1,"updated":"2017-04-29T08:25:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xp001b6wz5uh1p1ap9","content":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.</p>\n<p><strong>这里就要说下个人观点了,安利一波</strong>:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.</p>\n<h3 id=\"2-angular2简介\"><a href=\"#2-angular2简介\" class=\"headerlink\" title=\"2.angular2简介\"></a>2.angular2简介</h3><ol>\n<li>angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.</li>\n<li>使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.</li>\n<li>google和Microsoft支持</li>\n<li>WebStorm对angular2的强大支持.</li>\n<li>一篇安利文章<a href=\"http://www.infoq.com/cn/articles/why-choose-angular2/\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/why-choose-angular2/</a></li>\n</ol>\n<blockquote>\n<p>一些学习资料<br>ECMAScript 6入门  <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/</a><br>TypeScript入门   <a href=\"http://www.imooc.com/learn/763\" target=\"_blank\" rel=\"external\">http://www.imooc.com/learn/763</a><br>TypeScript中文网  <a href=\"https://www.tslang.cn/docs/tutorial.html\" target=\"_blank\" rel=\"external\">https://www.tslang.cn/docs/tutorial.html</a><br>慕课网1小时快速上手视频  <a href=\"http://www.imooc.com/learn/789\" target=\"_blank\" rel=\"external\">http://www.imooc.com/learn/789</a><br>官方文档  <a href=\"https://www.angular.cn/docs/ts/latest/cli-quickstart.html\" target=\"_blank\" rel=\"external\">https://www.angular.cn/docs/ts/latest/cli-quickstart.html</a></p>\n</blockquote>\n<h3 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3.遇到的问题\"></a>3.遇到的问题</h3><h4 id=\"3-1滚动监听\"><a href=\"#3-1滚动监听\" class=\"headerlink\" title=\"3.1滚动监听\"></a>3.1滚动监听</h4><p>要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)<br><img src=\"http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图来自我的csdn博客\"></p>\n<p>之前使用Jq是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    indexApp.scrollBar = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.body.scrollTop||<span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>不打算依赖Jq,搜了点资料发现了下面两种写法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面这种写法在TS下不会有效果.</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"comment\">//该处使用匿名函数,而不是箭头函数.</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        self.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; self.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 判断是否需要加背景色(有效果的)</div><div class=\"line\">   * 使用isBackColor控制结果</div><div class=\"line\">   */</div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">      <span class=\"comment\">//监听事件使用箭头函数,这样ng2才会管理该变量</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,() =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; <span class=\"keyword\">this</span>.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>原因不明,猜想是<code>var self = this;</code>赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.</p>\n<h4 id=\"3-2http参数传递\"><a href=\"#3-2http参数传递\" class=\"headerlink\" title=\"3.2http参数传递\"></a>3.2http参数传递</h4><p>按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入<code>1111@qq.com</code>会被转换为<code>1111%40qq.com</code>,导致服务端解析失败,找了很多原因才发现是<code>URLSearchParams</code>这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,<code>import {URLSearchParams} from &quot;@angular/http&quot;;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlParams = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">urlParams.set(<span class=\"string\">'search'</span>,search);</div><div class=\"line\">urlParams.set(<span class=\"string\">'order'</span>,order);</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageNum'</span>,pageNum.toString());</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageSize'</span>,pageSize.toString());</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(Config.url_problem_stage + stage,&#123;<span class=\"attr\">params</span>:urlParams&#125;).toPromise()</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">          .catch(LogService.handleError)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3跨域问题\"><a href=\"#3-3跨域问题\" class=\"headerlink\" title=\"3.3跨域问题\"></a>3.3跨域问题</h4><p>浏览器要求同源下才可请求,否则就产生跨域问题.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/lab/a.js</a> <br><a href=\"http://www.a.com/script/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com:8000/a.js</a> <br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"https://www.a.com/b.js\" target=\"_blank\" rel=\"external\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://70.32.92.74/b.js\" target=\"_blank\" rel=\"external\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://script.a.com/b.js\" target=\"_blank\" rel=\"external\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\" target=\"_blank\" rel=\"external\">http://www.a.com/a.js</a> <br><a href=\"http://a.com/b.js\" target=\"_blank\" rel=\"external\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/a.js</a> <br><a href=\"http://www.a.com/b.js\" target=\"_blank\" rel=\"external\">http://www.a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       8888;</div><div class=\"line\">    server_name  localhost;</div><div class=\"line\"></div><div class=\"line\">    #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    location /api &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:8080;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:4200;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-4路由问题\"><a href=\"#3-4路由问题\" class=\"headerlink\" title=\"3.4路由问题\"></a>3.4路由问题</h4><p>angular2的路由匹配规则是从根路由也就是<code>forRoot()</code>的这个开始.在该处匹配寻找规则.</p>\n<p><strong>根路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appRoutes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'aust'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'**'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p><strong>子路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> childRouter : Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>:ContentAndAsideComponent,</div><div class=\"line\">    <span class=\"attr\">children</span>:[</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">''</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">'/index'</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">'start'</span>,<span class=\"attr\">component</span>:StartComponent&#125;,</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  ];</div></pre></td></tr></table></figure></p>\n<p><strong>举例:</strong><br>访问<code>/</code>,则先在根路由寻找,找到其跳转到IndexComponent,完成任务<br>访问<code>/aust</code>.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到<code>/index</code>,那么回到根路由,找到IndexComponent完成任务.<br>访问<code>/aust/start</code>,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.</p>\n<p><strong>路由参数</strong><br>路由传参数主要有两种方式,一种是restful风格的,一种是?号参数风格的.两种参数都保存在<code>ActivatedRoute</code>对象中,因此下面代码中的<code>route</code>为此对象<br>— restful风格<br>配置:<code>{path:&#39;article/:id&#39;,component:ArticleComponent}</code><br>链接:<code>http://domain/article/1</code><br>路由:<code>[routerLink]=&quot;[&#39;article&#39;,article.id]&quot;</code>或者直接拼接url<br>js获取:<code>this.route.params</code>中的一系列方法,或者<code>this.route.snapshot.params[&#39;id&#39;]</code><br>— 问号参数风格<br>配置:<code>{path:&#39;article&#39;,component:ArticleComponent}</code><br>链接:<code>http://domain/article?id=1</code><br>路由:<code>routerLink=&quot;article&quot; [queryParams]=&quot;{id: article.id}&quot;</code><br>js获取:<code>this.route.queryParams</code>中的一系列方法,或者<code>this.route.snapshot.queryParams[&#39;id&#39;]</code>,另外可以使用订阅模式queryParamMap.subscribe(),路由参数更新时自动通知</p>\n<h4 id=\"3-5组件通信\"><a href=\"#3-5组件通信\" class=\"headerlink\" title=\"3.5组件通信\"></a>3.5组件通信</h4><p>父-&gt;子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.<br>子-&gt;父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.<br>任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.</p>\n<h4 id=\"3-6单例\"><a href=\"#3-6单例\" class=\"headerlink\" title=\"3.6单例?\"></a>3.6单例?</h4><p>agular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.</p>\n<h4 id=\"3-7组件生命周期\"><a href=\"#3-7组件生命周期\" class=\"headerlink\" title=\"3.7组件生命周期\"></a>3.7组件生命周期</h4><p>组件生命周期看下面这张图.图中没有<code>onChanges(changes: SimpleChanges)</code>方法的调用,该方法检测到组件的<strong>输入属性</strong>发生变化时调用,也就是存在<strong>@inpu</strong>t装饰的属性,该属性每次变化时会调该方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg\" alt=\"\"></p>\n<h4 id=\"3-8部署问题\"><a href=\"#3-8部署问题\" class=\"headerlink\" title=\"3.8部署问题\"></a>3.8部署问题</h4><p>单页应用部署到服务器上可能会出现访问<code>www.domain.xx</code>可以访问,并且点击什么的都能成功,但是直接访问其中一个路由<code>www.domain.xx/aust/start</code>却报404.<br>先分析下问题的原因,我们的单页应用只有一个入口,报404也就是没找到这个入口.看nginx的配置.nginx收到请求后会去root下寻找<code>aust/start</code>下的index.html那么自然找不到,所以直接访问就会404.<br>那么问题来了为什么访问<code>www.domain.xx</code>之后页面内跳转到路由没问题呢?这是因为访问主域名后angular的js都已经全部加载了,这个时候跳转是js来控制的,不经过nginx自然不会出现上面的问题.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    root /Users/niuli/workspace/web/austoj/dist;</div><div class=\"line\">    index  index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>解决方法:</strong><br>解决方法就是让其对于路由都去加载index.html这个文件.使用try_files指令,该指令会把uri当成一个文件,去根目录下寻找,找不到的话则内部重定向到配置的<code>/index.html</code>.这样配置的好处,对于静态资源try_files会直接找到后就返回,对于路由则会定向到<code>/index.html</code>.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    try_files $uri /index.html;</div><div class=\"line\">    root /Users/niuli/workspace/web/austoj/dist;</div><div class=\"line\">    index  index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-9文件上传\"><a href=\"#3-9文件上传\" class=\"headerlink\" title=\"3.9文件上传\"></a>3.9文件上传</h4><p>文件上传是通过ajax操作上传,使用FormData形式,主要有以下问题要解决.</p>\n<ol>\n<li>怎么获得input框所选中的文件(为input绑定change事件,然后获取$event,文件就是event.srcElement.files[0])</li>\n<li>怎么上传到服务器?(使用formData对象,调用其append方法添加文件,再使用angular2的http组件post上去)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">uploadAvatar(file: any): <span class=\"built_in\">Promise</span>&lt;any&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> formData:FormData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">    formData.append(<span class=\"string\">'avatar'</span>,file);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.post(Config.url_upload_img,formData).toPromise()</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">      .catch(LogService.handleError);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>angular2项目:<br><a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n","excerpt":"","more":"<h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h3><p>前几天刚下定决心把毕业设计改造下,因为毕业设计算是我学习的基石,学习到的东西都尽可能的在这个平台上施展,锻炼自己.改造为前后端分离,前端使用angular2,后端只提供接口.便于以后的维护.那么就要学习agular2了.</p>\n<p><strong>这里就要说下个人观点了,安利一波</strong>:我认为每个程序员都应该有自己的一个项目,一个可以让你学习的东西能施展到上面的项目,可能该项目一开始很简单,但是随着你不断的学习,不断的把新知识运用进去,这个项目就会伴随着你的成长而丰富起来,给你带来的则是更多的实战经验.</p>\n<h3 id=\"2-angular2简介\"><a href=\"#2-angular2简介\" class=\"headerlink\" title=\"2.angular2简介\"></a>2.angular2简介</h3><ol>\n<li>angular2是类似全家桶组合的框架,所需要的东西几乎都包办了,所以开发起来很迅速.</li>\n<li>使用TypeScript作为开发语言,对于Java和C#程序员可以快速上手,还有就是我比较喜欢强类型语言,每个变量各司其职,由其的类型来限定,开发人员也很明确知道变量的作用.</li>\n<li>google和Microsoft支持</li>\n<li>WebStorm对angular2的强大支持.</li>\n<li>一篇安利文章<a href=\"http://www.infoq.com/cn/articles/why-choose-angular2/\">http://www.infoq.com/cn/articles/why-choose-angular2/</a></li>\n</ol>\n<blockquote>\n<p>一些学习资料<br>ECMAScript 6入门  <a href=\"http://es6.ruanyifeng.com/\">http://es6.ruanyifeng.com/</a><br>TypeScript入门   <a href=\"http://www.imooc.com/learn/763\">http://www.imooc.com/learn/763</a><br>TypeScript中文网  <a href=\"https://www.tslang.cn/docs/tutorial.html\">https://www.tslang.cn/docs/tutorial.html</a><br>慕课网1小时快速上手视频  <a href=\"http://www.imooc.com/learn/789\">http://www.imooc.com/learn/789</a><br>官方文档  <a href=\"https://www.angular.cn/docs/ts/latest/cli-quickstart.html\">https://www.angular.cn/docs/ts/latest/cli-quickstart.html</a></p>\n</blockquote>\n<h3 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3.遇到的问题\"></a>3.遇到的问题</h3><h4 id=\"3-1滚动监听\"><a href=\"#3-1滚动监听\" class=\"headerlink\" title=\"3.1滚动监听\"></a>3.1滚动监听</h4><p>要实现页面滚动后导航栏会变色的效果,如下图(图来自我的csdn博客,没找到其他好图床)<br><img src=\"http://img.blog.csdn.net/20170408234307620?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjcwNjgxMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图来自我的csdn博客\"></p>\n<p>之前使用Jq是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    indexApp.scrollBar = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">document</span>.body.scrollTop||<span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>不打算依赖Jq,搜了点资料发现了下面两种写法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面这种写法在TS下不会有效果.</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">       <span class=\"comment\">//该处使用匿名函数,而不是箭头函数.</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        self.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; self.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * 判断是否需要加背景色(有效果的)</div><div class=\"line\">   * 使用isBackColor控制结果</div><div class=\"line\">   */</span></div><div class=\"line\">  isAddBackColor()&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getIsIndex())&#123;</div><div class=\"line\">      <span class=\"comment\">//监听事件使用箭头函数,这样ng2才会管理该变量</span></div><div class=\"line\">      <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,() =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> marginTop = <span class=\"built_in\">document</span>.body.scrollTop|| <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.isBackColor = marginTop &gt; <span class=\"number\">20</span> &amp;&amp; <span class=\"keyword\">this</span>.getIsIndex();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>原因不明,猜想是<code>var self = this;</code>赋值操作后相当于一个全新的变量,self并不受angular管理,导致刷新的变量是self中的isBackColor.</p>\n<h4 id=\"3-2http参数传递\"><a href=\"#3-2http参数传递\" class=\"headerlink\" title=\"3.2http参数传递\"></a>3.2http参数传递</h4><p>按照下面代码传参数应该是没有问题的,但是我遇到了url被编码问题,例如输入<code>1111@qq.com</code>会被转换为<code>1111%40qq.com</code>,导致服务端解析失败,找了很多原因才发现是<code>URLSearchParams</code>这个对象用错了,angular2提供了这个对象,es6里面也有一个该对象,换成ng2中对象即可,<code>import {URLSearchParams} from &quot;@angular/http&quot;;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> urlParams = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">urlParams.set(<span class=\"string\">'search'</span>,search);</div><div class=\"line\">urlParams.set(<span class=\"string\">'order'</span>,order);</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageNum'</span>,pageNum.toString());</div><div class=\"line\">urlParams.set(<span class=\"string\">'pageSize'</span>,pageSize.toString());</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.get(Config.url_problem_stage + stage,&#123;<span class=\"attr\">params</span>:urlParams&#125;).toPromise()</div><div class=\"line\">          .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">          .catch(LogService.handleError)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3跨域问题\"><a href=\"#3-3跨域问题\" class=\"headerlink\" title=\"3.3跨域问题\"></a>3.3跨域问题</h4><p>浏览器要求同源下才可请求,否则就产生跨域问题.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>说明</th>\n<th>是否允许通信</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a><br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名下</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/lab/a.js\">http://www.a.com/lab/a.js</a> <br><a href=\"http://www.a.com/script/b.js\">http://www.a.com/script/b.js</a></td>\n<td>同一域名下不同文件夹</td>\n<td>允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com:8000/a.js\">http://www.a.com:8000/a.js</a> <br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>同一域名，不同端口</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"https://www.a.com/b.js\">https://www.a.com/b.js</a></td>\n<td>同一域名，不同协议</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://70.32.92.74/b.js\">http://70.32.92.74/b.js</a></td>\n<td>域名和域名对应ip</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://script.a.com/b.js\">http://script.a.com/b.js</a></td>\n<td>主域相同，子域不同</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td><a href=\"http://www.a.com/a.js\">http://www.a.com/a.js</a> <br><a href=\"http://a.com/b.js\">http://a.com/b.js</a></td>\n<td>同一域名，不同二级域名（同上）</td>\n<td>不允许（cookie这种情况下也不允许访问）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/a.js\">http://www.cnblogs.com/a.js</a> <br><a href=\"http://www.a.com/b.js\">http://www.a.com/b.js</a></td>\n<td>不同域名</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n<p>解决方案是用nginx反向代理到不同端口,模拟同一域名下不同文件夹情况.nginx监听本地888端口,这个也是项目入口,对于带api标识的请求转到后端服务器,对于其他请求则到前端服务器.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       8888;</div><div class=\"line\">    server_name  localhost;</div><div class=\"line\"></div><div class=\"line\">    #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">    #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    location /api &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:8080;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass   http://127.0.0.1:4200;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-4路由问题\"><a href=\"#3-4路由问题\" class=\"headerlink\" title=\"3.4路由问题\"></a>3.4路由问题</h4><p>angular2的路由匹配规则是从根路由也就是<code>forRoot()</code>的这个开始.在该处匹配寻找规则.</p>\n<p><strong>根路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> appRoutes: Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">    <span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'aust'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'index'</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>: IndexComponent,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">'**'</span>,</div><div class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">'./content/content.module#ContentAndAsideModule'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p><strong>子路由:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> childRouter : Routes = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">component</span>:ContentAndAsideComponent,</div><div class=\"line\">    <span class=\"attr\">children</span>:[</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">''</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">'/index'</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">'full'</span>&#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">'start'</span>,<span class=\"attr\">component</span>:StartComponent&#125;,</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">  ];</div></pre></td></tr></table></figure></p>\n<p><strong>举例:</strong><br>访问<code>/</code>,则先在根路由寻找,找到其跳转到IndexComponent,完成任务<br>访问<code>/aust</code>.则先在根路由找,发现需要到子路由里面寻找,到子路由后,在children中发现被重定向到<code>/index</code>,那么回到根路由,找到IndexComponent完成任务.<br>访问<code>/aust/start</code>,则先在根路由找,发现需要到子路由,到子路由匹配到StartComponent,完成任务.</p>\n<p><strong>路由参数</strong><br>路由传参数主要有两种方式,一种是restful风格的,一种是?号参数风格的.两种参数都保存在<code>ActivatedRoute</code>对象中,因此下面代码中的<code>route</code>为此对象<br>— restful风格<br>配置:<code>{path:&#39;article/:id&#39;,component:ArticleComponent}</code><br>链接:<code>http://domain/article/1</code><br>路由:<code>[routerLink]=&quot;[&#39;article&#39;,article.id]&quot;</code>或者直接拼接url<br>js获取:<code>this.route.params</code>中的一系列方法,或者<code>this.route.snapshot.params[&#39;id&#39;]</code><br>— 问号参数风格<br>配置:<code>{path:&#39;article&#39;,component:ArticleComponent}</code><br>链接:<code>http://domain/article?id=1</code><br>路由:<code>routerLink=&quot;article&quot; [queryParams]=&quot;{id: article.id}&quot;</code><br>js获取:<code>this.route.queryParams</code>中的一系列方法,或者<code>this.route.snapshot.queryParams[&#39;id&#39;]</code>,另外可以使用订阅模式queryParamMap.subscribe(),路由参数更新时自动通知</p>\n<h4 id=\"3-5组件通信\"><a href=\"#3-5组件通信\" class=\"headerlink\" title=\"3.5组件通信\"></a>3.5组件通信</h4><p>父-&gt;子:子组件使用input装饰器,接受父组件的属性,并且可使用ngOnChanges或则setter监听变化,做额外处理.<br>子-&gt;父:使用output装饰器加EventEmitter向上弹出事件到父组件,父组件监听后处理.<br>任意组件:使用service通讯(要求service单例),service提供Observable的next发布,其他组件引用service对象subscribe该发布,那么就实现了信息的流动,并且是在只要订阅了该发布的组件中都能获取.</p>\n<h4 id=\"3-6单例\"><a href=\"#3-6单例\" class=\"headerlink\" title=\"3.6单例?\"></a>3.6单例?</h4><p>agular2的service是providers提供的,该组件如果引用了这个service,那么会先在自己的providers中寻找service,找不到则再向上找父组件,直到module.那么意味着每一个providers提供的是一个实例,旗下的组件都是享用这一个实例,那么怎么实现全局单例呢?很简单在根module中提供服务且其他组件不要自己providers该服务.</p>\n<h4 id=\"3-7组件生命周期\"><a href=\"#3-7组件生命周期\" class=\"headerlink\" title=\"3.7组件生命周期\"></a>3.7组件生命周期</h4><p>组件生命周期看下面这张图.图中没有<code>onChanges(changes: SimpleChanges)</code>方法的调用,该方法检测到组件的<strong>输入属性</strong>发生变化时调用,也就是存在<strong>@inpu</strong>t装饰的属性,该属性每次变化时会调该方法.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/kRRpNMw13FEBLykaLlty4NQsVYFpeEl2OCBifcB2.jpg\" alt=\"\"></p>\n<h4 id=\"3-8部署问题\"><a href=\"#3-8部署问题\" class=\"headerlink\" title=\"3.8部署问题\"></a>3.8部署问题</h4><p>单页应用部署到服务器上可能会出现访问<code>www.domain.xx</code>可以访问,并且点击什么的都能成功,但是直接访问其中一个路由<code>www.domain.xx/aust/start</code>却报404.<br>先分析下问题的原因,我们的单页应用只有一个入口,报404也就是没找到这个入口.看nginx的配置.nginx收到请求后会去root下寻找<code>aust/start</code>下的index.html那么自然找不到,所以直接访问就会404.<br>那么问题来了为什么访问<code>www.domain.xx</code>之后页面内跳转到路由没问题呢?这是因为访问主域名后angular的js都已经全部加载了,这个时候跳转是js来控制的,不经过nginx自然不会出现上面的问题.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    root /Users/niuli/workspace/web/austoj/dist;</div><div class=\"line\">    index  index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>解决方法:</strong><br>解决方法就是让其对于路由都去加载index.html这个文件.使用try_files指令,该指令会把uri当成一个文件,去根目录下寻找,找不到的话则内部重定向到配置的<code>/index.html</code>.这样配置的好处,对于静态资源try_files会直接找到后就返回,对于路由则会定向到<code>/index.html</code>.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    try_files $uri /index.html;</div><div class=\"line\">    root /Users/niuli/workspace/web/austoj/dist;</div><div class=\"line\">    index  index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-9文件上传\"><a href=\"#3-9文件上传\" class=\"headerlink\" title=\"3.9文件上传\"></a>3.9文件上传</h4><p>文件上传是通过ajax操作上传,使用FormData形式,主要有以下问题要解决.</p>\n<ol>\n<li>怎么获得input框所选中的文件(为input绑定change事件,然后获取$event,文件就是event.srcElement.files[0])</li>\n<li>怎么上传到服务器?(使用formData对象,调用其append方法添加文件,再使用angular2的http组件post上去)<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">uploadAvatar(file: any): <span class=\"built_in\">Promise</span>&lt;any&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> formData:FormData = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\">    formData.append(<span class=\"string\">'avatar'</span>,file);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.post(Config.url_upload_img,formData).toPromise()</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</div><div class=\"line\">      .catch(LogService.handleError);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>angular2项目:<br><a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n"},{"title":"Java中序列化相关知识","date":"2017-05-02T08:00:00.000Z","_content":"\n今天线上遇到了DTO类实现了`Serializable`接口,但是其并没有显示声明`serialVersionUID`,这样的话每次打包有改动JDK就会为其重新生成`serialVersionUID`.这就带来了不同版本之间的实体类可能反序列化不成功,线上RPC调用出现了问题.那么就深入探讨一下原因.\n\n### Serializable的作用\n看该类的JDK注释可以发现`The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.`也就是说Serializable是一个标识接口,和`Cloneable`接口等一样的效果.\n如下面的User类,实现了序列化接口,并使用`serialVersionUID`标识其序列化对应的ID序号.\n```java\n  static class User implements Serializable {\n    private static final long serialVersionUID = 5768430629641297769L;\n    private String nickname;\n    private String passwd;\n    //省略get和set\n```\n\n### 如何序列化\n`java.io.ObjectOutputStream`代表对象输出流,其使用writeObject()方法把对象实例转换为字节流然后写入到文件,或者用于网络传输.\n```java\n  @Test\n  public void testWriteObj() throws IOException {\n    User userDO = new User();\n    userDO.setNickname(\"屈定\");\n    userDO.setPasswd(\"123456\");\n    File file = new File(\"user.out\");\n    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(file));\n    outputStream.writeObject(userDO);//序列化写入到文件中.\n    outputStream.close();\n  }\n```\n\n### 如何反序列化\n`java.io.ObjectInputStream`代表对象输入流,其使用readObject()方法读取序列化的字节,然后再转换为对象.\n```java\n  @Test\n  public void testReadObj() throws IOException, ClassNotFoundException {\n    File file = new File(base+File.separator+\"user.out\");\n    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file));\n    User user = (User) inputStream.readObject();\n    Assert.assertTrue(StringUtils.equals(user.getNickname(),\"屈定\"));\n    Assert.assertTrue(StringUtils.equals(user.getPasswd(),\"123456\"));\n  }\n```\n### serialVersionUID的作用\n按照上面代码,序列化和反序列化都是成功的,如果在已经序列化后,对User要作修改,增加一个email字段,再试试反序列化.\n```java\n  static class User implements Serializable {\n    private static final long serialVersionUID = 5768430629641297769L;\n    private String nickname;\n    private String passwd;\n    private String email;\n}\n```\n程序会正常运行,而且这个email会被很智能的初始化为null.\n修改`serialVersionUID`为1L再试试.\n```java\njava.io.InvalidClassException: cn.edu.aust.test.ObjectTest$User; local class incompatible: stream classdesc serialVersionUID = 5768430629641297769, local class serialVersionUID = 1\n```\n报错很明显,两边类的`serialVersionUID`不一样,也就是说对于编译好的class,其`serialVersionUID`是其序列化的唯一标识,如果未显示声明JDK则会自动为其加上,可以使用命令`seriserialver`可以查看一个class文件的`serialVersionUID`,当线上版本忘记加该字段的时候该命令还是很有用处的.\n```sh\nseriserialver cn.edu.aust.test.ObjectTest\\$User \ncn.edu.aust.test.ObjectTest$User:    private static final long serialVersionUID = 1L;\n```\n### transient的作用\ntransient翻译为瞬时,也就是被其修饰的变量序列化时会忽略该字段.什么时候需要用到这个字段呢?\n在Java中对象之间的关系会组成一个对象图,序列化的过程是对该对象图的遍历,那么反序列化也仍然是对该对象图的遍历.对于对象里面的对象就是递归过程,对于链表之类的数据结构递归的话很容易引起栈溢出,那么就可以使用`transient`忽略该字段.\n\n\n\n\n\n","source":"_posts/工具/Java中的序列化相关知识.md","raw":"---\ntitle: Java中序列化相关知识\ntags:\n  - jdk      \ncategories: 工作问题\ndate: 2017-05-02 16:00:00\n---\n\n今天线上遇到了DTO类实现了`Serializable`接口,但是其并没有显示声明`serialVersionUID`,这样的话每次打包有改动JDK就会为其重新生成`serialVersionUID`.这就带来了不同版本之间的实体类可能反序列化不成功,线上RPC调用出现了问题.那么就深入探讨一下原因.\n\n### Serializable的作用\n看该类的JDK注释可以发现`The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.`也就是说Serializable是一个标识接口,和`Cloneable`接口等一样的效果.\n如下面的User类,实现了序列化接口,并使用`serialVersionUID`标识其序列化对应的ID序号.\n```java\n  static class User implements Serializable {\n    private static final long serialVersionUID = 5768430629641297769L;\n    private String nickname;\n    private String passwd;\n    //省略get和set\n```\n\n### 如何序列化\n`java.io.ObjectOutputStream`代表对象输出流,其使用writeObject()方法把对象实例转换为字节流然后写入到文件,或者用于网络传输.\n```java\n  @Test\n  public void testWriteObj() throws IOException {\n    User userDO = new User();\n    userDO.setNickname(\"屈定\");\n    userDO.setPasswd(\"123456\");\n    File file = new File(\"user.out\");\n    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(file));\n    outputStream.writeObject(userDO);//序列化写入到文件中.\n    outputStream.close();\n  }\n```\n\n### 如何反序列化\n`java.io.ObjectInputStream`代表对象输入流,其使用readObject()方法读取序列化的字节,然后再转换为对象.\n```java\n  @Test\n  public void testReadObj() throws IOException, ClassNotFoundException {\n    File file = new File(base+File.separator+\"user.out\");\n    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file));\n    User user = (User) inputStream.readObject();\n    Assert.assertTrue(StringUtils.equals(user.getNickname(),\"屈定\"));\n    Assert.assertTrue(StringUtils.equals(user.getPasswd(),\"123456\"));\n  }\n```\n### serialVersionUID的作用\n按照上面代码,序列化和反序列化都是成功的,如果在已经序列化后,对User要作修改,增加一个email字段,再试试反序列化.\n```java\n  static class User implements Serializable {\n    private static final long serialVersionUID = 5768430629641297769L;\n    private String nickname;\n    private String passwd;\n    private String email;\n}\n```\n程序会正常运行,而且这个email会被很智能的初始化为null.\n修改`serialVersionUID`为1L再试试.\n```java\njava.io.InvalidClassException: cn.edu.aust.test.ObjectTest$User; local class incompatible: stream classdesc serialVersionUID = 5768430629641297769, local class serialVersionUID = 1\n```\n报错很明显,两边类的`serialVersionUID`不一样,也就是说对于编译好的class,其`serialVersionUID`是其序列化的唯一标识,如果未显示声明JDK则会自动为其加上,可以使用命令`seriserialver`可以查看一个class文件的`serialVersionUID`,当线上版本忘记加该字段的时候该命令还是很有用处的.\n```sh\nseriserialver cn.edu.aust.test.ObjectTest\\$User \ncn.edu.aust.test.ObjectTest$User:    private static final long serialVersionUID = 1L;\n```\n### transient的作用\ntransient翻译为瞬时,也就是被其修饰的变量序列化时会忽略该字段.什么时候需要用到这个字段呢?\n在Java中对象之间的关系会组成一个对象图,序列化的过程是对该对象图的遍历,那么反序列化也仍然是对该对象图的遍历.对于对象里面的对象就是递归过程,对于链表之类的数据结构递归的话很容易引起栈溢出,那么就可以使用`transient`忽略该字段.\n\n\n\n\n\n","slug":"工具/Java中的序列化相关知识","published":1,"updated":"2017-05-07T13:13:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xr001d6wz5gml1zi1l","content":"<p>今天线上遇到了DTO类实现了<code>Serializable</code>接口,但是其并没有显示声明<code>serialVersionUID</code>,这样的话每次打包有改动JDK就会为其重新生成<code>serialVersionUID</code>.这就带来了不同版本之间的实体类可能反序列化不成功,线上RPC调用出现了问题.那么就深入探讨一下原因.</p>\n<h3 id=\"Serializable的作用\"><a href=\"#Serializable的作用\" class=\"headerlink\" title=\"Serializable的作用\"></a>Serializable的作用</h3><p>看该类的JDK注释可以发现<code>The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.</code>也就是说Serializable是一个标识接口,和<code>Cloneable</code>接口等一样的效果.<br>如下面的User类,实现了序列化接口,并使用<code>serialVersionUID</code>标识其序列化对应的ID序号.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5768430629641297769L</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String nickname;</div><div class=\"line\">  <span class=\"keyword\">private</span> String passwd;</div><div class=\"line\">  <span class=\"comment\">//省略get和set</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"如何序列化\"><a href=\"#如何序列化\" class=\"headerlink\" title=\"如何序列化\"></a>如何序列化</h3><p><code>java.io.ObjectOutputStream</code>代表对象输出流,其使用writeObject()方法把对象实例转换为字节流然后写入到文件,或者用于网络传输.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWriteObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  User userDO = <span class=\"keyword\">new</span> User();</div><div class=\"line\">  userDO.setNickname(<span class=\"string\">\"屈定\"</span>);</div><div class=\"line\">  userDO.setPasswd(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">  File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.out\"</span>);</div><div class=\"line\">  ObjectOutputStream outputStream = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">  outputStream.writeObject(userDO);<span class=\"comment\">//序列化写入到文件中.</span></div><div class=\"line\">  outputStream.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"如何反序列化\"><a href=\"#如何反序列化\" class=\"headerlink\" title=\"如何反序列化\"></a>如何反序列化</h3><p><code>java.io.ObjectInputStream</code>代表对象输入流,其使用readObject()方法读取序列化的字节,然后再转换为对象.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReadObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class=\"line\">  File file = <span class=\"keyword\">new</span> File(base+File.separator+<span class=\"string\">\"user.out\"</span>);</div><div class=\"line\">  ObjectInputStream inputStream = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">  User user = (User) inputStream.readObject();</div><div class=\"line\">  Assert.assertTrue(StringUtils.equals(user.getNickname(),<span class=\"string\">\"屈定\"</span>));</div><div class=\"line\">  Assert.assertTrue(StringUtils.equals(user.getPasswd(),<span class=\"string\">\"123456\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"serialVersionUID的作用\"><a href=\"#serialVersionUID的作用\" class=\"headerlink\" title=\"serialVersionUID的作用\"></a>serialVersionUID的作用</h3><p>按照上面代码,序列化和反序列化都是成功的,如果在已经序列化后,对User要作修改,增加一个email字段,再试试反序列化.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5768430629641297769L</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nickname;</div><div class=\"line\">    <span class=\"keyword\">private</span> String passwd;</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>程序会正常运行,而且这个email会被很智能的初始化为null.<br>修改<code>serialVersionUID</code>为1L再试试.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.io.InvalidClassException: cn.edu.aust.test.ObjectTest$User; local class incompatible: stream classdesc serialVersionUID = 5768430629641297769, local class serialVersionUID = 1</div></pre></td></tr></table></figure></p>\n<p>报错很明显,两边类的<code>serialVersionUID</code>不一样,也就是说对于编译好的class,其<code>serialVersionUID</code>是其序列化的唯一标识,如果未显示声明JDK则会自动为其加上,可以使用命令<code>seriserialver</code>可以查看一个class文件的<code>serialVersionUID</code>,当线上版本忘记加该字段的时候该命令还是很有用处的.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">seriserialver cn.edu.aust.test.ObjectTest\\<span class=\"variable\">$User</span> </div><div class=\"line\">cn.edu.aust.test.ObjectTest<span class=\"variable\">$User</span>:    private static final long serialVersionUID = 1L;</div></pre></td></tr></table></figure></p>\n<h3 id=\"transient的作用\"><a href=\"#transient的作用\" class=\"headerlink\" title=\"transient的作用\"></a>transient的作用</h3><p>transient翻译为瞬时,也就是被其修饰的变量序列化时会忽略该字段.什么时候需要用到这个字段呢?<br>在Java中对象之间的关系会组成一个对象图,序列化的过程是对该对象图的遍历,那么反序列化也仍然是对该对象图的遍历.对于对象里面的对象就是递归过程,对于链表之类的数据结构递归的话很容易引起栈溢出,那么就可以使用<code>transient</code>忽略该字段.</p>\n","excerpt":"","more":"<p>今天线上遇到了DTO类实现了<code>Serializable</code>接口,但是其并没有显示声明<code>serialVersionUID</code>,这样的话每次打包有改动JDK就会为其重新生成<code>serialVersionUID</code>.这就带来了不同版本之间的实体类可能反序列化不成功,线上RPC调用出现了问题.那么就深入探讨一下原因.</p>\n<h3 id=\"Serializable的作用\"><a href=\"#Serializable的作用\" class=\"headerlink\" title=\"Serializable的作用\"></a>Serializable的作用</h3><p>看该类的JDK注释可以发现<code>The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.</code>也就是说Serializable是一个标识接口,和<code>Cloneable</code>接口等一样的效果.<br>如下面的User类,实现了序列化接口,并使用<code>serialVersionUID</code>标识其序列化对应的ID序号.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5768430629641297769L</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String nickname;</div><div class=\"line\">  <span class=\"keyword\">private</span> String passwd;</div><div class=\"line\">  <span class=\"comment\">//省略get和set</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"如何序列化\"><a href=\"#如何序列化\" class=\"headerlink\" title=\"如何序列化\"></a>如何序列化</h3><p><code>java.io.ObjectOutputStream</code>代表对象输出流,其使用writeObject()方法把对象实例转换为字节流然后写入到文件,或者用于网络传输.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testWriteObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">  User userDO = <span class=\"keyword\">new</span> User();</div><div class=\"line\">  userDO.setNickname(<span class=\"string\">\"屈定\"</span>);</div><div class=\"line\">  userDO.setPasswd(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">  File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"user.out\"</span>);</div><div class=\"line\">  ObjectOutputStream outputStream = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(file));</div><div class=\"line\">  outputStream.writeObject(userDO);<span class=\"comment\">//序列化写入到文件中.</span></div><div class=\"line\">  outputStream.close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"如何反序列化\"><a href=\"#如何反序列化\" class=\"headerlink\" title=\"如何反序列化\"></a>如何反序列化</h3><p><code>java.io.ObjectInputStream</code>代表对象输入流,其使用readObject()方法读取序列化的字节,然后再转换为对象.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testReadObj</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class=\"line\">  File file = <span class=\"keyword\">new</span> File(base+File.separator+<span class=\"string\">\"user.out\"</span>);</div><div class=\"line\">  ObjectInputStream inputStream = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(file));</div><div class=\"line\">  User user = (User) inputStream.readObject();</div><div class=\"line\">  Assert.assertTrue(StringUtils.equals(user.getNickname(),<span class=\"string\">\"屈定\"</span>));</div><div class=\"line\">  Assert.assertTrue(StringUtils.equals(user.getPasswd(),<span class=\"string\">\"123456\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"serialVersionUID的作用\"><a href=\"#serialVersionUID的作用\" class=\"headerlink\" title=\"serialVersionUID的作用\"></a>serialVersionUID的作用</h3><p>按照上面代码,序列化和反序列化都是成功的,如果在已经序列化后,对User要作修改,增加一个email字段,再试试反序列化.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5768430629641297769L</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> String nickname;</div><div class=\"line\">    <span class=\"keyword\">private</span> String passwd;</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>程序会正常运行,而且这个email会被很智能的初始化为null.<br>修改<code>serialVersionUID</code>为1L再试试.<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.io.InvalidClassException: cn.edu.aust.test.ObjectTest$User; local class incompatible: stream classdesc serialVersionUID = 5768430629641297769, local class serialVersionUID = 1</div></pre></td></tr></table></figure></p>\n<p>报错很明显,两边类的<code>serialVersionUID</code>不一样,也就是说对于编译好的class,其<code>serialVersionUID</code>是其序列化的唯一标识,如果未显示声明JDK则会自动为其加上,可以使用命令<code>seriserialver</code>可以查看一个class文件的<code>serialVersionUID</code>,当线上版本忘记加该字段的时候该命令还是很有用处的.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">seriserialver cn.edu.aust.test.ObjectTest\\<span class=\"variable\">$User</span> </div><div class=\"line\">cn.edu.aust.test.ObjectTest<span class=\"variable\">$User</span>:    private static final long serialVersionUID = 1L;</div></pre></td></tr></table></figure></p>\n<h3 id=\"transient的作用\"><a href=\"#transient的作用\" class=\"headerlink\" title=\"transient的作用\"></a>transient的作用</h3><p>transient翻译为瞬时,也就是被其修饰的变量序列化时会忽略该字段.什么时候需要用到这个字段呢?<br>在Java中对象之间的关系会组成一个对象图,序列化的过程是对该对象图的遍历,那么反序列化也仍然是对该对象图的遍历.对于对象里面的对象就是递归过程,对于链表之类的数据结构递归的话很容易引起栈溢出,那么就可以使用<code>transient</code>忽略该字段.</p>\n"},{"title":"毕业设计周记(七)","date":"2017-04-24T11:00:00.000Z","_content":"\n本周把个人中心完成了,用户注册后的邮件验证,以及注册后的更新自身信息,找回密码等功能都完成.\n\n毕业论文正在写系统整体设计,需要画一些图.预计五一假期之后初稿出来.\n\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","source":"_posts/毕业设计/毕业设计周记(七).md","raw":"---\ntitle: 毕业设计周记(七)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-24 19:00:00\n\n---\n\n本周把个人中心完成了,用户注册后的邮件验证,以及注册后的更新自身信息,找回密码等功能都完成.\n\n毕业论文正在写系统整体设计,需要画一些图.预计五一假期之后初稿出来.\n\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","slug":"毕业设计/毕业设计周记(七)","published":1,"updated":"2017-04-24T11:07:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xt001h6wz58aqwlwvp","content":"<p>本周把个人中心完成了,用户注册后的邮件验证,以及注册后的更新自身信息,找回密码等功能都完成.</p>\n<p>毕业论文正在写系统整体设计,需要画一些图.预计五一假期之后初稿出来.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n","excerpt":"","more":"<p>本周把个人中心完成了,用户注册后的邮件验证,以及注册后的更新自身信息,找回密码等功能都完成.</p>\n<p>毕业论文正在写系统整体设计,需要画一些图.预计五一假期之后初稿出来.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n"},{"title":"毕业设计周记(一)","date":"2017-03-10T01:50:00.000Z","_content":"本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(一).md","raw":"---\ntitle: 毕业设计周记(一)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-10 09:50:00\n---\n本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.\n\n关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点**判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题**,因此在学习Docker的知识.\n\n因此目前进度:\n\n1. WEB端基本完成\n2. Judge端完成\n\n等待完成:\n\n1. Judge移植到Docker中\n2. 打通WEB端和Judge端的通信,也就是实现判题.\n\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(一)","published":1,"updated":"2017-03-11T02:09:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xv001j6wz5sn89lrwm","content":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>本周算是正式开始做毕业设计,之前虽然一直在做,但是处于刚学习阶段,各方面做的都不是很好,因此自己也把第一版删除了,目前重构第二版.现在不止把这个当成毕业设计,而是想把他当成一个平台.用于自己学习到的技能在上面施展,因此很多没必要使用的东西都用上了.</p>\n<p>关于判题内核,这个是一个难点.目前采取开源的方案,C++判题,使用JNI调用方式,(第一版是开源的windows判题内核,问题多多)WEB端和Judge端使用gRPC通信.目前卡在的难点<strong>判题内核是在linux下运行,但是自己用的是MAC,所以想采用Docker方案,这样的话还顺便更进一步解决了Judge的安全性问题</strong>,因此在学习Docker的知识.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端基本完成</li>\n<li>Judge端完成</li>\n</ol>\n<p>等待完成:</p>\n<ol>\n<li>Judge移植到Docker中</li>\n<li>打通WEB端和Judge端的通信,也就是实现判题.</li>\n</ol>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(三)","date":"2017-03-25T13:50:00.000Z","_content":"**3.26更新**\n周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.\n\n----------\n\n花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.\n\n部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.\n\n竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.\n\n因此目前进度:\n\n1. 服务器部署全部docker化\n2. 线上可以直接判题\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.竞赛的支持\n2.注册流程优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(三).md","raw":"---\ntitle: 毕业设计周记(三)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-25 21:50:00\n---\n**3.26更新**\n周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.\n\n----------\n\n花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.\n\n部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.\n\n竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.\n\n因此目前进度:\n\n1. 服务器部署全部docker化\n2. 线上可以直接判题\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.竞赛的支持\n2.注册流程优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(三)","published":1,"updated":"2017-03-26T13:41:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7xy001n6wz5cf1jjv2p","content":"<p><strong>3.26更新</strong><br>周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.</p>\n<hr>\n<p>花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.</p>\n<p>部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.</p>\n<p>竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>服务器部署全部docker化</li>\n<li>线上可以直接判题</li>\n</ol>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.注册流程优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p><strong>3.26更新</strong><br>周末把竞赛支持也写好了,但是总觉得和自己想要的不太一样了,前端太乏力,因此下周开始重构前端,采用VUE写成一个单页逻辑应用.希望不会耽误太多时间.</p>\n<hr>\n<p>花了一下午的时间把服务器重装了,所有实例包括mysql,redis,nginx都跑在docker中,项目也是跑在docker中,目前来看效果很不错,对服务器的利用率比之前高太多了.</p>\n<p>部署的OJ漏洞挺多的,体验上也没怎么优化,尤其是注册流程,问题多多,接下来要优化代码,优化这个流程.</p>\n<p>竞赛方面的支持,因为上周公司出了几个大活动,一直比较忙,而没去做,本周也继续做竞赛方面支持.</p>\n<p>因此目前进度:</p>\n<ol>\n<li>服务器部署全部docker化</li>\n<li>线上可以直接判题</li>\n</ol>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.注册流程优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(五)","date":"2017-04-08T14:50:00.000Z","_content":"\n本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(五).md","raw":"---\ntitle: 毕业设计周记(五)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-08 22:50:00\n\n---\n\n本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(五)","published":1,"updated":"2017-04-08T14:48:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y0001q6wz5hc6sod8s","content":"<p>本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>本周一直在重构前端,目前登录注册+侧边栏都已经完成,在此过程熟悉了angular2的开发模式,不得不佩服这些前端大神们,搞出来ng2这种类似后端写法的框架,下周进度会更加快,希望下周重构完成.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(二)","date":"2017-03-18T14:50:00.000Z","_content":"上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.\n\n![](http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg)\n\n\n因此目前进度:\n\n1. WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.\n\n等待完成:\n\n1.竞赛的支持\n2.代码重构,一些体验上的逻辑优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(二).md","raw":"---\ntitle: 毕业设计周记(二)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-03-18 22:50:00\n---\n上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.\n\n![](http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg)\n\n![](http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg)\n\n\n因此目前进度:\n\n1. WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.\n\n等待完成:\n\n1.竞赛的支持\n2.代码重构,一些体验上的逻辑优化\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(二)","published":1,"updated":"2017-03-18T14:52:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y2001u6wz5ags5tx96","content":"<p>上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg\" alt=\"\"></p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.</li>\n</ol>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.代码重构,一些体验上的逻辑优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>上周学习docker之后,建立起docker的判题环境,目前已成功判题,前端部分也打通.目前支持语言C,C++,Java,后续会添加更多语言支持.接下来的任务是整理代码,重构部分逻辑代码,还有竞赛判题的支持.预计下周完成.</p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/M4V64IgxeMaWtWlUVumAWBvLrUh9VBT1rfWnLuKF.jpg\" alt=\"\"></p>\n<p><img src=\"http://ac-HSNl7zbI.clouddn.com/Yd4SAenh4N3THhsau4GxNdxKE4XnpiTRqfsvhpkk.jpg\" alt=\"\"></p>\n<p>因此目前进度:</p>\n<ol>\n<li>WEB端和Judge端打通,近期部署到自己的服务器上,以便展示.</li>\n</ol>\n<p>等待完成:</p>\n<p>1.竞赛的支持<br>2.代码重构,一些体验上的逻辑优化</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"毕业设计周记(八)","date":"2017-04-29T10:00:00.000Z","_content":"写毕业设计过程中发现一些设计不是很好的地方,比如说结构上之前maven模块化分层,dao,service,controller每一个都是单独的maven项目,导致开发起来比较麻烦,所以改掉了,把数据库模型对应的DO单独放入一个架包,然后dao,service,controller等放入一个war包中,明白了对于一个小项目来说过多的分层是系统开发的累赘.\n\n修改数据库模型后代码不少地方重新写了下,耽误了点时间,五一期间仍然是写毕业论文.\n\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","source":"_posts/毕业设计/毕业设计周记(八).md","raw":"---\ntitle: 毕业设计周记(八)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-29 18:00:00\n\n---\n写毕业设计过程中发现一些设计不是很好的地方,比如说结构上之前maven模块化分层,dao,service,controller每一个都是单独的maven项目,导致开发起来比较麻烦,所以改掉了,把数据库模型对应的DO单独放入一个架包,然后dao,service,controller等放入一个war包中,明白了对于一个小项目来说过多的分层是系统开发的累赘.\n\n修改数据库模型后代码不少地方重新写了下,耽误了点时间,五一期间仍然是写毕业论文.\n\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","slug":"毕业设计/毕业设计周记(八)","published":1,"updated":"2017-04-29T11:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y4001x6wz5pfek09w7","content":"<p>写毕业设计过程中发现一些设计不是很好的地方,比如说结构上之前maven模块化分层,dao,service,controller每一个都是单独的maven项目,导致开发起来比较麻烦,所以改掉了,把数据库模型对应的DO单独放入一个架包,然后dao,service,controller等放入一个war包中,明白了对于一个小项目来说过多的分层是系统开发的累赘.</p>\n<p>修改数据库模型后代码不少地方重新写了下,耽误了点时间,五一期间仍然是写毕业论文.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n","excerpt":"","more":"<p>写毕业设计过程中发现一些设计不是很好的地方,比如说结构上之前maven模块化分层,dao,service,controller每一个都是单独的maven项目,导致开发起来比较麻烦,所以改掉了,把数据库模型对应的DO单独放入一个架包,然后dao,service,controller等放入一个war包中,明白了对于一个小项目来说过多的分层是系统开发的累赘.</p>\n<p>修改数据库模型后代码不少地方重新写了下,耽误了点时间,五一期间仍然是写毕业论文.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n"},{"title":"毕业设计周记(六)","date":"2017-04-16T06:30:00.000Z","_content":"\n前端项目重构完毕,目前已部署到个人服务器上了.\n\n接下来写毕业论文,然后对OJ的功能进行测试,并且对其中的小bug进行修复.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","source":"_posts/毕业设计/毕业设计周记(六).md","raw":"---\ntitle: 毕业设计周记(六)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-16 14:30:00\n\n---\n\n前端项目重构完毕,目前已部署到个人服务器上了.\n\n接下来写毕业论文,然后对OJ的功能进行测试,并且对其中的小bug进行修复.\n\n前端项目地址: https://github.com/nl101531/AUSTOJ-WEB\n\n后端项目地址: https://github.com/nl101531/AUSTOJ2\n\n\n测试地址: http://oj.mrdear.cn\n\n测试账号: 1015315668@qq.com\n          111111\n\n等待完成:\n\n1.毕业论文\n\n","slug":"毕业设计/毕业设计周记(六)","published":1,"updated":"2017-04-16T06:35:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y500216wz5o3dkx1ja","content":"<p>前端项目重构完毕,目前已部署到个人服务器上了.</p>\n<p>接下来写毕业论文,然后对OJ的功能进行测试,并且对其中的小bug进行修复.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n","excerpt":"","more":"<p>前端项目重构完毕,目前已部署到个人服务器上了.</p>\n<p>接下来写毕业论文,然后对OJ的功能进行测试,并且对其中的小bug进行修复.</p>\n<p>前端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ-WEB\">https://github.com/nl101531/AUSTOJ-WEB</a></p>\n<p>后端项目地址: <a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n<p>测试地址: <a href=\"http://oj.mrdear.cn\">http://oj.mrdear.cn</a></p>\n<p>测试账号: 1015315668@qq.com<br>          111111</p>\n<p>等待完成:</p>\n<p>1.毕业论文</p>\n"},{"title":"毕业设计周记(四)","date":"2017-04-03T13:50:00.000Z","_content":"\n上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","source":"_posts/毕业设计/毕业设计周记(四).md","raw":"---\ntitle: 毕业设计周记(四)\ntags:\n  - 毕业设计\ncategories: 随谈\ndate: 2017-04-03 21:50:00\n\n---\n\n上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.\n\n测试地址:  http://oj.mrdear.cn/    服务器比价渣,速度比较慢\n\n测试账号:   1015315668@qq.com    密码: 111111\n\n等待完成:\n\n1.前端页面的重构\n\n源码地址:\n\nhttps://github.com/nl101531/AUSTOJ2\n","slug":"毕业设计/毕业设计周记(四)","published":1,"updated":"2017-04-03T23:37:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y700246wz5ipni0pkb","content":"<p>上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.</p>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\" target=\"_blank\" rel=\"external\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\" target=\"_blank\" rel=\"external\">https://github.com/nl101531/AUSTOJ2</a></p>\n","excerpt":"","more":"<p>上周注册流程等都写完了,开始重构前端页面,最终选择使用angular2来重构,其类似后端的写法以及typescript语法对js的修正使得其很容易上手.这周任务主要是在重构中熟悉angular的写法.到五月份的话不知道能不能重构完,尽力而为了.</p>\n<p>测试地址:  <a href=\"http://oj.mrdear.cn/\">http://oj.mrdear.cn/</a>    服务器比价渣,速度比较慢</p>\n<p>测试账号:   1015315668@qq.com    密码: 111111</p>\n<p>等待完成:</p>\n<p>1.前端页面的重构</p>\n<p>源码地址:</p>\n<p><a href=\"https://github.com/nl101531/AUSTOJ2\">https://github.com/nl101531/AUSTOJ2</a></p>\n"},{"title":"少走弯路的10条建议(转)","date":"2017-04-21T01:50:00.000Z","_content":"\n\n# 少走弯路的10条建议(转)\n\n标签（空格分隔）： 经验\n\n---\n\n转载自一个很佩服的大牛博客:[孤傲苍狼](http://www.cnblogs.com/xdp-gacl/p/4102862.html)\n\n----------\n\n\n　如何在涉世之初少走弯路，有一个好的开端，开始一番成功的事业？以下是一些先行者积累的10条有益的涉世忠告。好好地遵循、把握这些忠告和建议吧，比起所学的课堂课程来，它毫不逊色！\n\n1.1、买个闹钟，以便按时叫醒你\n\n　　贪睡和不守时，都将成为你工作和事业上的绊脚石，任何时候都一样。不仅要学会准时，更要学会提前。就如你坐车去某地，沿途的风景很美，你忍不住下车看一看，后来虽然你还是赶到了某地，却不是准时到达。“闹钟”只是一种简单的标志和提示，真正灵活、实用的时间，掌握在每个人的心中。  \n\n1.2、如果你不喜欢现在的工作，要么辞职不干，要么就闭嘴不言\n\n　　初出茅庐，往往眼高手低，心高气傲，大事做不了，小事不愿做。不要养成挑三拣四的习惯。不要雨天烦打伞，不带伞又怕淋雨，处处表现出不满的情绪。记住，不做则已，要做就要做好。\n\n1.3、每个人都有孤独的时候 \n\n　　要学会忍受孤独，这样才会成熟起来。年轻人嘻嘻哈哈、打打闹闹惯了，到了一个陌生的环境，面对形形色色的人和事，一下子不知所措起来，有时连一个可以倾心说话的地方也没有。这时，千万别浮躁，学会静心，学会忍受孤独。在孤独中思考，在思考中成熟，在成熟中升华。不要因为寂寞而乱了方寸，而去做无聊无益的事情，白白浪费了宝贵的时间。  \n\n1.4、走运时要做好倒霉的准备\n\n　　有一天，一只狐狸走到一个葡萄园外，看见里面水灵灵的葡萄垂涎欲滴。可是外面有栅栏挡着，无法进去。于是它一狠心绝食三日，减肥之后，终于钻进葡萄园内饱餐一顿。当它心满意足地想离开葡萄园时，发觉自己吃得太饱，怎么也钻不出栅栏了。相信任何人都不愿做这样的狐狸。退路同样重要。饱带干粮，晴带雨伞，点滴积累，水到渠成。有的东西今天似乎一文不值，但有朝一日也许就会身价百倍。  \n\n1.5、不要像玻璃那样脆弱\n\n　　有的人眼睛总盯着自己，所以长不高看不远；总是喜欢怨天尤人，也使别人无比厌烦。没有苦中苦，哪来甜中甜？不要像玻璃那样脆弱，而应像水晶一样透明，太阳一样辉煌，腊梅一样坚强。既然睁开眼睛享受风的清凉，就不要埋怨风中细小的沙粒。  \n\n1.6、管住自己的嘴巴\n\n　　不要谈论自己，更不要议论别人。谈论自己往往会自大虚伪，在名不副实中失去自己。议论别人往往陷入鸡毛蒜皮的是非口舌中纠缠不清。每天下班后和你的那些同事朋友喝酒聊天可不是件好事，因为，这中间往往会把议论同事、朋友当做话题。背后议论人总是不好的，尤其是议论别人的短处，这些会降低你的人格。  \n\n1.7、机会从不会“失掉”，你失掉了，自有别人会得到\n\n　　不要凡事在天，守株待兔，更不要寄希望于“机会”。机会只不过是相对于充分准备而又善于创造机会的人而言的。也许，你正为失去一个机会而懊悔、埋怨的时候，机会正被你对面那个同样的“倒霉鬼”给抓住了。没有机会，就要创造机会，有了机会，就要巧妙地抓住。  \n\n1.8、若电话老是不响，你该打出去\n\n　　很多时候，电话会给你带来意想不到的收获，它不是花瓶，仅仅成为一种摆设。交了新朋友，别忘了老朋友，朋友多了路好走。交际的一大诀窍就是主动。好的人缘好的口碑，往往助你的事业更上一个台阶。  \n\n1.9、千万不要因为自己已经到了结婚年龄而草率结婚\n\n　　想结婚，就要找一个能和你心心相印、相辅相携的伴侣。不要因为放纵和游戏而恋爱，不要因为恋爱而影响工作和事业，更不要因一桩草率而失败的婚姻而使人生受阻。感情用事往往会因小失大。  \n\n1.10、写出你一生要做的事情，把单子放在皮夹里，经常拿出来看\n\n　　人生要有目标，要有计划，要有提醒，要有紧迫感。一个又一个小目标串起来，就成了你一生的大目标。生活富足了，环境改善了，不要忘了皮夹里那张看似薄薄的单子。\n","source":"_posts/经验/少走弯路的10条建议(转).md","raw":"---\ntitle: 少走弯路的10条建议(转)\ntags:\n  - 经验\ncategories: 经验\ndate: 2017-04-21 09:50:00\n\n---\n\n\n# 少走弯路的10条建议(转)\n\n标签（空格分隔）： 经验\n\n---\n\n转载自一个很佩服的大牛博客:[孤傲苍狼](http://www.cnblogs.com/xdp-gacl/p/4102862.html)\n\n----------\n\n\n　如何在涉世之初少走弯路，有一个好的开端，开始一番成功的事业？以下是一些先行者积累的10条有益的涉世忠告。好好地遵循、把握这些忠告和建议吧，比起所学的课堂课程来，它毫不逊色！\n\n1.1、买个闹钟，以便按时叫醒你\n\n　　贪睡和不守时，都将成为你工作和事业上的绊脚石，任何时候都一样。不仅要学会准时，更要学会提前。就如你坐车去某地，沿途的风景很美，你忍不住下车看一看，后来虽然你还是赶到了某地，却不是准时到达。“闹钟”只是一种简单的标志和提示，真正灵活、实用的时间，掌握在每个人的心中。  \n\n1.2、如果你不喜欢现在的工作，要么辞职不干，要么就闭嘴不言\n\n　　初出茅庐，往往眼高手低，心高气傲，大事做不了，小事不愿做。不要养成挑三拣四的习惯。不要雨天烦打伞，不带伞又怕淋雨，处处表现出不满的情绪。记住，不做则已，要做就要做好。\n\n1.3、每个人都有孤独的时候 \n\n　　要学会忍受孤独，这样才会成熟起来。年轻人嘻嘻哈哈、打打闹闹惯了，到了一个陌生的环境，面对形形色色的人和事，一下子不知所措起来，有时连一个可以倾心说话的地方也没有。这时，千万别浮躁，学会静心，学会忍受孤独。在孤独中思考，在思考中成熟，在成熟中升华。不要因为寂寞而乱了方寸，而去做无聊无益的事情，白白浪费了宝贵的时间。  \n\n1.4、走运时要做好倒霉的准备\n\n　　有一天，一只狐狸走到一个葡萄园外，看见里面水灵灵的葡萄垂涎欲滴。可是外面有栅栏挡着，无法进去。于是它一狠心绝食三日，减肥之后，终于钻进葡萄园内饱餐一顿。当它心满意足地想离开葡萄园时，发觉自己吃得太饱，怎么也钻不出栅栏了。相信任何人都不愿做这样的狐狸。退路同样重要。饱带干粮，晴带雨伞，点滴积累，水到渠成。有的东西今天似乎一文不值，但有朝一日也许就会身价百倍。  \n\n1.5、不要像玻璃那样脆弱\n\n　　有的人眼睛总盯着自己，所以长不高看不远；总是喜欢怨天尤人，也使别人无比厌烦。没有苦中苦，哪来甜中甜？不要像玻璃那样脆弱，而应像水晶一样透明，太阳一样辉煌，腊梅一样坚强。既然睁开眼睛享受风的清凉，就不要埋怨风中细小的沙粒。  \n\n1.6、管住自己的嘴巴\n\n　　不要谈论自己，更不要议论别人。谈论自己往往会自大虚伪，在名不副实中失去自己。议论别人往往陷入鸡毛蒜皮的是非口舌中纠缠不清。每天下班后和你的那些同事朋友喝酒聊天可不是件好事，因为，这中间往往会把议论同事、朋友当做话题。背后议论人总是不好的，尤其是议论别人的短处，这些会降低你的人格。  \n\n1.7、机会从不会“失掉”，你失掉了，自有别人会得到\n\n　　不要凡事在天，守株待兔，更不要寄希望于“机会”。机会只不过是相对于充分准备而又善于创造机会的人而言的。也许，你正为失去一个机会而懊悔、埋怨的时候，机会正被你对面那个同样的“倒霉鬼”给抓住了。没有机会，就要创造机会，有了机会，就要巧妙地抓住。  \n\n1.8、若电话老是不响，你该打出去\n\n　　很多时候，电话会给你带来意想不到的收获，它不是花瓶，仅仅成为一种摆设。交了新朋友，别忘了老朋友，朋友多了路好走。交际的一大诀窍就是主动。好的人缘好的口碑，往往助你的事业更上一个台阶。  \n\n1.9、千万不要因为自己已经到了结婚年龄而草率结婚\n\n　　想结婚，就要找一个能和你心心相印、相辅相携的伴侣。不要因为放纵和游戏而恋爱，不要因为恋爱而影响工作和事业，更不要因一桩草率而失败的婚姻而使人生受阻。感情用事往往会因小失大。  \n\n1.10、写出你一生要做的事情，把单子放在皮夹里，经常拿出来看\n\n　　人生要有目标，要有计划，要有提醒，要有紧迫感。一个又一个小目标串起来，就成了你一生的大目标。生活富足了，环境改善了，不要忘了皮夹里那张看似薄薄的单子。\n","slug":"经验/少走弯路的10条建议(转)","published":1,"updated":"2017-04-21T01:35:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7y800286wz5j44ladbt","content":"<h1 id=\"少走弯路的10条建议-转\"><a href=\"#少走弯路的10条建议-转\" class=\"headerlink\" title=\"少走弯路的10条建议(转)\"></a>少走弯路的10条建议(转)</h1><p>标签（空格分隔）： 经验</p>\n<hr>\n<p>转载自一个很佩服的大牛博客:<a href=\"http://www.cnblogs.com/xdp-gacl/p/4102862.html\" target=\"_blank\" rel=\"external\">孤傲苍狼</a></p>\n<hr>\n<p>　如何在涉世之初少走弯路，有一个好的开端，开始一番成功的事业？以下是一些先行者积累的10条有益的涉世忠告。好好地遵循、把握这些忠告和建议吧，比起所学的课堂课程来，它毫不逊色！</p>\n<p>1.1、买个闹钟，以便按时叫醒你</p>\n<p>　　贪睡和不守时，都将成为你工作和事业上的绊脚石，任何时候都一样。不仅要学会准时，更要学会提前。就如你坐车去某地，沿途的风景很美，你忍不住下车看一看，后来虽然你还是赶到了某地，却不是准时到达。“闹钟”只是一种简单的标志和提示，真正灵活、实用的时间，掌握在每个人的心中。  </p>\n<p>1.2、如果你不喜欢现在的工作，要么辞职不干，要么就闭嘴不言</p>\n<p>　　初出茅庐，往往眼高手低，心高气傲，大事做不了，小事不愿做。不要养成挑三拣四的习惯。不要雨天烦打伞，不带伞又怕淋雨，处处表现出不满的情绪。记住，不做则已，要做就要做好。</p>\n<p>1.3、每个人都有孤独的时候 </p>\n<p>　　要学会忍受孤独，这样才会成熟起来。年轻人嘻嘻哈哈、打打闹闹惯了，到了一个陌生的环境，面对形形色色的人和事，一下子不知所措起来，有时连一个可以倾心说话的地方也没有。这时，千万别浮躁，学会静心，学会忍受孤独。在孤独中思考，在思考中成熟，在成熟中升华。不要因为寂寞而乱了方寸，而去做无聊无益的事情，白白浪费了宝贵的时间。  </p>\n<p>1.4、走运时要做好倒霉的准备</p>\n<p>　　有一天，一只狐狸走到一个葡萄园外，看见里面水灵灵的葡萄垂涎欲滴。可是外面有栅栏挡着，无法进去。于是它一狠心绝食三日，减肥之后，终于钻进葡萄园内饱餐一顿。当它心满意足地想离开葡萄园时，发觉自己吃得太饱，怎么也钻不出栅栏了。相信任何人都不愿做这样的狐狸。退路同样重要。饱带干粮，晴带雨伞，点滴积累，水到渠成。有的东西今天似乎一文不值，但有朝一日也许就会身价百倍。  </p>\n<p>1.5、不要像玻璃那样脆弱</p>\n<p>　　有的人眼睛总盯着自己，所以长不高看不远；总是喜欢怨天尤人，也使别人无比厌烦。没有苦中苦，哪来甜中甜？不要像玻璃那样脆弱，而应像水晶一样透明，太阳一样辉煌，腊梅一样坚强。既然睁开眼睛享受风的清凉，就不要埋怨风中细小的沙粒。  </p>\n<p>1.6、管住自己的嘴巴</p>\n<p>　　不要谈论自己，更不要议论别人。谈论自己往往会自大虚伪，在名不副实中失去自己。议论别人往往陷入鸡毛蒜皮的是非口舌中纠缠不清。每天下班后和你的那些同事朋友喝酒聊天可不是件好事，因为，这中间往往会把议论同事、朋友当做话题。背后议论人总是不好的，尤其是议论别人的短处，这些会降低你的人格。  </p>\n<p>1.7、机会从不会“失掉”，你失掉了，自有别人会得到</p>\n<p>　　不要凡事在天，守株待兔，更不要寄希望于“机会”。机会只不过是相对于充分准备而又善于创造机会的人而言的。也许，你正为失去一个机会而懊悔、埋怨的时候，机会正被你对面那个同样的“倒霉鬼”给抓住了。没有机会，就要创造机会，有了机会，就要巧妙地抓住。  </p>\n<p>1.8、若电话老是不响，你该打出去</p>\n<p>　　很多时候，电话会给你带来意想不到的收获，它不是花瓶，仅仅成为一种摆设。交了新朋友，别忘了老朋友，朋友多了路好走。交际的一大诀窍就是主动。好的人缘好的口碑，往往助你的事业更上一个台阶。  </p>\n<p>1.9、千万不要因为自己已经到了结婚年龄而草率结婚</p>\n<p>　　想结婚，就要找一个能和你心心相印、相辅相携的伴侣。不要因为放纵和游戏而恋爱，不要因为恋爱而影响工作和事业，更不要因一桩草率而失败的婚姻而使人生受阻。感情用事往往会因小失大。  </p>\n<p>1.10、写出你一生要做的事情，把单子放在皮夹里，经常拿出来看</p>\n<p>　　人生要有目标，要有计划，要有提醒，要有紧迫感。一个又一个小目标串起来，就成了你一生的大目标。生活富足了，环境改善了，不要忘了皮夹里那张看似薄薄的单子。</p>\n","excerpt":"","more":"<h1 id=\"少走弯路的10条建议-转\"><a href=\"#少走弯路的10条建议-转\" class=\"headerlink\" title=\"少走弯路的10条建议(转)\"></a>少走弯路的10条建议(转)</h1><p>标签（空格分隔）： 经验</p>\n<hr>\n<p>转载自一个很佩服的大牛博客:<a href=\"http://www.cnblogs.com/xdp-gacl/p/4102862.html\">孤傲苍狼</a></p>\n<hr>\n<p>　如何在涉世之初少走弯路，有一个好的开端，开始一番成功的事业？以下是一些先行者积累的10条有益的涉世忠告。好好地遵循、把握这些忠告和建议吧，比起所学的课堂课程来，它毫不逊色！</p>\n<p>1.1、买个闹钟，以便按时叫醒你</p>\n<p>　　贪睡和不守时，都将成为你工作和事业上的绊脚石，任何时候都一样。不仅要学会准时，更要学会提前。就如你坐车去某地，沿途的风景很美，你忍不住下车看一看，后来虽然你还是赶到了某地，却不是准时到达。“闹钟”只是一种简单的标志和提示，真正灵活、实用的时间，掌握在每个人的心中。  </p>\n<p>1.2、如果你不喜欢现在的工作，要么辞职不干，要么就闭嘴不言</p>\n<p>　　初出茅庐，往往眼高手低，心高气傲，大事做不了，小事不愿做。不要养成挑三拣四的习惯。不要雨天烦打伞，不带伞又怕淋雨，处处表现出不满的情绪。记住，不做则已，要做就要做好。</p>\n<p>1.3、每个人都有孤独的时候 </p>\n<p>　　要学会忍受孤独，这样才会成熟起来。年轻人嘻嘻哈哈、打打闹闹惯了，到了一个陌生的环境，面对形形色色的人和事，一下子不知所措起来，有时连一个可以倾心说话的地方也没有。这时，千万别浮躁，学会静心，学会忍受孤独。在孤独中思考，在思考中成熟，在成熟中升华。不要因为寂寞而乱了方寸，而去做无聊无益的事情，白白浪费了宝贵的时间。  </p>\n<p>1.4、走运时要做好倒霉的准备</p>\n<p>　　有一天，一只狐狸走到一个葡萄园外，看见里面水灵灵的葡萄垂涎欲滴。可是外面有栅栏挡着，无法进去。于是它一狠心绝食三日，减肥之后，终于钻进葡萄园内饱餐一顿。当它心满意足地想离开葡萄园时，发觉自己吃得太饱，怎么也钻不出栅栏了。相信任何人都不愿做这样的狐狸。退路同样重要。饱带干粮，晴带雨伞，点滴积累，水到渠成。有的东西今天似乎一文不值，但有朝一日也许就会身价百倍。  </p>\n<p>1.5、不要像玻璃那样脆弱</p>\n<p>　　有的人眼睛总盯着自己，所以长不高看不远；总是喜欢怨天尤人，也使别人无比厌烦。没有苦中苦，哪来甜中甜？不要像玻璃那样脆弱，而应像水晶一样透明，太阳一样辉煌，腊梅一样坚强。既然睁开眼睛享受风的清凉，就不要埋怨风中细小的沙粒。  </p>\n<p>1.6、管住自己的嘴巴</p>\n<p>　　不要谈论自己，更不要议论别人。谈论自己往往会自大虚伪，在名不副实中失去自己。议论别人往往陷入鸡毛蒜皮的是非口舌中纠缠不清。每天下班后和你的那些同事朋友喝酒聊天可不是件好事，因为，这中间往往会把议论同事、朋友当做话题。背后议论人总是不好的，尤其是议论别人的短处，这些会降低你的人格。  </p>\n<p>1.7、机会从不会“失掉”，你失掉了，自有别人会得到</p>\n<p>　　不要凡事在天，守株待兔，更不要寄希望于“机会”。机会只不过是相对于充分准备而又善于创造机会的人而言的。也许，你正为失去一个机会而懊悔、埋怨的时候，机会正被你对面那个同样的“倒霉鬼”给抓住了。没有机会，就要创造机会，有了机会，就要巧妙地抓住。  </p>\n<p>1.8、若电话老是不响，你该打出去</p>\n<p>　　很多时候，电话会给你带来意想不到的收获，它不是花瓶，仅仅成为一种摆设。交了新朋友，别忘了老朋友，朋友多了路好走。交际的一大诀窍就是主动。好的人缘好的口碑，往往助你的事业更上一个台阶。  </p>\n<p>1.9、千万不要因为自己已经到了结婚年龄而草率结婚</p>\n<p>　　想结婚，就要找一个能和你心心相印、相辅相携的伴侣。不要因为放纵和游戏而恋爱，不要因为恋爱而影响工作和事业，更不要因一桩草率而失败的婚姻而使人生受阻。感情用事往往会因小失大。  </p>\n<p>1.10、写出你一生要做的事情，把单子放在皮夹里，经常拿出来看</p>\n<p>　　人生要有目标，要有计划，要有提醒，要有紧迫感。一个又一个小目标串起来，就成了你一生的大目标。生活富足了，环境改善了，不要忘了皮夹里那张看似薄薄的单子。</p>\n"},{"title":"对一个WEB请求的理解","date":"2017-04-29T16:00:00.000Z","_content":"随着写的WEB程序越来越多,项目的部署也越来越繁琐,对于一些线上问题总是搞不清楚是哪个环节出的问题,归根结底是对整个流程的不熟悉导致,所以分析下一个WEB请求从用户输入地址到页面出来到底经历过多少东西.\n\n### URL解析\n首先把URL分割为几个部分,以地址`http://mrdear.cn/2017/04/15/动漫推荐/`为例\n协议: http\n网址: mrdear.cn\n资源路径: 2017/04/15/动漫推荐/\n\n浏览器拿到地址后会对其中非ASCII码的Unicode字符解析,比如空格会变成%20,汉字也会变成其16进制对应的编码值,如下例子:\n``` js\n上面链接等价于\nhttp://mrdear.cn/2017/04/15/%E5%8A%A8%E6%BC%AB/%E5%8A%A8%E6%BC%AB%E6%8E%A8%E8%8D%90/\n```\n中间还有其他很复杂的流程,比如参数,协议,请求头,请求体等建立.\n\n### DNS域名解析\n对于网址mrdear.cn,浏览器并不知道他所处的服务器位置,因此需要解析出其服务器ip,这个过程就是DNS域名解析.\n- 浏览器首先检查自身缓存dns解析,以chrome为例,输入`chrome://net-internals/#dns`即可看到缓存列表.该缓存通常几分钟到几小时不等,存在的话就直接返回,否则下一步\n- 和浏览器同样策略,OS对每一次解析结果也会做缓存,浏览器中不存在则在OS的缓存中查找.这个过成功也包括在本地hosts中查找.找到则返回,找不到则向本机的dns服务器发送查找请求.\n- DNS服务器和本机在一个子网内,则APR解析到具体设备的mac地址,然后向其查找.如果不在一个子网,则直接ARP解析当前主机网关地址,网关一般是上一个路由节点,也就是把查询转交给上一层服务器,那么上一层服务器找不到还会转交给它的上一层,如此形成一个递归查询过程,直到查找到根服务器.找不到则返回失败.找到则返回ip地址和其TTL时间.\nlinux和unix下的dns配置在`/etc/resolv.conf`中,可以使用`nslookup或者dig查`看解析过程.\n ![](http://oobu4m7ko.bkt.clouddn.com/1493479248.png?imageMogr2/thumbnail/!60p)\n\n- 解析成功后,浏览器创建与服务器的socket连接,构造请求信息,进行TCP三次握手,开始向服务器传输消息,并等服务器回复信息,这也是TPC可靠的一个原因.\n\n### 服务器响应\n服务器以nginx+tomcat为例,经过以上步骤后请求到达了nginx,nginx对URL进行分析,验证其所在机器上有所需要的服务,并且用户是有权限调用的,决定该URL由哪一个tomcat服务处理,捕获处理结果,返回给请求者,最后四次挥手结束请求.到此完成浏览器,服务端的通信.\n\n### 浏览器渲染\n浏览器拿到了服务器的返回信息后会对内容进行解析,展现成用户所需要的内容,如html,pdf等.\n- - - - -\n\n那么整个过程总结来看就是 用户输入URL -> 浏览器解析地址 -> DNS查找域名对应ip -> 服务器响应 ->浏览器拿到响应渲染.\n\n### 附录\n#### 1.CDN网络\nCDN又叫内容分布网络,一般用于静态资源如html,css,js的存储,简单的理解为一张大网,网上每一个节点都有着很多资源.那么每一个用户想要访问的时候就会去找离他最近的节点上面获取需要的内容.从而加快了网站整体访问速度.\n举个例子:用户访问taobao的某css文件,首先浏览器会发送请求 -> DNS解析域名,这里一般会有一个DNS负载均衡服务器,其得到最适合用户的CDN节点ip -> 用户拿到CDN节点ip得到资源.\n\n#### 2.DNS劫持\n了解了DNS的解析是一个递归过程,找到域名 <-> ip就返回,如果有人手动修改了该条映射信息,那么就会返回到错误的ip地址,这种行为也叫DNS劫持,对于客户端来说,没有很好地方式能认为服务器返回的信息是可靠的,也就是不可靠的HTTP通信,所以也就导致了这一层的攻击漏洞,而这种事一般是天朝的电信运营商能干得出来,所以选择一个靠谱的DNS是非常重要,推荐`114.114.114.114`\n\n#### 3.HTTPS\n应对HTTP的不可靠通信,所以诞生了HTTPS,即HTTP over SSL,使用SSL/TLS对HTTP的内容进行加密解密.整个流程如下图:\n<center>![](http://oobu4m7ko.bkt.clouddn.com/1493510445.png?imageMogr2/thumbnail/!100p)</center>\n- 在SSL握手阶段，客户端浏览器会认证服务器的身份，这是通过“证书”来实现的，证书由证书权威（CA）为某个域名签发，可以理解为网站的身份证件，客户端需要对这个证件进行认证，需要确定该证书是否属于目标网站并确认证书本身是否有效。最后在握手阶段，通信的双方还会协商出一个用于加密和解密的会话密钥。\n- SSL握手阶段结束之后，服务器和客户端使用协商出的会话密钥对交互的数据进行加密/解密操作，对于HTTP协议来说，就是将HTTP请求和应答经过加密之后再发送到网络上。\nHTTPS协议对服务器进行了一次身份验证,所以即使DNS被劫持,定向到的服务器也会因为没证书而无法通过身份验证.\n\n#### 4.乱码问题\n流程清晰后乱码问题就很好解决了,把浏览器,Nginx,Tomcat等都当成水池的话,数据的乱码只能在每一个的入口端和出口端.如果发生了乱码,那么首先定位到是哪一个口产生了乱码,然后再去找原因,一般都能解决.\n以JavaWEB应用为例,乱码主要发生在IO交互的过程中.其一浏览器与服务器建立socket连接,浏览器对URL以及request转换编码.请求到达tomcat,tomcat会对其进行解码,这个解码可在tomcat目录下的conf/server.xml中配置URIEncoding\n``` xml\n<connector port=”8080″ protocol=”HTTP/1.1″ maxThreads=”150″   connectionTimeout=”200000″\n     redirecPort=”8443″    URIEncoding=”utf-8″/>\n```\n这里要保证不乱码,下一步tomcat建立了ServletRequest和ServletResponse,那么这里也有编码,一般是post表单或者request body乱码,那么就需要指定ServletRequest和ServletResponse的编码格式\n``` java\nrequest.setCharacterEncoding(encoding);//设置请求信息编码\nresponse.setCharacterEncoding(encoding);//设置返回信息编码\n```\nJava程序在处理请求时和操作系统会有IO通信,和数据库会有IO通信,整个过程也会涉及编码,这种一般代码中会自动控制,出问题几率不大.\n浏览器拿到返回信息后对页面进行渲染,这一步也会有编码,这个一般手动指定下浏览器的渲染编码,比如`Content-Type: text/html;charset=UTF-8`,指定以UTF-8渲染该text/html返回.\n\n#### 5.几种域名解析\n域名解析记录主要分为：A 记录、MX记录、CNAME 记录、NS记录和 TXT记录\n- A记录：A 代表的是Address，用来指定域名对应的IP地址。域名可以多对一但是不能一对多。\n- MX记录：Mail Exchange,就是讲某个域名下的邮件服务器指向自己的Mail Server。\n- CNAME记录：别名解析。将一个域名设置一个或者多个别名。\n- NS记录：为某个域名指定DNS解析服务器。\n- TXT记录：为某个主机名或者域名设置文字说明。\n本站是托管于github的,主域名`mrdear.cn`是使用CNAME解析到`nl101531.github.io`的,二级域名`oj.mrdear.cn`和`md.mrdear.cn`都是使用A记录解析到对应主机的ip地址,到达主机后再使用Nginx进行不同的服务器转发.\n![](http://oobu4m7ko.bkt.clouddn.com/1493775848.png?imageMogr2/thumbnail/!70p)\n\n### 后记\n个人总结,如有错误请指出,以免误人子弟.\n\n","source":"_posts/运维/对一个WEB请求的理解.md","raw":"---\ntitle: 对一个WEB请求的理解\ntags:\n  - http \n  - web\ncategories: web\ndate: 2017-04-30 00:00:00\n---\n随着写的WEB程序越来越多,项目的部署也越来越繁琐,对于一些线上问题总是搞不清楚是哪个环节出的问题,归根结底是对整个流程的不熟悉导致,所以分析下一个WEB请求从用户输入地址到页面出来到底经历过多少东西.\n\n### URL解析\n首先把URL分割为几个部分,以地址`http://mrdear.cn/2017/04/15/动漫推荐/`为例\n协议: http\n网址: mrdear.cn\n资源路径: 2017/04/15/动漫推荐/\n\n浏览器拿到地址后会对其中非ASCII码的Unicode字符解析,比如空格会变成%20,汉字也会变成其16进制对应的编码值,如下例子:\n``` js\n上面链接等价于\nhttp://mrdear.cn/2017/04/15/%E5%8A%A8%E6%BC%AB/%E5%8A%A8%E6%BC%AB%E6%8E%A8%E8%8D%90/\n```\n中间还有其他很复杂的流程,比如参数,协议,请求头,请求体等建立.\n\n### DNS域名解析\n对于网址mrdear.cn,浏览器并不知道他所处的服务器位置,因此需要解析出其服务器ip,这个过程就是DNS域名解析.\n- 浏览器首先检查自身缓存dns解析,以chrome为例,输入`chrome://net-internals/#dns`即可看到缓存列表.该缓存通常几分钟到几小时不等,存在的话就直接返回,否则下一步\n- 和浏览器同样策略,OS对每一次解析结果也会做缓存,浏览器中不存在则在OS的缓存中查找.这个过成功也包括在本地hosts中查找.找到则返回,找不到则向本机的dns服务器发送查找请求.\n- DNS服务器和本机在一个子网内,则APR解析到具体设备的mac地址,然后向其查找.如果不在一个子网,则直接ARP解析当前主机网关地址,网关一般是上一个路由节点,也就是把查询转交给上一层服务器,那么上一层服务器找不到还会转交给它的上一层,如此形成一个递归查询过程,直到查找到根服务器.找不到则返回失败.找到则返回ip地址和其TTL时间.\nlinux和unix下的dns配置在`/etc/resolv.conf`中,可以使用`nslookup或者dig查`看解析过程.\n ![](http://oobu4m7ko.bkt.clouddn.com/1493479248.png?imageMogr2/thumbnail/!60p)\n\n- 解析成功后,浏览器创建与服务器的socket连接,构造请求信息,进行TCP三次握手,开始向服务器传输消息,并等服务器回复信息,这也是TPC可靠的一个原因.\n\n### 服务器响应\n服务器以nginx+tomcat为例,经过以上步骤后请求到达了nginx,nginx对URL进行分析,验证其所在机器上有所需要的服务,并且用户是有权限调用的,决定该URL由哪一个tomcat服务处理,捕获处理结果,返回给请求者,最后四次挥手结束请求.到此完成浏览器,服务端的通信.\n\n### 浏览器渲染\n浏览器拿到了服务器的返回信息后会对内容进行解析,展现成用户所需要的内容,如html,pdf等.\n- - - - -\n\n那么整个过程总结来看就是 用户输入URL -> 浏览器解析地址 -> DNS查找域名对应ip -> 服务器响应 ->浏览器拿到响应渲染.\n\n### 附录\n#### 1.CDN网络\nCDN又叫内容分布网络,一般用于静态资源如html,css,js的存储,简单的理解为一张大网,网上每一个节点都有着很多资源.那么每一个用户想要访问的时候就会去找离他最近的节点上面获取需要的内容.从而加快了网站整体访问速度.\n举个例子:用户访问taobao的某css文件,首先浏览器会发送请求 -> DNS解析域名,这里一般会有一个DNS负载均衡服务器,其得到最适合用户的CDN节点ip -> 用户拿到CDN节点ip得到资源.\n\n#### 2.DNS劫持\n了解了DNS的解析是一个递归过程,找到域名 <-> ip就返回,如果有人手动修改了该条映射信息,那么就会返回到错误的ip地址,这种行为也叫DNS劫持,对于客户端来说,没有很好地方式能认为服务器返回的信息是可靠的,也就是不可靠的HTTP通信,所以也就导致了这一层的攻击漏洞,而这种事一般是天朝的电信运营商能干得出来,所以选择一个靠谱的DNS是非常重要,推荐`114.114.114.114`\n\n#### 3.HTTPS\n应对HTTP的不可靠通信,所以诞生了HTTPS,即HTTP over SSL,使用SSL/TLS对HTTP的内容进行加密解密.整个流程如下图:\n<center>![](http://oobu4m7ko.bkt.clouddn.com/1493510445.png?imageMogr2/thumbnail/!100p)</center>\n- 在SSL握手阶段，客户端浏览器会认证服务器的身份，这是通过“证书”来实现的，证书由证书权威（CA）为某个域名签发，可以理解为网站的身份证件，客户端需要对这个证件进行认证，需要确定该证书是否属于目标网站并确认证书本身是否有效。最后在握手阶段，通信的双方还会协商出一个用于加密和解密的会话密钥。\n- SSL握手阶段结束之后，服务器和客户端使用协商出的会话密钥对交互的数据进行加密/解密操作，对于HTTP协议来说，就是将HTTP请求和应答经过加密之后再发送到网络上。\nHTTPS协议对服务器进行了一次身份验证,所以即使DNS被劫持,定向到的服务器也会因为没证书而无法通过身份验证.\n\n#### 4.乱码问题\n流程清晰后乱码问题就很好解决了,把浏览器,Nginx,Tomcat等都当成水池的话,数据的乱码只能在每一个的入口端和出口端.如果发生了乱码,那么首先定位到是哪一个口产生了乱码,然后再去找原因,一般都能解决.\n以JavaWEB应用为例,乱码主要发生在IO交互的过程中.其一浏览器与服务器建立socket连接,浏览器对URL以及request转换编码.请求到达tomcat,tomcat会对其进行解码,这个解码可在tomcat目录下的conf/server.xml中配置URIEncoding\n``` xml\n<connector port=”8080″ protocol=”HTTP/1.1″ maxThreads=”150″   connectionTimeout=”200000″\n     redirecPort=”8443″    URIEncoding=”utf-8″/>\n```\n这里要保证不乱码,下一步tomcat建立了ServletRequest和ServletResponse,那么这里也有编码,一般是post表单或者request body乱码,那么就需要指定ServletRequest和ServletResponse的编码格式\n``` java\nrequest.setCharacterEncoding(encoding);//设置请求信息编码\nresponse.setCharacterEncoding(encoding);//设置返回信息编码\n```\nJava程序在处理请求时和操作系统会有IO通信,和数据库会有IO通信,整个过程也会涉及编码,这种一般代码中会自动控制,出问题几率不大.\n浏览器拿到返回信息后对页面进行渲染,这一步也会有编码,这个一般手动指定下浏览器的渲染编码,比如`Content-Type: text/html;charset=UTF-8`,指定以UTF-8渲染该text/html返回.\n\n#### 5.几种域名解析\n域名解析记录主要分为：A 记录、MX记录、CNAME 记录、NS记录和 TXT记录\n- A记录：A 代表的是Address，用来指定域名对应的IP地址。域名可以多对一但是不能一对多。\n- MX记录：Mail Exchange,就是讲某个域名下的邮件服务器指向自己的Mail Server。\n- CNAME记录：别名解析。将一个域名设置一个或者多个别名。\n- NS记录：为某个域名指定DNS解析服务器。\n- TXT记录：为某个主机名或者域名设置文字说明。\n本站是托管于github的,主域名`mrdear.cn`是使用CNAME解析到`nl101531.github.io`的,二级域名`oj.mrdear.cn`和`md.mrdear.cn`都是使用A记录解析到对应主机的ip地址,到达主机后再使用Nginx进行不同的服务器转发.\n![](http://oobu4m7ko.bkt.clouddn.com/1493775848.png?imageMogr2/thumbnail/!70p)\n\n### 后记\n个人总结,如有错误请指出,以免误人子弟.\n\n","slug":"运维/对一个WEB请求的理解","published":1,"updated":"2017-05-06T01:13:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7yc002b6wz50d68kpw6","content":"<p>随着写的WEB程序越来越多,项目的部署也越来越繁琐,对于一些线上问题总是搞不清楚是哪个环节出的问题,归根结底是对整个流程的不熟悉导致,所以分析下一个WEB请求从用户输入地址到页面出来到底经历过多少东西.</p>\n<h3 id=\"URL解析\"><a href=\"#URL解析\" class=\"headerlink\" title=\"URL解析\"></a>URL解析</h3><p>首先把URL分割为几个部分,以地址<code>http://mrdear.cn/2017/04/15/动漫推荐/</code>为例<br>协议: http<br>网址: mrdear.cn<br>资源路径: 2017/04/15/动漫推荐/</p>\n<p>浏览器拿到地址后会对其中非ASCII码的Unicode字符解析,比如空格会变成%20,汉字也会变成其16进制对应的编码值,如下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">上面链接等价于</div><div class=\"line\">http:<span class=\"comment\">//mrdear.cn/2017/04/15/%E5%8A%A8%E6%BC%AB/%E5%8A%A8%E6%BC%AB%E6%8E%A8%E8%8D%90/</span></div></pre></td></tr></table></figure></p>\n<p>中间还有其他很复杂的流程,比如参数,协议,请求头,请求体等建立.</p>\n<h3 id=\"DNS域名解析\"><a href=\"#DNS域名解析\" class=\"headerlink\" title=\"DNS域名解析\"></a>DNS域名解析</h3><p>对于网址mrdear.cn,浏览器并不知道他所处的服务器位置,因此需要解析出其服务器ip,这个过程就是DNS域名解析.</p>\n<ul>\n<li>浏览器首先检查自身缓存dns解析,以chrome为例,输入<code>chrome://net-internals/#dns</code>即可看到缓存列表.该缓存通常几分钟到几小时不等,存在的话就直接返回,否则下一步</li>\n<li>和浏览器同样策略,OS对每一次解析结果也会做缓存,浏览器中不存在则在OS的缓存中查找.这个过成功也包括在本地hosts中查找.找到则返回,找不到则向本机的dns服务器发送查找请求.</li>\n<li><p>DNS服务器和本机在一个子网内,则APR解析到具体设备的mac地址,然后向其查找.如果不在一个子网,则直接ARP解析当前主机网关地址,网关一般是上一个路由节点,也就是把查询转交给上一层服务器,那么上一层服务器找不到还会转交给它的上一层,如此形成一个递归查询过程,直到查找到根服务器.找不到则返回失败.找到则返回ip地址和其TTL时间.<br>linux和unix下的dns配置在<code>/etc/resolv.conf</code>中,可以使用<code>nslookup或者dig查</code>看解析过程.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493479248.png?imageMogr2/thumbnail/!60p\" alt=\"\"></p>\n</li>\n<li><p>解析成功后,浏览器创建与服务器的socket连接,构造请求信息,进行TCP三次握手,开始向服务器传输消息,并等服务器回复信息,这也是TPC可靠的一个原因.</p>\n</li>\n</ul>\n<h3 id=\"服务器响应\"><a href=\"#服务器响应\" class=\"headerlink\" title=\"服务器响应\"></a>服务器响应</h3><p>服务器以nginx+tomcat为例,经过以上步骤后请求到达了nginx,nginx对URL进行分析,验证其所在机器上有所需要的服务,并且用户是有权限调用的,决定该URL由哪一个tomcat服务处理,捕获处理结果,返回给请求者,最后四次挥手结束请求.到此完成浏览器,服务端的通信.</p>\n<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>浏览器拿到了服务器的返回信息后会对内容进行解析,展现成用户所需要的内容,如html,pdf等.</p>\n<hr>\n<p>那么整个过程总结来看就是 用户输入URL -&gt; 浏览器解析地址 -&gt; DNS查找域名对应ip -&gt; 服务器响应 -&gt;浏览器拿到响应渲染.</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><h4 id=\"1-CDN网络\"><a href=\"#1-CDN网络\" class=\"headerlink\" title=\"1.CDN网络\"></a>1.CDN网络</h4><p>CDN又叫内容分布网络,一般用于静态资源如html,css,js的存储,简单的理解为一张大网,网上每一个节点都有着很多资源.那么每一个用户想要访问的时候就会去找离他最近的节点上面获取需要的内容.从而加快了网站整体访问速度.<br>举个例子:用户访问taobao的某css文件,首先浏览器会发送请求 -&gt; DNS解析域名,这里一般会有一个DNS负载均衡服务器,其得到最适合用户的CDN节点ip -&gt; 用户拿到CDN节点ip得到资源.</p>\n<h4 id=\"2-DNS劫持\"><a href=\"#2-DNS劫持\" class=\"headerlink\" title=\"2.DNS劫持\"></a>2.DNS劫持</h4><p>了解了DNS的解析是一个递归过程,找到域名 &lt;-&gt; ip就返回,如果有人手动修改了该条映射信息,那么就会返回到错误的ip地址,这种行为也叫DNS劫持,对于客户端来说,没有很好地方式能认为服务器返回的信息是可靠的,也就是不可靠的HTTP通信,所以也就导致了这一层的攻击漏洞,而这种事一般是天朝的电信运营商能干得出来,所以选择一个靠谱的DNS是非常重要,推荐<code>114.114.114.114</code></p>\n<h4 id=\"3-HTTPS\"><a href=\"#3-HTTPS\" class=\"headerlink\" title=\"3.HTTPS\"></a>3.HTTPS</h4><p>应对HTTP的不可靠通信,所以诞生了HTTPS,即HTTP over SSL,使用SSL/TLS对HTTP的内容进行加密解密.整个流程如下图:</p>\n<p><center><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493510445.png?imageMogr2/thumbnail/!100p\" alt=\"\"></center></p>\n<ul>\n<li>在SSL握手阶段，客户端浏览器会认证服务器的身份，这是通过“证书”来实现的，证书由证书权威（CA）为某个域名签发，可以理解为网站的身份证件，客户端需要对这个证件进行认证，需要确定该证书是否属于目标网站并确认证书本身是否有效。最后在握手阶段，通信的双方还会协商出一个用于加密和解密的会话密钥。</li>\n<li>SSL握手阶段结束之后，服务器和客户端使用协商出的会话密钥对交互的数据进行加密/解密操作，对于HTTP协议来说，就是将HTTP请求和应答经过加密之后再发送到网络上。<br>HTTPS协议对服务器进行了一次身份验证,所以即使DNS被劫持,定向到的服务器也会因为没证书而无法通过身份验证.</li>\n</ul>\n<h4 id=\"4-乱码问题\"><a href=\"#4-乱码问题\" class=\"headerlink\" title=\"4.乱码问题\"></a>4.乱码问题</h4><p>流程清晰后乱码问题就很好解决了,把浏览器,Nginx,Tomcat等都当成水池的话,数据的乱码只能在每一个的入口端和出口端.如果发生了乱码,那么首先定位到是哪一个口产生了乱码,然后再去找原因,一般都能解决.<br>以JavaWEB应用为例,乱码主要发生在IO交互的过程中.其一浏览器与服务器建立socket连接,浏览器对URL以及request转换编码.请求到达tomcat,tomcat会对其进行解码,这个解码可在tomcat目录下的conf/server.xml中配置URIEncoding<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">port</span>=<span class=\"string\">”8080″</span> <span class=\"attr\">protocol</span>=<span class=\"string\">”HTTP/1.1″</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">”150″</span>   <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">”200000″</span></span></div><div class=\"line\">     <span class=\"attr\">redirecPort</span>=<span class=\"string\">”8443″</span>    <span class=\"attr\">URIEncoding</span>=<span class=\"string\">”utf-8″/</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>这里要保证不乱码,下一步tomcat建立了ServletRequest和ServletResponse,那么这里也有编码,一般是post表单或者request body乱码,那么就需要指定ServletRequest和ServletResponse的编码格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.setCharacterEncoding(encoding);<span class=\"comment\">//设置请求信息编码</span></div><div class=\"line\">response.setCharacterEncoding(encoding);<span class=\"comment\">//设置返回信息编码</span></div></pre></td></tr></table></figure></p>\n<p>Java程序在处理请求时和操作系统会有IO通信,和数据库会有IO通信,整个过程也会涉及编码,这种一般代码中会自动控制,出问题几率不大.<br>浏览器拿到返回信息后对页面进行渲染,这一步也会有编码,这个一般手动指定下浏览器的渲染编码,比如<code>Content-Type: text/html;charset=UTF-8</code>,指定以UTF-8渲染该text/html返回.</p>\n<h4 id=\"5-几种域名解析\"><a href=\"#5-几种域名解析\" class=\"headerlink\" title=\"5.几种域名解析\"></a>5.几种域名解析</h4><p>域名解析记录主要分为：A 记录、MX记录、CNAME 记录、NS记录和 TXT记录</p>\n<ul>\n<li>A记录：A 代表的是Address，用来指定域名对应的IP地址。域名可以多对一但是不能一对多。</li>\n<li>MX记录：Mail Exchange,就是讲某个域名下的邮件服务器指向自己的Mail Server。</li>\n<li>CNAME记录：别名解析。将一个域名设置一个或者多个别名。</li>\n<li>NS记录：为某个域名指定DNS解析服务器。</li>\n<li>TXT记录：为某个主机名或者域名设置文字说明。<br>本站是托管于github的,主域名<code>mrdear.cn</code>是使用CNAME解析到<code>nl101531.github.io</code>的,二级域名<code>oj.mrdear.cn</code>和<code>md.mrdear.cn</code>都是使用A记录解析到对应主机的ip地址,到达主机后再使用Nginx进行不同的服务器转发.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493775848.png?imageMogr2/thumbnail/!70p\" alt=\"\"></li>\n</ul>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>个人总结,如有错误请指出,以免误人子弟.</p>\n","excerpt":"","more":"<p>随着写的WEB程序越来越多,项目的部署也越来越繁琐,对于一些线上问题总是搞不清楚是哪个环节出的问题,归根结底是对整个流程的不熟悉导致,所以分析下一个WEB请求从用户输入地址到页面出来到底经历过多少东西.</p>\n<h3 id=\"URL解析\"><a href=\"#URL解析\" class=\"headerlink\" title=\"URL解析\"></a>URL解析</h3><p>首先把URL分割为几个部分,以地址<code>http://mrdear.cn/2017/04/15/动漫推荐/</code>为例<br>协议: http<br>网址: mrdear.cn<br>资源路径: 2017/04/15/动漫推荐/</p>\n<p>浏览器拿到地址后会对其中非ASCII码的Unicode字符解析,比如空格会变成%20,汉字也会变成其16进制对应的编码值,如下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">上面链接等价于</div><div class=\"line\">http:<span class=\"comment\">//mrdear.cn/2017/04/15/%E5%8A%A8%E6%BC%AB/%E5%8A%A8%E6%BC%AB%E6%8E%A8%E8%8D%90/</span></div></pre></td></tr></table></figure></p>\n<p>中间还有其他很复杂的流程,比如参数,协议,请求头,请求体等建立.</p>\n<h3 id=\"DNS域名解析\"><a href=\"#DNS域名解析\" class=\"headerlink\" title=\"DNS域名解析\"></a>DNS域名解析</h3><p>对于网址mrdear.cn,浏览器并不知道他所处的服务器位置,因此需要解析出其服务器ip,这个过程就是DNS域名解析.</p>\n<ul>\n<li>浏览器首先检查自身缓存dns解析,以chrome为例,输入<code>chrome://net-internals/#dns</code>即可看到缓存列表.该缓存通常几分钟到几小时不等,存在的话就直接返回,否则下一步</li>\n<li>和浏览器同样策略,OS对每一次解析结果也会做缓存,浏览器中不存在则在OS的缓存中查找.这个过成功也包括在本地hosts中查找.找到则返回,找不到则向本机的dns服务器发送查找请求.</li>\n<li><p>DNS服务器和本机在一个子网内,则APR解析到具体设备的mac地址,然后向其查找.如果不在一个子网,则直接ARP解析当前主机网关地址,网关一般是上一个路由节点,也就是把查询转交给上一层服务器,那么上一层服务器找不到还会转交给它的上一层,如此形成一个递归查询过程,直到查找到根服务器.找不到则返回失败.找到则返回ip地址和其TTL时间.<br>linux和unix下的dns配置在<code>/etc/resolv.conf</code>中,可以使用<code>nslookup或者dig查</code>看解析过程.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493479248.png?imageMogr2/thumbnail/!60p\" alt=\"\"></p>\n</li>\n<li><p>解析成功后,浏览器创建与服务器的socket连接,构造请求信息,进行TCP三次握手,开始向服务器传输消息,并等服务器回复信息,这也是TPC可靠的一个原因.</p>\n</li>\n</ul>\n<h3 id=\"服务器响应\"><a href=\"#服务器响应\" class=\"headerlink\" title=\"服务器响应\"></a>服务器响应</h3><p>服务器以nginx+tomcat为例,经过以上步骤后请求到达了nginx,nginx对URL进行分析,验证其所在机器上有所需要的服务,并且用户是有权限调用的,决定该URL由哪一个tomcat服务处理,捕获处理结果,返回给请求者,最后四次挥手结束请求.到此完成浏览器,服务端的通信.</p>\n<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>浏览器拿到了服务器的返回信息后会对内容进行解析,展现成用户所需要的内容,如html,pdf等.</p>\n<hr>\n<p>那么整个过程总结来看就是 用户输入URL -&gt; 浏览器解析地址 -&gt; DNS查找域名对应ip -&gt; 服务器响应 -&gt;浏览器拿到响应渲染.</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><h4 id=\"1-CDN网络\"><a href=\"#1-CDN网络\" class=\"headerlink\" title=\"1.CDN网络\"></a>1.CDN网络</h4><p>CDN又叫内容分布网络,一般用于静态资源如html,css,js的存储,简单的理解为一张大网,网上每一个节点都有着很多资源.那么每一个用户想要访问的时候就会去找离他最近的节点上面获取需要的内容.从而加快了网站整体访问速度.<br>举个例子:用户访问taobao的某css文件,首先浏览器会发送请求 -&gt; DNS解析域名,这里一般会有一个DNS负载均衡服务器,其得到最适合用户的CDN节点ip -&gt; 用户拿到CDN节点ip得到资源.</p>\n<h4 id=\"2-DNS劫持\"><a href=\"#2-DNS劫持\" class=\"headerlink\" title=\"2.DNS劫持\"></a>2.DNS劫持</h4><p>了解了DNS的解析是一个递归过程,找到域名 &lt;-&gt; ip就返回,如果有人手动修改了该条映射信息,那么就会返回到错误的ip地址,这种行为也叫DNS劫持,对于客户端来说,没有很好地方式能认为服务器返回的信息是可靠的,也就是不可靠的HTTP通信,所以也就导致了这一层的攻击漏洞,而这种事一般是天朝的电信运营商能干得出来,所以选择一个靠谱的DNS是非常重要,推荐<code>114.114.114.114</code></p>\n<h4 id=\"3-HTTPS\"><a href=\"#3-HTTPS\" class=\"headerlink\" title=\"3.HTTPS\"></a>3.HTTPS</h4><p>应对HTTP的不可靠通信,所以诞生了HTTPS,即HTTP over SSL,使用SSL/TLS对HTTP的内容进行加密解密.整个流程如下图:</p>\n<p><center><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493510445.png?imageMogr2/thumbnail/!100p\" alt=\"\"></center></p>\n<ul>\n<li>在SSL握手阶段，客户端浏览器会认证服务器的身份，这是通过“证书”来实现的，证书由证书权威（CA）为某个域名签发，可以理解为网站的身份证件，客户端需要对这个证件进行认证，需要确定该证书是否属于目标网站并确认证书本身是否有效。最后在握手阶段，通信的双方还会协商出一个用于加密和解密的会话密钥。</li>\n<li>SSL握手阶段结束之后，服务器和客户端使用协商出的会话密钥对交互的数据进行加密/解密操作，对于HTTP协议来说，就是将HTTP请求和应答经过加密之后再发送到网络上。<br>HTTPS协议对服务器进行了一次身份验证,所以即使DNS被劫持,定向到的服务器也会因为没证书而无法通过身份验证.</li>\n</ul>\n<h4 id=\"4-乱码问题\"><a href=\"#4-乱码问题\" class=\"headerlink\" title=\"4.乱码问题\"></a>4.乱码问题</h4><p>流程清晰后乱码问题就很好解决了,把浏览器,Nginx,Tomcat等都当成水池的话,数据的乱码只能在每一个的入口端和出口端.如果发生了乱码,那么首先定位到是哪一个口产生了乱码,然后再去找原因,一般都能解决.<br>以JavaWEB应用为例,乱码主要发生在IO交互的过程中.其一浏览器与服务器建立socket连接,浏览器对URL以及request转换编码.请求到达tomcat,tomcat会对其进行解码,这个解码可在tomcat目录下的conf/server.xml中配置URIEncoding<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">connector</span> <span class=\"attr\">port</span>=<span class=\"string\">”8080″</span> <span class=\"attr\">protocol</span>=<span class=\"string\">”HTTP/1.1″</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">”150″</span>   <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">”200000″</span></div><div class=\"line\">     <span class=\"attr\">redirecPort</span>=<span class=\"string\">”8443″</span>    <span class=\"attr\">URIEncoding</span>=<span class=\"string\">”utf-8″/</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里要保证不乱码,下一步tomcat建立了ServletRequest和ServletResponse,那么这里也有编码,一般是post表单或者request body乱码,那么就需要指定ServletRequest和ServletResponse的编码格式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.setCharacterEncoding(encoding);<span class=\"comment\">//设置请求信息编码</span></div><div class=\"line\">response.setCharacterEncoding(encoding);<span class=\"comment\">//设置返回信息编码</span></div></pre></td></tr></table></figure></p>\n<p>Java程序在处理请求时和操作系统会有IO通信,和数据库会有IO通信,整个过程也会涉及编码,这种一般代码中会自动控制,出问题几率不大.<br>浏览器拿到返回信息后对页面进行渲染,这一步也会有编码,这个一般手动指定下浏览器的渲染编码,比如<code>Content-Type: text/html;charset=UTF-8</code>,指定以UTF-8渲染该text/html返回.</p>\n<h4 id=\"5-几种域名解析\"><a href=\"#5-几种域名解析\" class=\"headerlink\" title=\"5.几种域名解析\"></a>5.几种域名解析</h4><p>域名解析记录主要分为：A 记录、MX记录、CNAME 记录、NS记录和 TXT记录</p>\n<ul>\n<li>A记录：A 代表的是Address，用来指定域名对应的IP地址。域名可以多对一但是不能一对多。</li>\n<li>MX记录：Mail Exchange,就是讲某个域名下的邮件服务器指向自己的Mail Server。</li>\n<li>CNAME记录：别名解析。将一个域名设置一个或者多个别名。</li>\n<li>NS记录：为某个域名指定DNS解析服务器。</li>\n<li>TXT记录：为某个主机名或者域名设置文字说明。<br>本站是托管于github的,主域名<code>mrdear.cn</code>是使用CNAME解析到<code>nl101531.github.io</code>的,二级域名<code>oj.mrdear.cn</code>和<code>md.mrdear.cn</code>都是使用A记录解析到对应主机的ip地址,到达主机后再使用Nginx进行不同的服务器转发.<br><img src=\"http://oobu4m7ko.bkt.clouddn.com/1493775848.png?imageMogr2/thumbnail/!70p\" alt=\"\"></li>\n</ul>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>个人总结,如有错误请指出,以免误人子弟.</p>\n"},{"title":"ERP叛逃者(转)","date":"2017-03-19T10:21:00.000Z","_content":"\n# ERP叛逃者(转)\n\n标签（空格分隔）： 随谈\n\n---\n\n>作者:alswl\n原文链接:https://blog.alswl.com/2011/04/erp-defectors/\n\n一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.\n\n----------\n\n大四实习时候，跑去驻厂开发，当时主管跟我说\"我们做的是企业信息化软件\"。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。\n\n在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。\n\n我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。\n\n可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。\n\n我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。\n\n我简单比较了互联网企业和传统行业软件企业的差异。\n\n### 目标人群不一样\n\n行业软件：企业用户\n\n互联网产品：个人用户更多，也有企业用户\n\n由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。\n\n另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。\n\n### 盈利点不一样\n\n互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。\n\n行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。\n\n盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。\n\n### 核心竞争力\n\n行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。\n\n互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。\n\n互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）\n\n我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。\n\n\n\n\n\n","source":"_posts/随谈/ERP叛逃者.md","raw":"---\ntitle: ERP叛逃者(转)\ncategories: 经验\ntags:\n - 选择\ndate: 2017-03-19 18:21:00\n\n---\n\n# ERP叛逃者(转)\n\n标签（空格分隔）： 随谈\n\n---\n\n>作者:alswl\n原文链接:https://blog.alswl.com/2011/04/erp-defectors/\n\n一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.\n\n----------\n\n大四实习时候，跑去驻厂开发，当时主管跟我说\"我们做的是企业信息化软件\"。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。\n\n在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。\n\n我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。\n\n可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。\n\n我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。\n\n我简单比较了互联网企业和传统行业软件企业的差异。\n\n### 目标人群不一样\n\n行业软件：企业用户\n\n互联网产品：个人用户更多，也有企业用户\n\n由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。\n\n另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。\n\n### 盈利点不一样\n\n互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。\n\n行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。\n\n盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。\n\n### 核心竞争力\n\n行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。\n\n互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。\n\n互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）\n\n我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。\n\n\n\n\n\n","slug":"随谈/ERP叛逃者","published":1,"updated":"2017-04-21T01:40:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7yj002f6wz5hqh8lbol","content":"<h1 id=\"ERP叛逃者-转\"><a href=\"#ERP叛逃者-转\" class=\"headerlink\" title=\"ERP叛逃者(转)\"></a>ERP叛逃者(转)</h1><p>标签（空格分隔）： 随谈</p>\n<hr>\n<blockquote>\n<p>作者:alswl<br>原文链接:<a href=\"https://blog.alswl.com/2011/04/erp-defectors/\" target=\"_blank\" rel=\"external\">https://blog.alswl.com/2011/04/erp-defectors/</a></p>\n</blockquote>\n<p>一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.</p>\n<hr>\n<p>大四实习时候，跑去驻厂开发，当时主管跟我说”我们做的是企业信息化软件”。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。</p>\n<p>在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。</p>\n<p>我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。</p>\n<p>可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。</p>\n<p>我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。</p>\n<p>我简单比较了互联网企业和传统行业软件企业的差异。</p>\n<h3 id=\"目标人群不一样\"><a href=\"#目标人群不一样\" class=\"headerlink\" title=\"目标人群不一样\"></a>目标人群不一样</h3><p>行业软件：企业用户</p>\n<p>互联网产品：个人用户更多，也有企业用户</p>\n<p>由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。</p>\n<p>另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。</p>\n<h3 id=\"盈利点不一样\"><a href=\"#盈利点不一样\" class=\"headerlink\" title=\"盈利点不一样\"></a>盈利点不一样</h3><p>互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。</p>\n<p>行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。</p>\n<p>盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。</p>\n<h3 id=\"核心竞争力\"><a href=\"#核心竞争力\" class=\"headerlink\" title=\"核心竞争力\"></a>核心竞争力</h3><p>行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。</p>\n<p>互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。</p>\n<p>互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）</p>\n<p>我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。</p>\n","excerpt":"","more":"<h1 id=\"ERP叛逃者-转\"><a href=\"#ERP叛逃者-转\" class=\"headerlink\" title=\"ERP叛逃者(转)\"></a>ERP叛逃者(转)</h1><p>标签（空格分隔）： 随谈</p>\n<hr>\n<blockquote>\n<p>作者:alswl<br>原文链接:<a href=\"https://blog.alswl.com/2011/04/erp-defectors/\">https://blog.alswl.com/2011/04/erp-defectors/</a></p>\n</blockquote>\n<p>一篇对于毕业生很有指导意义的文章,踏入职场,面临的第一个选择就是工作,第一份工作可能并不如你所期望的那样,那么你真正想要什么呢?文章会给你答案.</p>\n<hr>\n<p>大四实习时候，跑去驻厂开发，当时主管跟我说”我们做的是企业信息化软件”。毕业之后找工作，进入一家国内还算有名的ERP公司，做ERPII产品（CRM/工作流/ 电子商务平台等ERP软件附属产品）的开发和二次开发。</p>\n<p>在这一年半的时间里，我学习了一些行业知识，熟悉了公司自己的开发模式、框架和工具。浑浑噩噩的直到某一天，我发现我写代码没有键盘飞扬的感觉。我惶恐，我感觉我遇到 瓶颈停止成长了。我开始思索我这种状况的产生，我重新翻开曾经看的糊里糊涂的《人月神话》，研读阿朱的《走出软件作坊》，尝试找到问题和解决办法。</p>\n<p>我回想我工作之后做的事情：我负责的是从顾问那里拿到伪SQL+伪代码，然后将它们在公司的框架上面实现起来，再手工完成功能性测试。我做一个极端的假设：如果早50 年，ERP公司给用户提供解决方案可以是在纸上提出，根本不需要电脑。所以ERP的本质是对业务的梳理，规范化的引导，让企业高效整合资源充分发挥产能的公司。这与我 想象的IT公司完全不一样，我所希望的IT公司能够追求极致，创造用户喜欢的，快速响应用户需求，扩展性强的产品。如果具备这些元素，会很快被同类公司超越。</p>\n<p>可是公司立足于市场近30年，绝对不是这么不堪，她有自己的核心竞争力：标准的业务流程，强大的顾问和实施团队，本土化的产品。</p>\n<p>我比较了知名互联网公司、创业型IT公司和传统管理软件行业的区别，惊讶的发现，原来，计算机科学与技术专业毕业的我，不在IT公司，在一家服务咨询公司！！！我把这 个想法和主管进行交流，主管也认同我们提供的是service而不是soft。</p>\n<p>我简单比较了互联网企业和传统行业软件企业的差异。</p>\n<h3 id=\"目标人群不一样\"><a href=\"#目标人群不一样\" class=\"headerlink\" title=\"目标人群不一样\"></a>目标人群不一样</h3><p>行业软件：企业用户</p>\n<p>互联网产品：个人用户更多，也有企业用户</p>\n<p>由于给企业用户进行定制，导致内部封闭现象严重，更新周期漫长。另外，企业用户可以强制要求用户使用某种操作方式或者某种环境，比如我就是要让你用IE6，你不用IE 6系统出现问题，那是你的原因。而互联网产品就面对所有网民，必须考虑到标准问题。</p>\n<p>另外，企业用户更换系统平台频率低，系统一旦投入使用，需要经过几年的使用，才会可能考虑更换，其依赖性比互联网产品高出个数量级。由于互联网的开放性，互联网用户很 容易在不同产品之间进行更换。</p>\n<h3 id=\"盈利点不一样\"><a href=\"#盈利点不一样\" class=\"headerlink\" title=\"盈利点不一样\"></a>盈利点不一样</h3><p>互联网：吸引用户使用，所以用户体验，速度是需要考虑的，依赖用户使用情况（VIP制度、广告收入）盈利。</p>\n<p>行业软件：卖给产品和服务给用户，功能符合用户需要，顾问实施精准，依赖销售产品+服务盈利。</p>\n<p>盈利点造成行业软件未必会把用户体验、速度这些相对次要的问题放在首位考虑，而是考虑先解决实际问题，满足用户需要。</p>\n<h3 id=\"核心竞争力\"><a href=\"#核心竞争力\" class=\"headerlink\" title=\"核心竞争力\"></a>核心竞争力</h3><p>行业软件最依赖的核心竞争力是对某个行业的了解，比如阿朱所在的明源专注于房地产，金蝶用友各有所擅长的行业。并不是他们不想在别的行业挣钱，而是对应行业的顾问极难 培养（行业/领域专家）。</p>\n<p>互联网产品的核心竞争力就更多样化，Web2.0时代可以是用户关系，用户基数（腾讯，现在的人人），也可以是某一款特别大众需要的产品（淘宝，搜索引擎，书签服务） ，又或是核心技术（Google），这些核心竞争力会在发展过程中相互转换，相互渗透。</p>\n<p>互联网产品的特性是快，这个快是表象，本质是在于互联网产品要充分挖掘用户需求，不断满足现有要求，并预测引领用户需求趋势，这也是创新精神具体体现。由于同质化严重 ，竞争白热化，导致互联网产品纷纷涌现，给人一种爆炸的感觉。其实，一款好的互联网产品从有创意到磨砺成熟，是需要经过一段还算长的时间的。（除非是搞搞微创新，大家 都知道怎么做，没什么核心竞争力，只是拼模拟速度了）</p>\n<p>我在想清楚这些之后，发现ERP不是我的归宿，互联网才是我追寻的方向。</p>\n"},{"title":"工作经验","date":"2017-02-28T01:50:00.000Z","_content":"\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","source":"_posts/随谈/工作经验(持续更新).md","raw":"---\ntitle: 工作经验\ntags:\n  - 工作\ncategories: 经验\ndate: 2017-02-28 09:50:00\n---\n\n记录自己工作中的一点小经验,有不足的地方请指正.\n\n1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.\n例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.\n\n2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.\n\n3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.\n\n4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.\n\n5.**业务性的代码**怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.\n\n6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.\n\n7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.\n\n8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!\n\n9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.\n","slug":"随谈/工作经验(持续更新)","published":1,"updated":"2017-04-21T01:39:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7ym002i6wz55d7jhj76","content":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n","excerpt":"","more":"<p>记录自己工作中的一点小经验,有不足的地方请指正.</p>\n<p>1.调第三方的的服务的时候切记不能直接调用,为了扩展性要使用自己定义封装.<br>例子:我要使用支付宝的sdk调用支付宝的支付,那么为了让支付宝的SDK不侵染业务代码,那么就应该在上层再封装一层,保证自己业务的代码中不出现其他的方的代码.</p>\n<p>2.服务封装要尽可能确保只为一个层服务,尽量减少跨层级调用,比如controller层就应该避免调用dao层,而是调用service层.</p>\n<p>3.某一个方法无关状态,且复用性高的话最好写成静态类调用方式.语义清晰,调用方便.</p>\n<p>4.接手某一个业务时,最好先画出该业务的流程图,设计出大概的代码结构后再去写代码,这样虽然前期成本高,但是综合来看的话最节省时间和精力.</p>\n<p>5.<strong>业务性的代码</strong>怎么安全怎么写,在安全的基础上适当保证代码简洁.比如simpleDateFormat是线程不安全的,最简单的做法就是在需要的时候new一个,在业务性的代码中不要使用ThreadLocal这些东西进行优化,这样会增加CR成本.</p>\n<p>6.对于工作中出现的一些在他人帮助下解决的问题,自己要想办法复现,然后尝试自己独立解决.</p>\n<p>7.updateXXX 不应该出现在 XXXService 里,因为不同的业务流程不同导致update的原因可能很多,这样就带来了无谓的复杂度,该操作应该放在DAO层,Service 层的功能是做某个逻辑，而不是做某个数据操作。职责不一样的.所谓的Service层复用指的是业务操作复用,而不是简单的代码复用.</p>\n<p>8.对于和第三方服务商服务交互的报文信息尽可能的全部打出来,避免以后因为某业务撕逼.这很重要!</p>\n<p>9.数据库经常有一些extend字段,对于这些字段对应DO提供String映射,在DTO中提供HashMap映射,因为该字段可能存出多种类型数据.</p>\n"},{"title":"如何学习一门新技术","date":"2017-02-01T02:37:00.000Z","_content":"\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","source":"_posts/随谈/如何学习一门新技术.md","raw":"---\ntitle: 如何学习一门新技术\ntags:\n  - 学习方法\ncategories: 经验\ndate: 2017-02-01 10:37:00\n---\n\n在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.\n\n图片来源: [dreamfy][1]\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 是什么?为什么会出现?\n这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.\n\n### 怎么做?\n最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.\n\n第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.\n\n第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.\n\n第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.\n\n第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.\n\n### 分享\n好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.\n\n\n  [1]: http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\n","slug":"随谈/如何学习一门新技术","published":1,"updated":"2017-04-21T01:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7yo002k6wz5bedbesdc","content":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\" target=\"_blank\" rel=\"external\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n","excerpt":"","more":"<p>在看他人博客的时候发现的,自己也是一直按照这样的模式去学,现在分享下整个流程.</p>\n<p>图片来源: <a href=\"http://dreamfy.cn/2016/11/24/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF/\">dreamfy</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2148449-71e36af82735d03d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"是什么-为什么会出现\"><a href=\"#是什么-为什么会出现\" class=\"headerlink\" title=\"是什么?为什么会出现?\"></a>是什么?为什么会出现?</h3><p>这一阶段主要是对该技术有一个整体了解,他所解决的是什么问题,他的整体结构等.</p>\n<h3 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h3><p>最简单的是找一个上手视频,因为视频是非常直观的展示了技术的使用.先学会用是最根本的,对于没有视频的技术的话,就可以搜索XX上手教程,XX学习记录之类的关键词,很轻松就找到了相关的上手博文,这一阶段一般都是环境整合搭建,然后写一个简单的入门Demo.</p>\n<p>第二个阶段,学会基本使用了就要去看官方文档,文档会让你更加详细的了解该技术的特性,开一个Demo项目把官方的一些例子都试试.</p>\n<p>第三个阶段,尝试在一些复杂的项目中使用(非生产项目),使用过程中难免会遇到各种各样的问题,官方文档和搜索引擎会帮助你解决,这一过程你会对该技术掌握更加娴熟.</p>\n<p>第三个阶段,去github上找一些别人的项目,主要是看他人的使用方法,模块设计,代码封装等.</p>\n<p>第四个阶段,生产项目使用吧,遇到问题还是官方文档和搜索引擎.</p>\n<h3 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h3><p>好记性不如烂笔头,博客记录是一个很好地习惯,能把自己学的东西和他人讲清楚才叫真正的懂了这个技术.</p>\n"},{"title":"面经","date":"2017-01-10T01:50:00.000Z","_content":"\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n## 第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就5000左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n### 1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n### 2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n## 第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","source":"_posts/随谈/面经.md","raw":"---\ntitle: 面经\ntags:\n  - 面试\ncategories: 经验\ndate: 2017-01-10 09:50:00\n---\n\n从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.\n\n\n## 第二次面试2017.1\n-----------\n上一家公司干了六个月,做的还不错,中间涨了一次工资,也就5000左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing\n\n第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等...\n### 1.电面\n首先自我介绍,这个很随意,技术人员一般都不看重这个.\n**1.ArrayList的扩容机制.**\n这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,\n**2.Map的containsKey和List的contain方法效率一样吗?**\n这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.\n**3.自己的项目问题**\n这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.\n\n### 2.现场面\n现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态...\n**1.Linux的top命令**\n不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.\n面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.\n**2.Linux下怎么查看日志**\n因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设**日志是10G大小,怎么快速找到自己想要的东西**?这个问题想了一会,直接说不会....尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:[Linux下的more和less的使用][1]\n**3.爬取新浪微博用户,怎么判断该用户是否已经爬过**\n博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.\n接着面试官问如果不使用数据库呢?\n博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法...\n**4.在做项目中有没有什么取巧的经历?**\n一时间还真想不到...就没答上来.\n**5.在项目中遇到的难点**\n博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.\n**6.关于代码洁癖举个例子**\n博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.\n\n本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以....**等消息中**  \n更新:\n已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!\n\n\n----------\n\n## 第一次面试2016.7\n------\n首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.\nhttps://github.com/penglongli/My-Resume\n\n第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.\n**1.谈一谈Java集合**\n这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.\n**2.谈谈对Spring的理解.**\n博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:[Spring知识点提炼][2]\n**3.自己项目中的问题.**\n自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出**自己不是很了解的情况下是如何快速解决一个问题的能力**\n\n拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.\n\n\n  [1]: http://www.cnblogs.com/aijianshi/p/5750911.html\n  [2]: http://blog.csdn.net/u013256816/article/details/51386182\n","slug":"随谈/面经","published":1,"updated":"2017-05-14T15:06:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4i0a7yp002p6wz5645rubgx","content":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><hr>\n<p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就5000左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<h3 id=\"1-电面\"><a href=\"#1-电面\" class=\"headerlink\" title=\"1.电面\"></a>1.电面</h3><p>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<h3 id=\"2-现场面\"><a href=\"#2-现场面\" class=\"headerlink\" title=\"2.现场面\"></a>2.现场面</h3><p>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\" target=\"_blank\" rel=\"external\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><hr>\n<p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\" target=\"_blank\" rel=\"external\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\" target=\"_blank\" rel=\"external\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n","excerpt":"","more":"<p>从2016.7来到上海后记录下自己的面试经历,希望能对其他人有所帮助,同时给自己一个提醒.</p>\n<h2 id=\"第二次面试2017-1\"><a href=\"#第二次面试2017-1\" class=\"headerlink\" title=\"第二次面试2017.1\"></a>第二次面试2017.1</h2><hr>\n<p>上一家公司干了六个月,做的还不错,中间涨了一次工资,也就5000左右,但是公司没技术氛围,而且加班是家常便饭,所以为了自己打算离开了,这里我是提前和领导说不打算续签的,自己离职不太好意思拿年终奖再离职,不过领导知道后还是给我申请了年终奖,感动Ing</p>\n<p>第二次面试先电面再去公司面试的,总体感觉很不错,结果还在等…</p>\n<h3 id=\"1-电面\"><a href=\"#1-电面\" class=\"headerlink\" title=\"1.电面\"></a>1.电面</h3><p>首先自我介绍,这个很随意,技术人员一般都不看重这个.<br><strong>1.ArrayList的扩容机制.</strong><br>这个抓住几个点,本质是一个Object的数组,初始容量10,1.7JDK之后每次扩容是1.5倍,但是1.6的JDK版本是1.5倍+1,这个回答出来说明你研究过这个而不是直接背答案.每次add都会进行容量检查,扩容是调用一个native方法System.arrayCopy,<br><strong>2.Map的containsKey和List的contain方法效率一样吗?</strong><br>这个问题回答要表现出List基于数组在查找方面的缺点,就是最坏情况下是查找全部元素后才找到,但是Map是基于Hash链表,查找是根据hash计算出来的索引地址,找到索引后会判断上面是否有链表存在,有的话会接着查找,补充下JDK8之后的HashMap当哈希桶上的链表长度大于8则会转换为一颗红黑树,因此随着碰撞增加仍然会提供稳定的性能.<br><strong>3.自己的项目问题</strong><br>这个就实打实的说就好了.其中有一个项目提到了python,因此面试官问我python学的怎么样,可以来聊聊python,但是我就会基础,所以不了了之,简历上不熟的东西尽量少写.</p>\n<h3 id=\"2-现场面\"><a href=\"#2-现场面\" class=\"headerlink\" title=\"2.现场面\"></a>2.现场面</h3><p>现场面就没问很多基础问题了,主要是一些突发的问题,问了不少Linux的知识,自己又不是太熟,所以处于被虐状态…<br><strong>1.Linux的top命令</strong><br>不会,我说因为公司有运维,用服务器也就查看日志什么,自己不是很了解.<br>面试官说了一句话,说我们这是工程师和运维不分家的,一个好的工程师必然要了解代码是怎么运行的,也就需要对代码运行环境有很深的了解,这样才能写出优秀的代码,大概意思是这样的,感觉很有道理,自己Linux的服务器知识欠缺很多.<br><strong>2.Linux下怎么查看日志</strong><br>因为上面提到了自己用服务器查看日志,所以就直接被问了,博主说一般用cat命令配合grep来查看,或者使用VIM来查看,用tail -f查看实时日志,head查看开始日志等,然后被问了假设<strong>日志是10G大小,怎么快速找到自己想要的东西</strong>?这个问题想了一会,直接说不会….尴尬,后来提示用less命令,该命令不会全部加载文件.参考博文:<a href=\"http://www.cnblogs.com/aijianshi/p/5750911.html\">Linux下的more和less的使用</a><br><strong>3.爬取新浪微博用户,怎么判断该用户是否已经爬过</strong><br>博主说了数据量小的话使用Map集合或者Set集合,数据量多的话,就把某一个唯一字段设置为数据库主键,爬取的用户插入到数据库,去重交给数据库来做就好了.<br>接着面试官问如果不使用数据库呢?<br>博主想了想,就随口说爬取一部分用户后写入到文件,然后生成MD5摘要,这样每次写入文件后判断该摘要是否已存在,存在就不写入,牺牲时间,保证最终的结果重复性最低.现在想来还是有问题,爬取是随机的,所以导致生成摘要碰撞几率太低.可能多一个字符少一个字符就导致摘要不同.没想到好办法…<br><strong>4.在做项目中有没有什么取巧的经历?</strong><br>一时间还真想不到…就没答上来.<br><strong>5.在项目中遇到的难点</strong><br>博主说了自己写的集成微信,支付宝,银联,预付费卡的一个支付模块,主要讲了遇到问题怎么解决的,然后怎么封装的.<br><strong>6.关于代码洁癖举个例子</strong><br>博主简历上写自己有代码洁癖,所以就被问了这个,我举了前公司,也就第一家面试的,使用JPA的多表查询时候返回一个Objec[]数组,导致代码没法维护,并且重复代码太多,自己使用queryDSL,对公司代码进行了大面积的修改.</p>\n<p>本以为要挂了,最后说技术面过了,不知道是安慰我还是什么,接着是HR面,聊了聊公司现状,待遇问题等,最后也没说过还是不过等通知.因为现在时间点比较尴尬,我提出年后入职,也不知道可不可以….<strong>等消息中</strong><br>更新:<br>已收到offer,年后入职,这家公司效率真不错,接下来希望自己有所提高!</p>\n<hr>\n<h2 id=\"第一次面试2016-7\"><a href=\"#第一次面试2016-7\" class=\"headerlink\" title=\"第一次面试2016.7\"></a>第一次面试2016.7</h2><hr>\n<p>首先简历很重要,程序员不需要太花哨的简历,尽可能的展现出自己的特点就可以了,推荐下面简历,很不错的一个模板.<br><a href=\"https://github.com/penglongli/My-Resume\">https://github.com/penglongli/My-Resume</a></p>\n<p>第一次面试没有多紧张,可能对方是小公司吧,感觉很随意,面试就问了三个问题.<br><strong>1.谈一谈Java集合</strong><br>这种问题一般都很宽泛,博主就从List讲到Set再到Map这样的顺序来讲的,重点描述Arraylist,LinkedList,HashMap,TreeMap,最后再总结下什么样的场景用什么,算是回答好了.<br><strong>2.谈谈对Spring的理解.</strong><br>博主当时心里我哩个擦,又是这种宽泛的问题.但是还是微笑着回答Spring的核心是Ioc和AOP,其中Ioc是基于反射实现的,AOP是动态代理实现的,然后讲了从读取xml配置文件,实例化Spring容器,然后实例化Bean(这个过程挺复杂的,一会附上一张图),最后销毁Bean这一过程,结束.具体可以参考:<a href=\"http://blog.csdn.net/u013256816/article/details/51386182\">Spring知识点提炼</a><br><strong>3.自己项目中的问题.</strong><br>自己在学校接到过一个微信公众号的开发,问了怎么实现的,遇到的问题之类的.这种问题回答要表现出<strong>自己不是很了解的情况下是如何快速解决一个问题的能力</strong></p>\n<p>拿到offer,博主是比较安逸的人,薪资还不错就不继续再找工作了,其实应该多投几家的,才能选择最适合自己的.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4i0a7ra00006wz54k3va0ae","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7ro00076wz517f0qzz3"},{"post_id":"cj4i0a7wq00086wz5nhens42o","category_id":"cj4i0a7ws000a6wz5juuxq2ci","_id":"cj4i0a7x7000j6wz52q4ojvaz"},{"post_id":"cj4i0a7wr00096wz5ms9yixnk","category_id":"cj4i0a7ws000a6wz5juuxq2ci","_id":"cj4i0a7xa000p6wz51g1ae5hq"},{"post_id":"cj4i0a7ws000c6wz5uwzsbyxg","category_id":"cj4i0a7ws000a6wz5juuxq2ci","_id":"cj4i0a7xc000v6wz5zbkgicfq"},{"post_id":"cj4i0a7wu000d6wz5yub57986","category_id":"cj4i0a7xb000r6wz5fcnauyfn","_id":"cj4i0a7xj00126wz50e2l8dq3"},{"post_id":"cj4i0a7wx000e6wz5i2e4hswm","category_id":"cj4i0a7xb000r6wz5fcnauyfn","_id":"cj4i0a7xo00186wz5704m8px1"},{"post_id":"cj4i0a7x4000i6wz5yarvcuok","category_id":"cj4i0a7xj00136wz5rmkqoq8g","_id":"cj4i0a7xr001e6wz5579wm1l6"},{"post_id":"cj4i0a7x7000k6wz5vr97l76t","category_id":"cj4i0a7xo00196wz5tlgov5zi","_id":"cj4i0a7xx001k6wz5o24qidbg"},{"post_id":"cj4i0a7xt001h6wz58aqwlwvp","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7xz001p6wz5gqc7b5wo"},{"post_id":"cj4i0a7x9000o6wz5i6l5b4ww","category_id":"cj4i0a7xj00136wz5rmkqoq8g","_id":"cj4i0a7y1001r6wz5ynmqex84"},{"post_id":"cj4i0a7xv001j6wz5sn89lrwm","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7y4001w6wz52eeh173i"},{"post_id":"cj4i0a7xy001n6wz5cf1jjv2p","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7y5001y6wz54ly6se61"},{"post_id":"cj4i0a7xc000u6wz5pdwmh1gq","category_id":"cj4i0a7xo00196wz5tlgov5zi","_id":"cj4i0a7y700236wz5injquabl"},{"post_id":"cj4i0a7y0001q6wz5hc6sod8s","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7y800256wz5iel7ouh2"},{"post_id":"cj4i0a7y2001u6wz5ags5tx96","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7yc002a6wz5oyqav18r"},{"post_id":"cj4i0a7xd000w6wz5udloy6it","category_id":"cj4i0a7xo00196wz5tlgov5zi","_id":"cj4i0a7yj002c6wz5p3wu3urw"},{"post_id":"cj4i0a7y4001x6wz5pfek09w7","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7yk002h6wz55irytg38"},{"post_id":"cj4i0a7y500216wz5o3dkx1ja","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7yn002j6wz51zi05elr"},{"post_id":"cj4i0a7xh000z6wz5ny2ad6w6","category_id":"cj4i0a7xo00196wz5tlgov5zi","_id":"cj4i0a7yp002n6wz50f4921un"},{"post_id":"cj4i0a7y700246wz5ipni0pkb","category_id":"cj4i0a7rj00036wz50lalji65","_id":"cj4i0a7yq002q6wz5uji5vnzg"},{"post_id":"cj4i0a7xi00116wz577g83jn3","category_id":"cj4i0a7xo00196wz5tlgov5zi","_id":"cj4i0a7yr002t6wz51ddflgwm"},{"post_id":"cj4i0a7xk00156wz56f3f488m","category_id":"cj4i0a7yj002d6wz5pv1nm091","_id":"cj4i0a7yr002v6wz5959gls06"},{"post_id":"cj4i0a7xl00176wz5gyvcmm0t","category_id":"cj4i0a7yo002l6wz5qeck78of","_id":"cj4i0a7yr002y6wz5b91a2ilw"},{"post_id":"cj4i0a7xp001b6wz5uh1p1ap9","category_id":"cj4i0a7yj002d6wz5pv1nm091","_id":"cj4i0a7yr00306wz56td9pqtp"},{"post_id":"cj4i0a7xr001d6wz5gml1zi1l","category_id":"cj4i0a7yr002w6wz5vza5vs2j","_id":"cj4i0a7ys00346wz5121c79gp"},{"post_id":"cj4i0a7y800286wz5j44ladbt","category_id":"cj4i0a7yr00316wz5a8mju0ao","_id":"cj4i0a7yt00386wz5i74hjtwp"},{"post_id":"cj4i0a7yc002b6wz50d68kpw6","category_id":"cj4i0a7yj002d6wz5pv1nm091","_id":"cj4i0a7yv003c6wz5pfq7aduy"},{"post_id":"cj4i0a7yj002f6wz5hqh8lbol","category_id":"cj4i0a7yr00316wz5a8mju0ao","_id":"cj4i0a7yw003g6wz5ucjpzwqp"},{"post_id":"cj4i0a7ym002i6wz55d7jhj76","category_id":"cj4i0a7yr00316wz5a8mju0ao","_id":"cj4i0a7yx003k6wz5d0kutjta"},{"post_id":"cj4i0a7yo002k6wz5bedbesdc","category_id":"cj4i0a7yr00316wz5a8mju0ao","_id":"cj4i0a7yz003o6wz56wm0i1h7"},{"post_id":"cj4i0a7yp002p6wz5645rubgx","category_id":"cj4i0a7yr00316wz5a8mju0ao","_id":"cj4i0a7z0003r6wz5utm8adom"}],"PostTag":[{"post_id":"cj4i0a7ra00006wz54k3va0ae","tag_id":"cj4i0a7rk00046wz5fwia8d1m","_id":"cj4i0a7rn00066wz50cuewbi1"},{"post_id":"cj4i0a7wq00086wz5nhens42o","tag_id":"cj4i0a7ws000b6wz5ryk7yvtz","_id":"cj4i0a7x4000h6wz5shbjgrnp"},{"post_id":"cj4i0a7wr00096wz5ms9yixnk","tag_id":"cj4i0a7ws000b6wz5ryk7yvtz","_id":"cj4i0a7x9000n6wz5tdr2ig4r"},{"post_id":"cj4i0a7ws000c6wz5uwzsbyxg","tag_id":"cj4i0a7ws000b6wz5ryk7yvtz","_id":"cj4i0a7xb000t6wz5upbkcsp5"},{"post_id":"cj4i0a7wu000d6wz5yub57986","tag_id":"cj4i0a7xb000s6wz5vva3d3jw","_id":"cj4i0a7xi00106wz5uf3p2l32"},{"post_id":"cj4i0a7wx000e6wz5i2e4hswm","tag_id":"cj4i0a7xb000s6wz5vva3d3jw","_id":"cj4i0a7xl00166wz53vta1ujc"},{"post_id":"cj4i0a7x4000i6wz5yarvcuok","tag_id":"cj4i0a7xj00146wz5ukh1d2zi","_id":"cj4i0a7xq001c6wz5di4ha8p1"},{"post_id":"cj4i0a7x7000k6wz5vr97l76t","tag_id":"cj4i0a7xp001a6wz5x47kelwi","_id":"cj4i0a7xv001i6wz57hyi4g7c"},{"post_id":"cj4i0a7x9000o6wz5i6l5b4ww","tag_id":"cj4i0a7xj00146wz5ukh1d2zi","_id":"cj4i0a7xz001o6wz58gg2vkpr"},{"post_id":"cj4i0a7xc000u6wz5pdwmh1gq","tag_id":"cj4i0a7xp001a6wz5x47kelwi","_id":"cj4i0a7y4001v6wz58o7nleqi"},{"post_id":"cj4i0a7xd000w6wz5udloy6it","tag_id":"cj4i0a7xp001a6wz5x47kelwi","_id":"cj4i0a7y600226wz5aqmjbkjc"},{"post_id":"cj4i0a7xh000z6wz5ny2ad6w6","tag_id":"cj4i0a7xp001a6wz5x47kelwi","_id":"cj4i0a7yc00296wz5xgvxn5qx"},{"post_id":"cj4i0a7xi00116wz577g83jn3","tag_id":"cj4i0a7xp001a6wz5x47kelwi","_id":"cj4i0a7yk002g6wz5m2qb8e0q"},{"post_id":"cj4i0a7xk00156wz56f3f488m","tag_id":"cj4i0a7yj002e6wz50uzc88v5","_id":"cj4i0a7yp002o6wz5zwdla4rt"},{"post_id":"cj4i0a7xl00176wz5gyvcmm0t","tag_id":"cj4i0a7yo002m6wz50iieeo1j","_id":"cj4i0a7yr002u6wz57o9tcout"},{"post_id":"cj4i0a7xp001b6wz5uh1p1ap9","tag_id":"cj4i0a7yq002s6wz53m9950xi","_id":"cj4i0a7yr002z6wz5jaju05vy"},{"post_id":"cj4i0a7xr001d6wz5gml1zi1l","tag_id":"cj4i0a7yr002x6wz5i8i5bxyy","_id":"cj4i0a7ys00336wz5y8ytjnlg"},{"post_id":"cj4i0a7xt001h6wz58aqwlwvp","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7yt00376wz5uad22dfs"},{"post_id":"cj4i0a7xv001j6wz5sn89lrwm","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7yv003b6wz5458d9ou2"},{"post_id":"cj4i0a7xy001n6wz5cf1jjv2p","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7yw003f6wz5eyd6dnuk"},{"post_id":"cj4i0a7y0001q6wz5hc6sod8s","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7yx003j6wz50u6za26f"},{"post_id":"cj4i0a7y2001u6wz5ags5tx96","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7yz003n6wz55jinpl5b"},{"post_id":"cj4i0a7y4001x6wz5pfek09w7","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7z0003q6wz5xleqwuoj"},{"post_id":"cj4i0a7y500216wz5o3dkx1ja","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7z1003t6wz5zsmdqmoa"},{"post_id":"cj4i0a7y700246wz5ipni0pkb","tag_id":"cj4i0a7ys00326wz536h78ny6","_id":"cj4i0a7z1003v6wz5pihgnpkf"},{"post_id":"cj4i0a7y800286wz5j44ladbt","tag_id":"cj4i0a7z1003u6wz58wd247ut","_id":"cj4i0a7z1003x6wz5m9lma2d7"},{"post_id":"cj4i0a7yc002b6wz50d68kpw6","tag_id":"cj4i0a7z1003w6wz5cpms2i78","_id":"cj4i0a7z200406wz5g96og193"},{"post_id":"cj4i0a7yc002b6wz50d68kpw6","tag_id":"cj4i0a7z1003y6wz5ggehfq3o","_id":"cj4i0a7z200416wz5bvhvvj32"},{"post_id":"cj4i0a7yj002f6wz5hqh8lbol","tag_id":"cj4i0a7z1003z6wz5kpw7317a","_id":"cj4i0a7z200436wz5hbhwrsx7"},{"post_id":"cj4i0a7ym002i6wz55d7jhj76","tag_id":"cj4i0a7z200426wz5j845art9","_id":"cj4i0a7z300456wz5hjvmw5i1"},{"post_id":"cj4i0a7yo002k6wz5bedbesdc","tag_id":"cj4i0a7z200446wz5sol3q3jh","_id":"cj4i0a7z400476wz53asy2c7q"},{"post_id":"cj4i0a7yp002p6wz5645rubgx","tag_id":"cj4i0a7z300466wz59ajtc2mc","_id":"cj4i0a7z400486wz54y02ffai"}],"Tag":[{"name":"随谈","_id":"cj4i0a7rk00046wz5fwia8d1m"},{"name":"docker","_id":"cj4i0a7ws000b6wz5ryk7yvtz"},{"name":"java8","_id":"cj4i0a7xb000s6wz5vva3d3jw"},{"name":"redis","_id":"cj4i0a7xj00146wz5ukh1d2zi"},{"name":"Spring","_id":"cj4i0a7xp001a6wz5x47kelwi"},{"name":"bug","_id":"cj4i0a7yj002e6wz50uzc88v5"},{"name":"动漫","_id":"cj4i0a7yo002m6wz50iieeo1j"},{"name":"angular","_id":"cj4i0a7yq002s6wz53m9950xi"},{"name":"jdk","_id":"cj4i0a7yr002x6wz5i8i5bxyy"},{"name":"毕业设计","_id":"cj4i0a7ys00326wz536h78ny6"},{"name":"经验","_id":"cj4i0a7z1003u6wz58wd247ut"},{"name":"http","_id":"cj4i0a7z1003w6wz5cpms2i78"},{"name":"web","_id":"cj4i0a7z1003y6wz5ggehfq3o"},{"name":"选择","_id":"cj4i0a7z1003z6wz5kpw7317a"},{"name":"工作","_id":"cj4i0a7z200426wz5j845art9"},{"name":"学习方法","_id":"cj4i0a7z200446wz5sol3q3jh"},{"name":"面试","_id":"cj4i0a7z300466wz59ajtc2mc"}]}}